# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fife', [dirname(__file__)])
        except ImportError:
            import _fife
            return _fife
        if fp is not None:
            try:
                _mod = imp.load_module('_fife', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fife = swig_import_helper()
    del swig_import_helper
else:
    import _fife
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import fifechan
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _fife.SwigPyIterator_value(self)
    def incr(self, n=1): return _fife.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _fife.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _fife.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _fife.SwigPyIterator_equal(self, *args)
    def copy(self): return _fife.SwigPyIterator_copy(self)
    def next(self): return _fife.SwigPyIterator_next(self)
    def __next__(self): return _fife.SwigPyIterator___next__(self)
    def previous(self): return _fife.SwigPyIterator_previous(self)
    def advance(self, *args): return _fife.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _fife.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _fife.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _fife.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _fife.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _fife.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _fife.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _fife.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(StringVector self) -> SwigPyIterator"""
        return _fife.StringVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(StringVector self) -> bool"""
        return _fife.StringVector___nonzero__(self)

    def __bool__(self):
        """__bool__(StringVector self) -> bool"""
        return _fife.StringVector___bool__(self)

    def __len__(self):
        """__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _fife.StringVector___len__(self)

    def pop(self):
        """pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _fife.StringVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector"""
        return _fife.StringVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            StringVector v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _fife.StringVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _fife.StringVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)
        __delitem__(StringVector self, PySliceObject * slice)
        """
        return _fife.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector
        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _fife.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)
        __setitem__(StringVector self, PySliceObject * slice)
        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _fife.StringVector___setitem__(self, *args)

    def append(self, *args):
        """append(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _fife.StringVector_append(self, *args)

    def empty(self):
        """empty(StringVector self) -> bool"""
        return _fife.StringVector_empty(self)

    def size(self):
        """size(StringVector self) -> std::vector< std::string >::size_type"""
        return _fife.StringVector_size(self)

    def clear(self):
        """clear(StringVector self)"""
        return _fife.StringVector_clear(self)

    def swap(self, *args):
        """swap(StringVector self, StringVector v)"""
        return _fife.StringVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _fife.StringVector_get_allocator(self)

    def begin(self):
        """begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _fife.StringVector_begin(self)

    def end(self):
        """end(StringVector self) -> std::vector< std::string >::iterator"""
        return _fife.StringVector_end(self)

    def rbegin(self):
        """rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _fife.StringVector_rbegin(self)

    def rend(self):
        """rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _fife.StringVector_rend(self)

    def pop_back(self):
        """pop_back(StringVector self)"""
        return _fife.StringVector_pop_back(self)

    def erase(self, *args):
        """
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _fife.StringVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector
        """
        this = _fife.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(StringVector self, std::vector< std::string >::value_type const & x)"""
        return _fife.StringVector_push_back(self, *args)

    def front(self):
        """front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _fife.StringVector_front(self)

    def back(self):
        """back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _fife.StringVector_back(self)

    def assign(self, *args):
        """assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _fife.StringVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(StringVector self, std::vector< std::string >::size_type new_size)
        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _fife.StringVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _fife.StringVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(StringVector self, std::vector< std::string >::size_type n)"""
        return _fife.StringVector_reserve(self, *args)

    def capacity(self):
        """capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _fife.StringVector_capacity(self)

    __swig_destroy__ = _fife.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _fife.StringVector_swigregister
StringVector_swigregister(StringVector)

class UintVector(_object):
    """Proxy of C++ std::vector<(uint32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UintVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UintVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(UintVector self) -> SwigPyIterator"""
        return _fife.UintVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(UintVector self) -> bool"""
        return _fife.UintVector___nonzero__(self)

    def __bool__(self):
        """__bool__(UintVector self) -> bool"""
        return _fife.UintVector___bool__(self)

    def __len__(self):
        """__len__(UintVector self) -> std::vector< unsigned int >::size_type"""
        return _fife.UintVector___len__(self)

    def pop(self):
        """pop(UintVector self) -> std::vector< unsigned int >::value_type"""
        return _fife.UintVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(UintVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> UintVector"""
        return _fife.UintVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(UintVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, 
            UintVector v=std::vector< unsigned int,std::allocator< unsigned int > >())
        __setslice__(UintVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        """
        return _fife.UintVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(UintVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _fife.UintVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(UintVector self, std::vector< unsigned int >::difference_type i)
        __delitem__(UintVector self, PySliceObject * slice)
        """
        return _fife.UintVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(UintVector self, PySliceObject * slice) -> UintVector
        __getitem__(UintVector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _fife.UintVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(UintVector self, PySliceObject * slice, UintVector v)
        __setitem__(UintVector self, PySliceObject * slice)
        __setitem__(UintVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _fife.UintVector___setitem__(self, *args)

    def append(self, *args):
        """append(UintVector self, std::vector< unsigned int >::value_type const & x)"""
        return _fife.UintVector_append(self, *args)

    def empty(self):
        """empty(UintVector self) -> bool"""
        return _fife.UintVector_empty(self)

    def size(self):
        """size(UintVector self) -> std::vector< unsigned int >::size_type"""
        return _fife.UintVector_size(self)

    def clear(self):
        """clear(UintVector self)"""
        return _fife.UintVector_clear(self)

    def swap(self, *args):
        """swap(UintVector self, UintVector v)"""
        return _fife.UintVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(UintVector self) -> std::vector< unsigned int >::allocator_type"""
        return _fife.UintVector_get_allocator(self)

    def begin(self):
        """begin(UintVector self) -> std::vector< unsigned int >::iterator"""
        return _fife.UintVector_begin(self)

    def end(self):
        """end(UintVector self) -> std::vector< unsigned int >::iterator"""
        return _fife.UintVector_end(self)

    def rbegin(self):
        """rbegin(UintVector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _fife.UintVector_rbegin(self)

    def rend(self):
        """rend(UintVector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _fife.UintVector_rend(self)

    def pop_back(self):
        """pop_back(UintVector self)"""
        return _fife.UintVector_pop_back(self)

    def erase(self, *args):
        """
        erase(UintVector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(UintVector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _fife.UintVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(uint32_t)> self) -> UintVector
        __init__(std::vector<(uint32_t)> self, UintVector arg2) -> UintVector
        __init__(std::vector<(uint32_t)> self, std::vector< unsigned int >::size_type size) -> UintVector
        __init__(std::vector<(uint32_t)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> UintVector
        """
        this = _fife.new_UintVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(UintVector self, std::vector< unsigned int >::value_type const & x)"""
        return _fife.UintVector_push_back(self, *args)

    def front(self):
        """front(UintVector self) -> std::vector< unsigned int >::value_type const &"""
        return _fife.UintVector_front(self)

    def back(self):
        """back(UintVector self) -> std::vector< unsigned int >::value_type const &"""
        return _fife.UintVector_back(self)

    def assign(self, *args):
        """assign(UintVector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _fife.UintVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(UintVector self, std::vector< unsigned int >::size_type new_size)
        resize(UintVector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _fife.UintVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(UintVector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(UintVector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, 
            std::vector< unsigned int >::value_type const & x)
        """
        return _fife.UintVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(UintVector self, std::vector< unsigned int >::size_type n)"""
        return _fife.UintVector_reserve(self, *args)

    def capacity(self):
        """capacity(UintVector self) -> std::vector< unsigned int >::size_type"""
        return _fife.UintVector_capacity(self)

    __swig_destroy__ = _fife.delete_UintVector
    __del__ = lambda self : None;
UintVector_swigregister = _fife.UintVector_swigregister
UintVector_swigregister(UintVector)

class IntVector(_object):
    """Proxy of C++ std::vector<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(IntVector self) -> SwigPyIterator"""
        return _fife.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(IntVector self) -> bool"""
        return _fife.IntVector___nonzero__(self)

    def __bool__(self):
        """__bool__(IntVector self) -> bool"""
        return _fife.IntVector___bool__(self)

    def __len__(self):
        """__len__(IntVector self) -> std::vector< int >::size_type"""
        return _fife.IntVector___len__(self)

    def pop(self):
        """pop(IntVector self) -> std::vector< int >::value_type"""
        return _fife.IntVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _fife.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v=std::vector< int,std::allocator< int > >())
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _fife.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _fife.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _fife.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _fife.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _fife.IntVector___setitem__(self, *args)

    def append(self, *args):
        """append(IntVector self, std::vector< int >::value_type const & x)"""
        return _fife.IntVector_append(self, *args)

    def empty(self):
        """empty(IntVector self) -> bool"""
        return _fife.IntVector_empty(self)

    def size(self):
        """size(IntVector self) -> std::vector< int >::size_type"""
        return _fife.IntVector_size(self)

    def clear(self):
        """clear(IntVector self)"""
        return _fife.IntVector_clear(self)

    def swap(self, *args):
        """swap(IntVector self, IntVector v)"""
        return _fife.IntVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _fife.IntVector_get_allocator(self)

    def begin(self):
        """begin(IntVector self) -> std::vector< int >::iterator"""
        return _fife.IntVector_begin(self)

    def end(self):
        """end(IntVector self) -> std::vector< int >::iterator"""
        return _fife.IntVector_end(self)

    def rbegin(self):
        """rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _fife.IntVector_rbegin(self)

    def rend(self):
        """rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _fife.IntVector_rend(self)

    def pop_back(self):
        """pop_back(IntVector self)"""
        return _fife.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _fife.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int32_t)> self) -> IntVector
        __init__(std::vector<(int32_t)> self, IntVector arg2) -> IntVector
        __init__(std::vector<(int32_t)> self, std::vector< int >::size_type size) -> IntVector
        __init__(std::vector<(int32_t)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        this = _fife.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _fife.IntVector_push_back(self, *args)

    def front(self):
        """front(IntVector self) -> std::vector< int >::value_type const &"""
        return _fife.IntVector_front(self)

    def back(self):
        """back(IntVector self) -> std::vector< int >::value_type const &"""
        return _fife.IntVector_back(self)

    def assign(self, *args):
        """assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _fife.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _fife.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _fife.IntVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(IntVector self, std::vector< int >::size_type n)"""
        return _fife.IntVector_reserve(self, *args)

    def capacity(self):
        """capacity(IntVector self) -> std::vector< int >::size_type"""
        return _fife.IntVector_capacity(self)

    __swig_destroy__ = _fife.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _fife.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    """Proxy of C++ std::vector<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(FloatVector self) -> SwigPyIterator"""
        return _fife.FloatVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(FloatVector self) -> bool"""
        return _fife.FloatVector___nonzero__(self)

    def __bool__(self):
        """__bool__(FloatVector self) -> bool"""
        return _fife.FloatVector___bool__(self)

    def __len__(self):
        """__len__(FloatVector self) -> std::vector< float >::size_type"""
        return _fife.FloatVector___len__(self)

    def pop(self):
        """pop(FloatVector self) -> std::vector< float >::value_type"""
        return _fife.FloatVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector"""
        return _fife.FloatVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, 
            FloatVector v=std::vector< float,std::allocator< float > >())
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        """
        return _fife.FloatVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _fife.FloatVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(FloatVector self, std::vector< float >::difference_type i)
        __delitem__(FloatVector self, PySliceObject * slice)
        """
        return _fife.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector
        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _fife.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)
        __setitem__(FloatVector self, PySliceObject * slice)
        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _fife.FloatVector___setitem__(self, *args)

    def append(self, *args):
        """append(FloatVector self, std::vector< float >::value_type const & x)"""
        return _fife.FloatVector_append(self, *args)

    def empty(self):
        """empty(FloatVector self) -> bool"""
        return _fife.FloatVector_empty(self)

    def size(self):
        """size(FloatVector self) -> std::vector< float >::size_type"""
        return _fife.FloatVector_size(self)

    def clear(self):
        """clear(FloatVector self)"""
        return _fife.FloatVector_clear(self)

    def swap(self, *args):
        """swap(FloatVector self, FloatVector v)"""
        return _fife.FloatVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(FloatVector self) -> std::vector< float >::allocator_type"""
        return _fife.FloatVector_get_allocator(self)

    def begin(self):
        """begin(FloatVector self) -> std::vector< float >::iterator"""
        return _fife.FloatVector_begin(self)

    def end(self):
        """end(FloatVector self) -> std::vector< float >::iterator"""
        return _fife.FloatVector_end(self)

    def rbegin(self):
        """rbegin(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _fife.FloatVector_rbegin(self)

    def rend(self):
        """rend(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _fife.FloatVector_rend(self)

    def pop_back(self):
        """pop_back(FloatVector self)"""
        return _fife.FloatVector_pop_back(self)

    def erase(self, *args):
        """
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _fife.FloatVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(float)> self) -> FloatVector
        __init__(std::vector<(float)> self, FloatVector arg2) -> FloatVector
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> FloatVector
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector
        """
        this = _fife.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(FloatVector self, std::vector< float >::value_type const & x)"""
        return _fife.FloatVector_push_back(self, *args)

    def front(self):
        """front(FloatVector self) -> std::vector< float >::value_type const &"""
        return _fife.FloatVector_front(self)

    def back(self):
        """back(FloatVector self) -> std::vector< float >::value_type const &"""
        return _fife.FloatVector_back(self)

    def assign(self, *args):
        """assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _fife.FloatVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(FloatVector self, std::vector< float >::size_type new_size)
        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _fife.FloatVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _fife.FloatVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(FloatVector self, std::vector< float >::size_type n)"""
        return _fife.FloatVector_reserve(self, *args)

    def capacity(self):
        """capacity(FloatVector self) -> std::vector< float >::size_type"""
        return _fife.FloatVector_capacity(self)

    __swig_destroy__ = _fife.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _fife.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(DoubleVector self) -> SwigPyIterator"""
        return _fife.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(DoubleVector self) -> bool"""
        return _fife.DoubleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(DoubleVector self) -> bool"""
        return _fife.DoubleVector___bool__(self)

    def __len__(self):
        """__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _fife.DoubleVector___len__(self)

    def pop(self):
        """pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _fife.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _fife.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            DoubleVector v=std::vector< double,std::allocator< double > >())
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _fife.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _fife.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _fife.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _fife.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _fife.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _fife.DoubleVector_append(self, *args)

    def empty(self):
        """empty(DoubleVector self) -> bool"""
        return _fife.DoubleVector_empty(self)

    def size(self):
        """size(DoubleVector self) -> std::vector< double >::size_type"""
        return _fife.DoubleVector_size(self)

    def clear(self):
        """clear(DoubleVector self)"""
        return _fife.DoubleVector_clear(self)

    def swap(self, *args):
        """swap(DoubleVector self, DoubleVector v)"""
        return _fife.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _fife.DoubleVector_get_allocator(self)

    def begin(self):
        """begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _fife.DoubleVector_begin(self)

    def end(self):
        """end(DoubleVector self) -> std::vector< double >::iterator"""
        return _fife.DoubleVector_end(self)

    def rbegin(self):
        """rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _fife.DoubleVector_rbegin(self)

    def rend(self):
        """rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _fife.DoubleVector_rend(self)

    def pop_back(self):
        """pop_back(DoubleVector self)"""
        return _fife.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _fife.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        this = _fife.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _fife.DoubleVector_push_back(self, *args)

    def front(self):
        """front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _fife.DoubleVector_front(self)

    def back(self):
        """back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _fife.DoubleVector_back(self)

    def assign(self, *args):
        """assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _fife.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _fife.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _fife.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _fife.DoubleVector_reserve(self, *args)

    def capacity(self):
        """capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _fife.DoubleVector_capacity(self)

    __swig_destroy__ = _fife.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _fife.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class BoolVector(_object):
    """Proxy of C++ std::vector<(bool)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(BoolVector self) -> SwigPyIterator"""
        return _fife.BoolVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(BoolVector self) -> bool"""
        return _fife.BoolVector___nonzero__(self)

    def __bool__(self):
        """__bool__(BoolVector self) -> bool"""
        return _fife.BoolVector___bool__(self)

    def __len__(self):
        """__len__(BoolVector self) -> std::vector< bool >::size_type"""
        return _fife.BoolVector___len__(self)

    def pop(self):
        """pop(BoolVector self) -> std::vector< bool >::value_type"""
        return _fife.BoolVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> BoolVector"""
        return _fife.BoolVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, BoolVector v=std::vector< bool,std::allocator< bool > >())
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        """
        return _fife.BoolVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _fife.BoolVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(BoolVector self, std::vector< bool >::difference_type i)
        __delitem__(BoolVector self, PySliceObject * slice)
        """
        return _fife.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(BoolVector self, PySliceObject * slice) -> BoolVector
        __getitem__(BoolVector self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _fife.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(BoolVector self, PySliceObject * slice, BoolVector v)
        __setitem__(BoolVector self, PySliceObject * slice)
        __setitem__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _fife.BoolVector___setitem__(self, *args)

    def append(self, *args):
        """append(BoolVector self, std::vector< bool >::value_type x)"""
        return _fife.BoolVector_append(self, *args)

    def empty(self):
        """empty(BoolVector self) -> bool"""
        return _fife.BoolVector_empty(self)

    def size(self):
        """size(BoolVector self) -> std::vector< bool >::size_type"""
        return _fife.BoolVector_size(self)

    def clear(self):
        """clear(BoolVector self)"""
        return _fife.BoolVector_clear(self)

    def swap(self, *args):
        """swap(BoolVector self, BoolVector v)"""
        return _fife.BoolVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(BoolVector self) -> std::vector< bool >::allocator_type"""
        return _fife.BoolVector_get_allocator(self)

    def begin(self):
        """begin(BoolVector self) -> std::vector< bool >::iterator"""
        return _fife.BoolVector_begin(self)

    def end(self):
        """end(BoolVector self) -> std::vector< bool >::iterator"""
        return _fife.BoolVector_end(self)

    def rbegin(self):
        """rbegin(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _fife.BoolVector_rbegin(self)

    def rend(self):
        """rend(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _fife.BoolVector_rend(self)

    def pop_back(self):
        """pop_back(BoolVector self)"""
        return _fife.BoolVector_pop_back(self)

    def erase(self, *args):
        """
        erase(BoolVector self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(BoolVector self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _fife.BoolVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(bool)> self) -> BoolVector
        __init__(std::vector<(bool)> self, BoolVector arg2) -> BoolVector
        __init__(std::vector<(bool)> self, std::vector< bool >::size_type size) -> BoolVector
        __init__(std::vector<(bool)> self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> BoolVector
        """
        this = _fife.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(BoolVector self, std::vector< bool >::value_type x)"""
        return _fife.BoolVector_push_back(self, *args)

    def front(self):
        """front(BoolVector self) -> std::vector< bool >::value_type"""
        return _fife.BoolVector_front(self)

    def back(self):
        """back(BoolVector self) -> std::vector< bool >::value_type"""
        return _fife.BoolVector_back(self)

    def assign(self, *args):
        """assign(BoolVector self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _fife.BoolVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(BoolVector self, std::vector< bool >::size_type new_size)
        resize(BoolVector self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _fife.BoolVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _fife.BoolVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(BoolVector self, std::vector< bool >::size_type n)"""
        return _fife.BoolVector_reserve(self, *args)

    def capacity(self):
        """capacity(BoolVector self) -> std::vector< bool >::size_type"""
        return _fife.BoolVector_capacity(self)

    __swig_destroy__ = _fife.delete_BoolVector
    __del__ = lambda self : None;
BoolVector_swigregister = _fife.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class Uint16Uint16Pair(_object):
    """Proxy of C++ std::pair<(uint16_t,uint16_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uint16Uint16Pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uint16Uint16Pair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(std::pair<(uint16_t,uint16_t)> self) -> Uint16Uint16Pair
        __init__(std::pair<(uint16_t,uint16_t)> self, unsigned short first, unsigned short second) -> Uint16Uint16Pair
        __init__(std::pair<(uint16_t,uint16_t)> self, Uint16Uint16Pair p) -> Uint16Uint16Pair
        """
        this = _fife.new_Uint16Uint16Pair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _fife.Uint16Uint16Pair_first_set
    __swig_getmethods__["first"] = _fife.Uint16Uint16Pair_first_get
    if _newclass:first = _swig_property(_fife.Uint16Uint16Pair_first_get, _fife.Uint16Uint16Pair_first_set)
    __swig_setmethods__["second"] = _fife.Uint16Uint16Pair_second_set
    __swig_getmethods__["second"] = _fife.Uint16Uint16Pair_second_get
    if _newclass:second = _swig_property(_fife.Uint16Uint16Pair_second_get, _fife.Uint16Uint16Pair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _fife.delete_Uint16Uint16Pair
    __del__ = lambda self : None;
Uint16Uint16Pair_swigregister = _fife.Uint16Uint16Pair_swigregister
Uint16Uint16Pair_swigregister(Uint16Uint16Pair)

class Uint16Uint16PairVector(_object):
    """Proxy of C++ std::vector<(std::pair<(uint16_t,uint16_t)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uint16Uint16PairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uint16Uint16PairVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(Uint16Uint16PairVector self) -> SwigPyIterator"""
        return _fife.Uint16Uint16PairVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(Uint16Uint16PairVector self) -> bool"""
        return _fife.Uint16Uint16PairVector___nonzero__(self)

    def __bool__(self):
        """__bool__(Uint16Uint16PairVector self) -> bool"""
        return _fife.Uint16Uint16PairVector___bool__(self)

    def __len__(self):
        """__len__(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::size_type"""
        return _fife.Uint16Uint16PairVector___len__(self)

    def pop(self):
        """pop(Uint16Uint16PairVector self) -> Uint16Uint16Pair"""
        return _fife.Uint16Uint16PairVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i, std::vector< std::pair< unsigned short,unsigned short > >::difference_type j) -> Uint16Uint16PairVector"""
        return _fife.Uint16Uint16PairVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i, std::vector< std::pair< unsigned short,unsigned short > >::difference_type j, 
            Uint16Uint16PairVector v=std::vector< std::pair< uint16_t,uint16_t >,std::allocator< std::pair< uint16_t,uint16_t > > >())
        __setslice__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i, std::vector< std::pair< unsigned short,unsigned short > >::difference_type j)
        """
        return _fife.Uint16Uint16PairVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i, std::vector< std::pair< unsigned short,unsigned short > >::difference_type j)"""
        return _fife.Uint16Uint16PairVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i)
        __delitem__(Uint16Uint16PairVector self, PySliceObject * slice)
        """
        return _fife.Uint16Uint16PairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(Uint16Uint16PairVector self, PySliceObject * slice) -> Uint16Uint16PairVector
        __getitem__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i) -> Uint16Uint16Pair
        """
        return _fife.Uint16Uint16PairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(Uint16Uint16PairVector self, PySliceObject * slice, Uint16Uint16PairVector v)
        __setitem__(Uint16Uint16PairVector self, PySliceObject * slice)
        __setitem__(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::difference_type i, Uint16Uint16Pair x)
        """
        return _fife.Uint16Uint16PairVector___setitem__(self, *args)

    def append(self, *args):
        """append(Uint16Uint16PairVector self, Uint16Uint16Pair x)"""
        return _fife.Uint16Uint16PairVector_append(self, *args)

    def empty(self):
        """empty(Uint16Uint16PairVector self) -> bool"""
        return _fife.Uint16Uint16PairVector_empty(self)

    def size(self):
        """size(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::size_type"""
        return _fife.Uint16Uint16PairVector_size(self)

    def clear(self):
        """clear(Uint16Uint16PairVector self)"""
        return _fife.Uint16Uint16PairVector_clear(self)

    def swap(self, *args):
        """swap(Uint16Uint16PairVector self, Uint16Uint16PairVector v)"""
        return _fife.Uint16Uint16PairVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::allocator_type"""
        return _fife.Uint16Uint16PairVector_get_allocator(self)

    def begin(self):
        """begin(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::iterator"""
        return _fife.Uint16Uint16PairVector_begin(self)

    def end(self):
        """end(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::iterator"""
        return _fife.Uint16Uint16PairVector_end(self)

    def rbegin(self):
        """rbegin(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::reverse_iterator"""
        return _fife.Uint16Uint16PairVector_rbegin(self)

    def rend(self):
        """rend(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::reverse_iterator"""
        return _fife.Uint16Uint16PairVector_rend(self)

    def pop_back(self):
        """pop_back(Uint16Uint16PairVector self)"""
        return _fife.Uint16Uint16PairVector_pop_back(self)

    def erase(self, *args):
        """
        erase(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::iterator pos) -> std::vector< std::pair< unsigned short,unsigned short > >::iterator
        erase(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::iterator first, std::vector< std::pair< unsigned short,unsigned short > >::iterator last) -> std::vector< std::pair< unsigned short,unsigned short > >::iterator
        """
        return _fife.Uint16Uint16PairVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::pair<(uint16_t,uint16_t)>)> self) -> Uint16Uint16PairVector
        __init__(std::vector<(std::pair<(uint16_t,uint16_t)>)> self, Uint16Uint16PairVector arg2) -> Uint16Uint16PairVector
        __init__(std::vector<(std::pair<(uint16_t,uint16_t)>)> self, std::vector< std::pair< unsigned short,unsigned short > >::size_type size) -> Uint16Uint16PairVector
        __init__(std::vector<(std::pair<(uint16_t,uint16_t)>)> self, std::vector< std::pair< unsigned short,unsigned short > >::size_type size, Uint16Uint16Pair value) -> Uint16Uint16PairVector
        """
        this = _fife.new_Uint16Uint16PairVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(Uint16Uint16PairVector self, Uint16Uint16Pair x)"""
        return _fife.Uint16Uint16PairVector_push_back(self, *args)

    def front(self):
        """front(Uint16Uint16PairVector self) -> Uint16Uint16Pair"""
        return _fife.Uint16Uint16PairVector_front(self)

    def back(self):
        """back(Uint16Uint16PairVector self) -> Uint16Uint16Pair"""
        return _fife.Uint16Uint16PairVector_back(self)

    def assign(self, *args):
        """assign(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::size_type n, Uint16Uint16Pair x)"""
        return _fife.Uint16Uint16PairVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::size_type new_size)
        resize(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::size_type new_size, Uint16Uint16Pair x)
        """
        return _fife.Uint16Uint16PairVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::iterator pos, Uint16Uint16Pair x) -> std::vector< std::pair< unsigned short,unsigned short > >::iterator
        insert(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::iterator pos, std::vector< std::pair< unsigned short,unsigned short > >::size_type n, 
            Uint16Uint16Pair x)
        """
        return _fife.Uint16Uint16PairVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(Uint16Uint16PairVector self, std::vector< std::pair< unsigned short,unsigned short > >::size_type n)"""
        return _fife.Uint16Uint16PairVector_reserve(self, *args)

    def capacity(self):
        """capacity(Uint16Uint16PairVector self) -> std::vector< std::pair< unsigned short,unsigned short > >::size_type"""
        return _fife.Uint16Uint16PairVector_capacity(self)

    __swig_destroy__ = _fife.delete_Uint16Uint16PairVector
    __del__ = lambda self : None;
Uint16Uint16PairVector_swigregister = _fife.Uint16Uint16PairVector_swigregister
Uint16Uint16PairVector_swigregister(Uint16Uint16PairVector)

class IResourceLoader(_object):
    """Proxy of C++ FIFE::IResourceLoader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResourceLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IResourceLoader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IResourceLoader
    __del__ = lambda self : None;
    def load(self, *args):
        """load(IResourceLoader self, IResource resource)"""
        return _fife.IResourceLoader_load(self, *args)

IResourceLoader_swigregister = _fife.IResourceLoader_swigregister
IResourceLoader_swigregister(IResourceLoader)

class IResource(_object):
    """Proxy of C++ FIFE::IResource class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IResource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RES_NOT_LOADED = _fife.IResource_RES_NOT_LOADED
    RES_LOADED = _fife.IResource_RES_LOADED
    __swig_destroy__ = _fife.delete_IResource
    __del__ = lambda self : None;
    def getName(self):
        """getName(IResource self) -> std::string const &"""
        return _fife.IResource_getName(self)

    def getHandle(self):
        """getHandle(IResource self) -> FIFE::ResourceHandle"""
        return _fife.IResource_getHandle(self)

    def getState(self):
        """getState(IResource self) -> FIFE::IResource::ResourceState"""
        return _fife.IResource_getState(self)

    def setState(self, *args):
        """setState(IResource self, FIFE::IResource::ResourceState const & state)"""
        return _fife.IResource_setState(self, *args)

    def getSize(self):
        """getSize(IResource self) -> size_t"""
        return _fife.IResource_getSize(self)

    def load(self):
        """load(IResource self)"""
        return _fife.IResource_load(self)

    def free(self):
        """free(IResource self)"""
        return _fife.IResource_free(self)

IResource_swigregister = _fife.IResource_swigregister
IResource_swigregister(IResource)

class SharedResourcePointer(_object):
    """Proxy of C++ FIFE::SharedPtr<(FIFE::IResource)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedResourcePointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedResourcePointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::SharedPtr<(FIFE::IResource)> self) -> SharedResourcePointer
        __init__(FIFE::SharedPtr<(FIFE::IResource)> self, SharedResourcePointer rhs) -> SharedResourcePointer
        """
        this = _fife.new_SharedResourcePointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SharedResourcePointer
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(SharedResourcePointer self) -> IResource"""
        return _fife.SharedResourcePointer___ref__(self)

    def __deref__(self):
        """__deref__(SharedResourcePointer self) -> IResource"""
        return _fife.SharedResourcePointer___deref__(self)

    def get(self):
        """get(SharedResourcePointer self) -> IResource"""
        return _fife.SharedResourcePointer_get(self)

    def reset(self, ptr=None):
        """
        reset(SharedResourcePointer self, IResource ptr=None)
        reset(SharedResourcePointer self)
        """
        return _fife.SharedResourcePointer_reset(self, ptr)

    def useCount(self):
        """useCount(SharedResourcePointer self) -> uint32_t"""
        return _fife.SharedResourcePointer_useCount(self)

    def useCountPtr(self):
        """useCountPtr(SharedResourcePointer self) -> uint32_t *"""
        return _fife.SharedResourcePointer_useCountPtr(self)

    def unique(self):
        """unique(SharedResourcePointer self) -> bool"""
        return _fife.SharedResourcePointer_unique(self)

    def __nonzero__(self):
        return _fife.SharedResourcePointer___nonzero__(self)
    __bool__ = __nonzero__


    def getName(self):
        """getName(SharedResourcePointer self) -> std::string const &"""
        return _fife.SharedResourcePointer_getName(self)

    def getHandle(self):
        """getHandle(SharedResourcePointer self) -> FIFE::ResourceHandle"""
        return _fife.SharedResourcePointer_getHandle(self)

    def getState(self):
        """getState(SharedResourcePointer self) -> FIFE::IResource::ResourceState"""
        return _fife.SharedResourcePointer_getState(self)

    def setState(self, *args):
        """setState(SharedResourcePointer self, FIFE::IResource::ResourceState const & state)"""
        return _fife.SharedResourcePointer_setState(self, *args)

    def getSize(self):
        """getSize(SharedResourcePointer self) -> size_t"""
        return _fife.SharedResourcePointer_getSize(self)

    def load(self):
        """load(SharedResourcePointer self)"""
        return _fife.SharedResourcePointer_load(self)

    def free(self):
        """free(SharedResourcePointer self)"""
        return _fife.SharedResourcePointer_free(self)

SharedResourcePointer_swigregister = _fife.SharedResourcePointer_swigregister
SharedResourcePointer_swigregister(SharedResourcePointer)

class IResourceManager(_object):
    """Proxy of C++ FIFE::IResourceManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IResourceManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IResourceManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getMemoryUsed(self):
        """getMemoryUsed(IResourceManager self) -> size_t"""
        return _fife.IResourceManager_getMemoryUsed(self)

    def getTotalResourcesCreated(self):
        """getTotalResourcesCreated(IResourceManager self) -> size_t"""
        return _fife.IResourceManager_getTotalResourcesCreated(self)

    def getTotalResourcesLoaded(self):
        """getTotalResourcesLoaded(IResourceManager self) -> size_t"""
        return _fife.IResourceManager_getTotalResourcesLoaded(self)

    def getTotalResources(self):
        """getTotalResources(IResourceManager self) -> size_t"""
        return _fife.IResourceManager_getTotalResources(self)

    __swig_destroy__ = _fife.delete_IResourceManager
    __del__ = lambda self : None;
IResourceManager_swigregister = _fife.IResourceManager_swigregister
IResourceManager_swigregister(IResourceManager)

class SoundClip(IResource):
    """Proxy of C++ FIFE::SoundClip class"""
    __swig_setmethods__ = {}
    for _s in [IResource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundClip, name, value)
    __swig_getmethods__ = {}
    for _s in [IResource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoundClip, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_SoundClip
    __del__ = lambda self : None;
    def isStream(self):
        """isStream(SoundClip self) -> bool"""
        return _fife.SoundClip_isStream(self)

SoundClip_swigregister = _fife.SoundClip_swigregister
SoundClip_swigregister(SoundClip)

class SharedSoundClipPointer(_object):
    """Proxy of C++ FIFE::SharedPtr<(FIFE::SoundClip)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedSoundClipPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedSoundClipPointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::SharedPtr<(FIFE::SoundClip)> self) -> SharedSoundClipPointer
        __init__(FIFE::SharedPtr<(FIFE::SoundClip)> self, SharedSoundClipPointer rhs) -> SharedSoundClipPointer
        """
        this = _fife.new_SharedSoundClipPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SharedSoundClipPointer
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(SharedSoundClipPointer self) -> SoundClip"""
        return _fife.SharedSoundClipPointer___ref__(self)

    def __deref__(self):
        """__deref__(SharedSoundClipPointer self) -> SoundClip"""
        return _fife.SharedSoundClipPointer___deref__(self)

    def get(self):
        """get(SharedSoundClipPointer self) -> SoundClip"""
        return _fife.SharedSoundClipPointer_get(self)

    def reset(self, ptr=None):
        """
        reset(SharedSoundClipPointer self, SoundClip ptr=None)
        reset(SharedSoundClipPointer self)
        """
        return _fife.SharedSoundClipPointer_reset(self, ptr)

    def useCount(self):
        """useCount(SharedSoundClipPointer self) -> uint32_t"""
        return _fife.SharedSoundClipPointer_useCount(self)

    def useCountPtr(self):
        """useCountPtr(SharedSoundClipPointer self) -> uint32_t *"""
        return _fife.SharedSoundClipPointer_useCountPtr(self)

    def unique(self):
        """unique(SharedSoundClipPointer self) -> bool"""
        return _fife.SharedSoundClipPointer_unique(self)

    def __nonzero__(self):
        return _fife.SharedSoundClipPointer___nonzero__(self)
    __bool__ = __nonzero__


    def isStream(self):
        """isStream(SharedSoundClipPointer self) -> bool"""
        return _fife.SharedSoundClipPointer_isStream(self)

    def getName(self):
        """getName(SharedSoundClipPointer self) -> std::string const &"""
        return _fife.SharedSoundClipPointer_getName(self)

    def getHandle(self):
        """getHandle(SharedSoundClipPointer self) -> FIFE::ResourceHandle"""
        return _fife.SharedSoundClipPointer_getHandle(self)

    def getState(self):
        """getState(SharedSoundClipPointer self) -> FIFE::IResource::ResourceState"""
        return _fife.SharedSoundClipPointer_getState(self)

    def setState(self, *args):
        """setState(SharedSoundClipPointer self, FIFE::IResource::ResourceState const & state)"""
        return _fife.SharedSoundClipPointer_setState(self, *args)

    def getSize(self):
        """getSize(SharedSoundClipPointer self) -> size_t"""
        return _fife.SharedSoundClipPointer_getSize(self)

    def load(self):
        """load(SharedSoundClipPointer self)"""
        return _fife.SharedSoundClipPointer_load(self)

    def free(self):
        """free(SharedSoundClipPointer self)"""
        return _fife.SharedSoundClipPointer_free(self)

SharedSoundClipPointer_swigregister = _fife.SharedSoundClipPointer_swigregister
SharedSoundClipPointer_swigregister(SharedSoundClipPointer)

class SoundClipManager(IResourceManager):
    """Proxy of C++ FIFE::SoundClipManager class"""
    __swig_setmethods__ = {}
    for _s in [IResourceManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundClipManager, name, value)
    __swig_getmethods__ = {}
    for _s in [IResourceManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoundClipManager, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_SoundClipManager
    __del__ = lambda self : None;
    def getMemoryUsed(self):
        """getMemoryUsed(SoundClipManager self) -> size_t"""
        return _fife.SoundClipManager_getMemoryUsed(self)

    def getTotalResourcesCreated(self):
        """getTotalResourcesCreated(SoundClipManager self) -> size_t"""
        return _fife.SoundClipManager_getTotalResourcesCreated(self)

    def getTotalResourcesLoaded(self):
        """getTotalResourcesLoaded(SoundClipManager self) -> size_t"""
        return _fife.SoundClipManager_getTotalResourcesLoaded(self)

    def getTotalResources(self):
        """getTotalResources(SoundClipManager self) -> size_t"""
        return _fife.SoundClipManager_getTotalResources(self)

    def create(self, *args):
        """
        create(SoundClipManager self, std::string const & name, IResourceLoader loader=None) -> SharedSoundClipPointer
        create(SoundClipManager self, std::string const & name) -> SharedSoundClipPointer
        """
        return _fife.SoundClipManager_create(self, *args)

    def load(self, *args):
        """
        load(SoundClipManager self, std::string const & name, IResourceLoader loader=None) -> SharedSoundClipPointer
        load(SoundClipManager self, std::string const & name) -> SharedSoundClipPointer
        """
        return _fife.SoundClipManager_load(self, *args)

    def add(self, *args):
        """add(SoundClipManager self, SoundClip res) -> SharedSoundClipPointer"""
        return _fife.SoundClipManager_add(self, *args)

    def exists(self, *args):
        """
        exists(SoundClipManager self, std::string const & name) -> bool
        exists(SoundClipManager self, FIFE::ResourceHandle handle) -> bool
        """
        return _fife.SoundClipManager_exists(self, *args)

    def reload(self, *args):
        """
        reload(SoundClipManager self, std::string const & name)
        reload(SoundClipManager self, FIFE::ResourceHandle handle)
        """
        return _fife.SoundClipManager_reload(self, *args)

    def reloadAll(self):
        """reloadAll(SoundClipManager self)"""
        return _fife.SoundClipManager_reloadAll(self)

    def loadUnreferenced(self):
        """loadUnreferenced(SoundClipManager self)"""
        return _fife.SoundClipManager_loadUnreferenced(self)

    def free(self, *args):
        """
        free(SoundClipManager self, std::string const & name)
        free(SoundClipManager self, FIFE::ResourceHandle handle)
        """
        return _fife.SoundClipManager_free(self, *args)

    def freeAll(self):
        """freeAll(SoundClipManager self)"""
        return _fife.SoundClipManager_freeAll(self)

    def freeUnreferenced(self):
        """freeUnreferenced(SoundClipManager self)"""
        return _fife.SoundClipManager_freeUnreferenced(self)

    def remove(self, *args):
        """
        remove(SoundClipManager self, SharedSoundClipPointer resource)
        remove(SoundClipManager self, std::string const & name)
        remove(SoundClipManager self, FIFE::ResourceHandle handle)
        """
        return _fife.SoundClipManager_remove(self, *args)

    def removeAll(self):
        """removeAll(SoundClipManager self)"""
        return _fife.SoundClipManager_removeAll(self)

    def removeUnreferenced(self):
        """removeUnreferenced(SoundClipManager self)"""
        return _fife.SoundClipManager_removeUnreferenced(self)

    def get(self, *args):
        """
        get(SoundClipManager self, std::string const & name) -> SharedSoundClipPointer
        get(SoundClipManager self, FIFE::ResourceHandle handle) -> SharedSoundClipPointer
        """
        return _fife.SoundClipManager_get(self, *args)

    def getResourceHandle(self, *args):
        """getResourceHandle(SoundClipManager self, std::string const & name) -> FIFE::ResourceHandle"""
        return _fife.SoundClipManager_getResourceHandle(self, *args)

    def __init__(self): 
        """__init__(FIFE::SoundClipManager self) -> SoundClipManager"""
        this = _fife.new_SoundClipManager()
        try: self.this.append(this)
        except: self.this = this
SoundClipManager_swigregister = _fife.SoundClipManager_swigregister
SoundClipManager_swigregister(SoundClipManager)

SD_SAMPLE_POS = _fife.SD_SAMPLE_POS
SD_TIME_POS = _fife.SD_TIME_POS
SD_BYTE_POS = _fife.SD_BYTE_POS
class SoundEmitter(_object):
    """Proxy of C++ FIFE::SoundEmitter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundEmitter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundEmitter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::SoundEmitter self, SoundManager manager, uint32_t uid) -> SoundEmitter"""
        this = _fife.new_SoundEmitter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SoundEmitter
    __del__ = lambda self : None;
    def getId(self):
        """getId(SoundEmitter self) -> uint32_t"""
        return _fife.SoundEmitter_getId(self)

    def setSoundClip(self, *args):
        """setSoundClip(SoundEmitter self, SharedSoundClipPointer soundclip)"""
        return _fife.SoundEmitter_setSoundClip(self, *args)

    def getSoundClip(self):
        """getSoundClip(SoundEmitter self) -> SharedSoundClipPointer"""
        return _fife.SoundEmitter_getSoundClip(self)

    def reset(self, defaultall=False):
        """
        reset(SoundEmitter self, bool defaultall=False)
        reset(SoundEmitter self)
        """
        return _fife.SoundEmitter_reset(self, defaultall)

    def release(self):
        """release(SoundEmitter self)"""
        return _fife.SoundEmitter_release(self)

    def play(self):
        """play(SoundEmitter self)"""
        return _fife.SoundEmitter_play(self)

    def pause(self):
        """pause(SoundEmitter self)"""
        return _fife.SoundEmitter_pause(self)

    def stop(self):
        """stop(SoundEmitter self)"""
        return _fife.SoundEmitter_stop(self)

    def setLooping(self, *args):
        """setLooping(SoundEmitter self, bool loop)"""
        return _fife.SoundEmitter_setLooping(self, *args)

    def setRolloff(self, *args):
        """setRolloff(SoundEmitter self, float rolloff)"""
        return _fife.SoundEmitter_setRolloff(self, *args)

    def setPositioning(self, *args):
        """setPositioning(SoundEmitter self, bool relative)"""
        return _fife.SoundEmitter_setPositioning(self, *args)

    def setPosition(self, *args):
        """setPosition(SoundEmitter self, float x, float y, float z)"""
        return _fife.SoundEmitter_setPosition(self, *args)

    def setVelocity(self, *args):
        """setVelocity(SoundEmitter self, float x, float y, float z)"""
        return _fife.SoundEmitter_setVelocity(self, *args)

    def setGain(self, *args):
        """setGain(SoundEmitter self, float gain)"""
        return _fife.SoundEmitter_setGain(self, *args)

    def getGain(self):
        """getGain(SoundEmitter self) -> float"""
        return _fife.SoundEmitter_getGain(self)

    def isStereo(self):
        """isStereo(SoundEmitter self) -> bool"""
        return _fife.SoundEmitter_isStereo(self)

    def getBitResolution(self):
        """getBitResolution(SoundEmitter self) -> int16_t"""
        return _fife.SoundEmitter_getBitResolution(self)

    def getSampleRate(self):
        """getSampleRate(SoundEmitter self) -> uint64_t"""
        return _fife.SoundEmitter_getSampleRate(self)

    def getDecodedLength(self):
        """getDecodedLength(SoundEmitter self) -> uint64_t"""
        return _fife.SoundEmitter_getDecodedLength(self)

    def getDuration(self):
        """getDuration(SoundEmitter self) -> uint64_t"""
        return _fife.SoundEmitter_getDuration(self)

    def setCursor(self, *args):
        """setCursor(SoundEmitter self, FIFE::SoundPositionType type, float value)"""
        return _fife.SoundEmitter_setCursor(self, *args)

    def getCursor(self, *args):
        """getCursor(SoundEmitter self, FIFE::SoundPositionType type) -> float"""
        return _fife.SoundEmitter_getCursor(self, *args)

SoundEmitter_swigregister = _fife.SoundEmitter_swigregister
SoundEmitter_swigregister(SoundEmitter)

class SoundManager(_object):
    """Proxy of C++ FIFE::SoundManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoundManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoundManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::SoundManager self) -> SoundManager"""
        this = _fife.new_SoundManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SoundManager
    __del__ = lambda self : None;
    def init(self):
        """init(SoundManager self)"""
        return _fife.SoundManager_init(self)

    def createEmitter(self):
        """createEmitter(SoundManager self) -> SoundEmitter"""
        return _fife.SoundManager_createEmitter(self)

    def getEmitter(self, *args):
        """getEmitter(SoundManager self, uint32_t emitterid) -> SoundEmitter"""
        return _fife.SoundManager_getEmitter(self, *args)

    def releaseEmitter(self, *args):
        """releaseEmitter(SoundManager self, uint32_t emitterid)"""
        return _fife.SoundManager_releaseEmitter(self, *args)

    def getContext(self):
        """getContext(SoundManager self) -> ALCcontext *"""
        return _fife.SoundManager_getContext(self)

    def setVolume(self, *args):
        """setVolume(SoundManager self, float vol)"""
        return _fife.SoundManager_setVolume(self, *args)

    def getVolume(self):
        """getVolume(SoundManager self) -> float"""
        return _fife.SoundManager_getVolume(self)

    def mute(self):
        """mute(SoundManager self)"""
        return _fife.SoundManager_mute(self)

    def unmute(self):
        """unmute(SoundManager self)"""
        return _fife.SoundManager_unmute(self)

    def setListenerPosition(self, *args):
        """setListenerPosition(SoundManager self, float x, float y, float z)"""
        return _fife.SoundManager_setListenerPosition(self, *args)

    def setListenerOrientation(self, *args):
        """setListenerOrientation(SoundManager self, float x, float y, float z)"""
        return _fife.SoundManager_setListenerOrientation(self, *args)

SoundManager_swigregister = _fife.SoundManager_swigregister
SoundManager_swigregister(SoundManager)

class EngineSettings(_object):
    """Proxy of C++ FIFE::EngineSettings class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngineSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EngineSettings, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_EngineSettings
    __del__ = lambda self : None;
    def setBitsPerPixel(self, *args):
        """setBitsPerPixel(EngineSettings self, uint8_t bitsperpixel)"""
        return _fife.EngineSettings_setBitsPerPixel(self, *args)

    def getBitsPerPixel(self):
        """getBitsPerPixel(EngineSettings self) -> uint8_t"""
        return _fife.EngineSettings_getBitsPerPixel(self)

    def getPossibleBitsPerPixel(self):
        """getPossibleBitsPerPixel(EngineSettings self) -> vectoru"""
        return _fife.EngineSettings_getPossibleBitsPerPixel(self)

    def setFullScreen(self, *args):
        """setFullScreen(EngineSettings self, bool fullscreen)"""
        return _fife.EngineSettings_setFullScreen(self, *args)

    def isFullScreen(self):
        """isFullScreen(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isFullScreen(self)

    def setInitialVolume(self, *args):
        """setInitialVolume(EngineSettings self, float volume)"""
        return _fife.EngineSettings_setInitialVolume(self, *args)

    def getInitialVolume(self):
        """getInitialVolume(EngineSettings self) -> float"""
        return _fife.EngineSettings_getInitialVolume(self)

    def getMaxVolume(self):
        """getMaxVolume(EngineSettings self) -> float"""
        return _fife.EngineSettings_getMaxVolume(self)

    def setRenderBackend(self, *args):
        """setRenderBackend(EngineSettings self, std::string const & renderbackend)"""
        return _fife.EngineSettings_setRenderBackend(self, *args)

    def getRenderBackend(self):
        """getRenderBackend(EngineSettings self) -> std::string const &"""
        return _fife.EngineSettings_getRenderBackend(self)

    def getPossibleRenderBackends(self):
        """getPossibleRenderBackends(EngineSettings self) -> StringVector"""
        return _fife.EngineSettings_getPossibleRenderBackends(self)

    def setSDLRemoveFakeAlpha(self, *args):
        """setSDLRemoveFakeAlpha(EngineSettings self, bool sdlremovefakealpha)"""
        return _fife.EngineSettings_setSDLRemoveFakeAlpha(self, *args)

    def isSDLRemoveFakeAlpha(self):
        """isSDLRemoveFakeAlpha(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isSDLRemoveFakeAlpha(self)

    def setGLCompressImages(self, *args):
        """setGLCompressImages(EngineSettings self, bool oglcompressimages)"""
        return _fife.EngineSettings_setGLCompressImages(self, *args)

    def isGLCompressImages(self):
        """isGLCompressImages(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isGLCompressImages(self)

    def setGLUseFramebuffer(self, *args):
        """setGLUseFramebuffer(EngineSettings self, bool ogluseframebuffer)"""
        return _fife.EngineSettings_setGLUseFramebuffer(self, *args)

    def isGLUseFramebuffer(self):
        """isGLUseFramebuffer(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isGLUseFramebuffer(self)

    def setGLUseNPOT(self, *args):
        """setGLUseNPOT(EngineSettings self, bool oglusenpot)"""
        return _fife.EngineSettings_setGLUseNPOT(self, *args)

    def isGLUseNPOT(self):
        """isGLUseNPOT(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isGLUseNPOT(self)

    def setGLTextureFiltering(self, *args):
        """setGLTextureFiltering(EngineSettings self, FIFE::TextureFiltering filter)"""
        return _fife.EngineSettings_setGLTextureFiltering(self, *args)

    def getGLTextureFiltering(self):
        """getGLTextureFiltering(EngineSettings self) -> FIFE::TextureFiltering"""
        return _fife.EngineSettings_getGLTextureFiltering(self)

    def setGLUseMipmapping(self, *args):
        """setGLUseMipmapping(EngineSettings self, bool mipmapping)"""
        return _fife.EngineSettings_setGLUseMipmapping(self, *args)

    def isGLUseMipmapping(self):
        """isGLUseMipmapping(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isGLUseMipmapping(self)

    def setGLUseMonochrome(self, *args):
        """setGLUseMonochrome(EngineSettings self, bool monochrome)"""
        return _fife.EngineSettings_setGLUseMonochrome(self, *args)

    def isGLUseMonochrome(self):
        """isGLUseMonochrome(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isGLUseMonochrome(self)

    def setScreenWidth(self, *args):
        """setScreenWidth(EngineSettings self, uint16_t screenwidth)"""
        return _fife.EngineSettings_setScreenWidth(self, *args)

    def getScreenWidth(self):
        """getScreenWidth(EngineSettings self) -> uint16_t"""
        return _fife.EngineSettings_getScreenWidth(self)

    def setScreenHeight(self, *args):
        """setScreenHeight(EngineSettings self, uint16_t screenheight)"""
        return _fife.EngineSettings_setScreenHeight(self, *args)

    def getScreenHeight(self):
        """getScreenHeight(EngineSettings self) -> uint16_t"""
        return _fife.EngineSettings_getScreenHeight(self)

    def setDefaultFontPath(self, *args):
        """setDefaultFontPath(EngineSettings self, std::string const & defaultfontpath)"""
        return _fife.EngineSettings_setDefaultFontPath(self, *args)

    def getDefaultFontPath(self):
        """getDefaultFontPath(EngineSettings self) -> std::string const &"""
        return _fife.EngineSettings_getDefaultFontPath(self)

    def setDefaultFontSize(self, *args):
        """setDefaultFontSize(EngineSettings self, uint16_t defaultfontsize)"""
        return _fife.EngineSettings_setDefaultFontSize(self, *args)

    def getDefaultFontSize(self):
        """getDefaultFontSize(EngineSettings self) -> uint16_t"""
        return _fife.EngineSettings_getDefaultFontSize(self)

    def setDefaultFontGlyphs(self, *args):
        """setDefaultFontGlyphs(EngineSettings self, std::string const & defaultfontglyphs)"""
        return _fife.EngineSettings_setDefaultFontGlyphs(self, *args)

    def getDefaultFontGlyphs(self):
        """getDefaultFontGlyphs(EngineSettings self) -> std::string const &"""
        return _fife.EngineSettings_getDefaultFontGlyphs(self)

    def setWindowTitle(self, *args):
        """setWindowTitle(EngineSettings self, std::string const & title)"""
        return _fife.EngineSettings_setWindowTitle(self, *args)

    def getWindowTitle(self):
        """getWindowTitle(EngineSettings self) -> std::string const &"""
        return _fife.EngineSettings_getWindowTitle(self)

    def setWindowIcon(self, *args):
        """setWindowIcon(EngineSettings self, std::string const & icon)"""
        return _fife.EngineSettings_setWindowIcon(self, *args)

    def getWindowIcon(self):
        """getWindowIcon(EngineSettings self) -> std::string const &"""
        return _fife.EngineSettings_getWindowIcon(self)

    def setColorKeyEnabled(self, *args):
        """setColorKeyEnabled(EngineSettings self, bool colorkeyenable)"""
        return _fife.EngineSettings_setColorKeyEnabled(self, *args)

    def isColorKeyEnabled(self):
        """isColorKeyEnabled(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isColorKeyEnabled(self)

    def setColorKey(self, *args):
        """setColorKey(EngineSettings self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.EngineSettings_setColorKey(self, *args)

    def getColorKey(self):
        """getColorKey(EngineSettings self) -> SDL_Color const &"""
        return _fife.EngineSettings_getColorKey(self)

    def setVideoDriver(self, *args):
        """setVideoDriver(EngineSettings self, std::string const & driver)"""
        return _fife.EngineSettings_setVideoDriver(self, *args)

    def getVideoDriver(self):
        """getVideoDriver(EngineSettings self) -> std::string const &"""
        return _fife.EngineSettings_getVideoDriver(self)

    def setLightingModel(self, *args):
        """setLightingModel(EngineSettings self, uint32_t lighting)"""
        return _fife.EngineSettings_setLightingModel(self, *args)

    def getLightingModel(self):
        """getLightingModel(EngineSettings self) -> uint32_t"""
        return _fife.EngineSettings_getLightingModel(self)

    def setFrameLimitEnabled(self, *args):
        """setFrameLimitEnabled(EngineSettings self, bool limited)"""
        return _fife.EngineSettings_setFrameLimitEnabled(self, *args)

    def isFrameLimitEnabled(self):
        """isFrameLimitEnabled(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isFrameLimitEnabled(self)

    def setFrameLimit(self, *args):
        """setFrameLimit(EngineSettings self, uint16_t framelimit)"""
        return _fife.EngineSettings_setFrameLimit(self, *args)

    def getFrameLimit(self):
        """getFrameLimit(EngineSettings self) -> uint16_t"""
        return _fife.EngineSettings_getFrameLimit(self)

    def setMouseSensitivity(self, *args):
        """setMouseSensitivity(EngineSettings self, float sens)"""
        return _fife.EngineSettings_setMouseSensitivity(self, *args)

    def getMouseSensitivity(self):
        """getMouseSensitivity(EngineSettings self) -> float"""
        return _fife.EngineSettings_getMouseSensitivity(self)

    def setMouseAccelerationEnabled(self, *args):
        """setMouseAccelerationEnabled(EngineSettings self, bool acceleration)"""
        return _fife.EngineSettings_setMouseAccelerationEnabled(self, *args)

    def isMouseAccelerationEnabled(self):
        """isMouseAccelerationEnabled(EngineSettings self) -> bool"""
        return _fife.EngineSettings_isMouseAccelerationEnabled(self)

EngineSettings_swigregister = _fife.EngineSettings_swigregister
EngineSettings_swigregister(EngineSettings)

class IEngineChangeListener(_object):
    """Proxy of C++ FIFE::IEngineChangeListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEngineChangeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEngineChangeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IEngineChangeListener
    __del__ = lambda self : None;
    def onScreenModeChanged(self, *args):
        """onScreenModeChanged(IEngineChangeListener self, ScreenMode newmode)"""
        return _fife.IEngineChangeListener_onScreenModeChanged(self, *args)

    def __init__(self): 
        """__init__(FIFE::IEngineChangeListener self) -> IEngineChangeListener"""
        if self.__class__ == IEngineChangeListener:
            _self = None
        else:
            _self = self
        this = _fife.new_IEngineChangeListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IEngineChangeListener(self)
        return weakref_proxy(self)
IEngineChangeListener_swigregister = _fife.IEngineChangeListener_swigregister
IEngineChangeListener_swigregister(IEngineChangeListener)

class Engine(_object):
    """Proxy of C++ FIFE::Engine class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::Engine self) -> Engine"""
        this = _fife.new_Engine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Engine
    __del__ = lambda self : None;
    def initializePumping(self):
        """initializePumping(Engine self)"""
        return _fife.Engine_initializePumping(self)

    def finalizePumping(self):
        """finalizePumping(Engine self)"""
        return _fife.Engine_finalizePumping(self)

    def pump(self):
        """pump(Engine self)"""
        return _fife.Engine_pump(self)

    def getSettings(self):
        """getSettings(Engine self) -> EngineSettings"""
        return _fife.Engine_getSettings(self)

    def getDeviceCaps(self):
        """getDeviceCaps(Engine self) -> DeviceCaps"""
        return _fife.Engine_getDeviceCaps(self)

    def changeScreenMode(self, *args):
        """changeScreenMode(Engine self, ScreenMode mode)"""
        return _fife.Engine_changeScreenMode(self, *args)

    def init(self):
        """init(Engine self)"""
        return _fife.Engine_init(self)

    def destroy(self):
        """destroy(Engine self)"""
        return _fife.Engine_destroy(self)

    def getSoundManager(self):
        """getSoundManager(Engine self) -> SoundManager"""
        return _fife.Engine_getSoundManager(self)

    def getEventManager(self):
        """getEventManager(Engine self) -> EventManager"""
        return _fife.Engine_getEventManager(self)

    def getTimeManager(self):
        """getTimeManager(Engine self) -> TimeManager"""
        return _fife.Engine_getTimeManager(self)

    def setGuiManager(self, *args):
        """setGuiManager(Engine self, IGUIManager guimanager)"""
        return _fife.Engine_setGuiManager(self, *args)

    def getGuiManager(self):
        """getGuiManager(Engine self) -> IGUIManager"""
        return _fife.Engine_getGuiManager(self)

    def getImageManager(self):
        """getImageManager(Engine self) -> ImageManager"""
        return _fife.Engine_getImageManager(self)

    def getSoundClipManager(self):
        """getSoundClipManager(Engine self) -> SoundClipManager"""
        return _fife.Engine_getSoundClipManager(self)

    def getRenderBackend(self):
        """getRenderBackend(Engine self) -> RenderBackend"""
        return _fife.Engine_getRenderBackend(self)

    def getModel(self):
        """getModel(Engine self) -> Model"""
        return _fife.Engine_getModel(self)

    def getLogManager(self):
        """getLogManager(Engine self) -> LogManager"""
        return _fife.Engine_getLogManager(self)

    def getVFS(self):
        """getVFS(Engine self) -> VFS"""
        return _fife.Engine_getVFS(self)

    def getCursor(self):
        """getCursor(Engine self) -> Cursor"""
        return _fife.Engine_getCursor(self)

    def getOffRenderer(self):
        """getOffRenderer(Engine self) -> OffRenderer"""
        return _fife.Engine_getOffRenderer(self)

    def getTargetRenderer(self):
        """getTargetRenderer(Engine self) -> TargetRenderer"""
        return _fife.Engine_getTargetRenderer(self)

    def addChangeListener(self, *args):
        """addChangeListener(Engine self, IEngineChangeListener listener)"""
        return _fife.Engine_addChangeListener(self, *args)

    def removeChangeListener(self, *args):
        """removeChangeListener(Engine self, IEngineChangeListener listener)"""
        return _fife.Engine_removeChangeListener(self, *args)

Engine_swigregister = _fife.Engine_swigregister
Engine_swigregister(Engine)

class Key(_object):
    """Proxy of C++ FIFE::Key class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Key, name)
    __repr__ = _swig_repr
    INVALID_KEY = _fife.Key_INVALID_KEY
    BACKSPACE = _fife.Key_BACKSPACE
    TAB = _fife.Key_TAB
    CLEAR = _fife.Key_CLEAR
    ENTER = _fife.Key_ENTER
    PAUSE = _fife.Key_PAUSE
    ESCAPE = _fife.Key_ESCAPE
    SPACE = _fife.Key_SPACE
    EXCLAIM = _fife.Key_EXCLAIM
    QUOTEDBL = _fife.Key_QUOTEDBL
    HASH = _fife.Key_HASH
    DOLLAR = _fife.Key_DOLLAR
    AMPERSAND = _fife.Key_AMPERSAND
    QUOTE = _fife.Key_QUOTE
    LEFTPAREN = _fife.Key_LEFTPAREN
    RIGHTPAREN = _fife.Key_RIGHTPAREN
    ASTERISK = _fife.Key_ASTERISK
    PLUS = _fife.Key_PLUS
    COMMA = _fife.Key_COMMA
    MINUS = _fife.Key_MINUS
    PERIOD = _fife.Key_PERIOD
    SLASH = _fife.Key_SLASH
    NUM_0 = _fife.Key_NUM_0
    NUM_1 = _fife.Key_NUM_1
    NUM_2 = _fife.Key_NUM_2
    NUM_3 = _fife.Key_NUM_3
    NUM_4 = _fife.Key_NUM_4
    NUM_5 = _fife.Key_NUM_5
    NUM_6 = _fife.Key_NUM_6
    NUM_7 = _fife.Key_NUM_7
    NUM_8 = _fife.Key_NUM_8
    NUM_9 = _fife.Key_NUM_9
    COLON = _fife.Key_COLON
    SEMICOLON = _fife.Key_SEMICOLON
    LESS = _fife.Key_LESS
    EQUALS = _fife.Key_EQUALS
    GREATER = _fife.Key_GREATER
    QUESTION = _fife.Key_QUESTION
    AT = _fife.Key_AT
    LEFTBRACKET = _fife.Key_LEFTBRACKET
    BACKSLASH = _fife.Key_BACKSLASH
    RIGHTBRACKET = _fife.Key_RIGHTBRACKET
    CARET = _fife.Key_CARET
    UNDERSCORE = _fife.Key_UNDERSCORE
    BACKQUOTE = _fife.Key_BACKQUOTE
    A = _fife.Key_A
    B = _fife.Key_B
    C = _fife.Key_C
    D = _fife.Key_D
    E = _fife.Key_E
    F = _fife.Key_F
    G = _fife.Key_G
    H = _fife.Key_H
    I = _fife.Key_I
    J = _fife.Key_J
    K = _fife.Key_K
    L = _fife.Key_L
    M = _fife.Key_M
    N = _fife.Key_N
    O = _fife.Key_O
    P = _fife.Key_P
    Q = _fife.Key_Q
    R = _fife.Key_R
    S = _fife.Key_S
    T = _fife.Key_T
    U = _fife.Key_U
    V = _fife.Key_V
    W = _fife.Key_W
    X = _fife.Key_X
    Y = _fife.Key_Y
    Z = _fife.Key_Z
    DELETE = _fife.Key_DELETE
    WORLD_0 = _fife.Key_WORLD_0
    WORLD_1 = _fife.Key_WORLD_1
    WORLD_2 = _fife.Key_WORLD_2
    WORLD_3 = _fife.Key_WORLD_3
    WORLD_4 = _fife.Key_WORLD_4
    WORLD_5 = _fife.Key_WORLD_5
    WORLD_6 = _fife.Key_WORLD_6
    WORLD_7 = _fife.Key_WORLD_7
    WORLD_8 = _fife.Key_WORLD_8
    WORLD_9 = _fife.Key_WORLD_9
    WORLD_10 = _fife.Key_WORLD_10
    WORLD_11 = _fife.Key_WORLD_11
    WORLD_12 = _fife.Key_WORLD_12
    WORLD_13 = _fife.Key_WORLD_13
    WORLD_14 = _fife.Key_WORLD_14
    WORLD_15 = _fife.Key_WORLD_15
    WORLD_16 = _fife.Key_WORLD_16
    WORLD_17 = _fife.Key_WORLD_17
    WORLD_18 = _fife.Key_WORLD_18
    WORLD_19 = _fife.Key_WORLD_19
    WORLD_20 = _fife.Key_WORLD_20
    WORLD_21 = _fife.Key_WORLD_21
    WORLD_22 = _fife.Key_WORLD_22
    WORLD_23 = _fife.Key_WORLD_23
    WORLD_24 = _fife.Key_WORLD_24
    WORLD_25 = _fife.Key_WORLD_25
    WORLD_26 = _fife.Key_WORLD_26
    WORLD_27 = _fife.Key_WORLD_27
    WORLD_28 = _fife.Key_WORLD_28
    WORLD_29 = _fife.Key_WORLD_29
    WORLD_30 = _fife.Key_WORLD_30
    WORLD_31 = _fife.Key_WORLD_31
    WORLD_32 = _fife.Key_WORLD_32
    WORLD_33 = _fife.Key_WORLD_33
    WORLD_34 = _fife.Key_WORLD_34
    WORLD_35 = _fife.Key_WORLD_35
    WORLD_36 = _fife.Key_WORLD_36
    WORLD_37 = _fife.Key_WORLD_37
    WORLD_38 = _fife.Key_WORLD_38
    WORLD_39 = _fife.Key_WORLD_39
    WORLD_40 = _fife.Key_WORLD_40
    WORLD_41 = _fife.Key_WORLD_41
    WORLD_42 = _fife.Key_WORLD_42
    WORLD_43 = _fife.Key_WORLD_43
    WORLD_44 = _fife.Key_WORLD_44
    WORLD_45 = _fife.Key_WORLD_45
    WORLD_46 = _fife.Key_WORLD_46
    WORLD_47 = _fife.Key_WORLD_47
    WORLD_48 = _fife.Key_WORLD_48
    WORLD_49 = _fife.Key_WORLD_49
    WORLD_50 = _fife.Key_WORLD_50
    WORLD_51 = _fife.Key_WORLD_51
    WORLD_52 = _fife.Key_WORLD_52
    WORLD_53 = _fife.Key_WORLD_53
    WORLD_54 = _fife.Key_WORLD_54
    WORLD_55 = _fife.Key_WORLD_55
    WORLD_56 = _fife.Key_WORLD_56
    WORLD_57 = _fife.Key_WORLD_57
    WORLD_58 = _fife.Key_WORLD_58
    WORLD_59 = _fife.Key_WORLD_59
    WORLD_60 = _fife.Key_WORLD_60
    WORLD_61 = _fife.Key_WORLD_61
    WORLD_62 = _fife.Key_WORLD_62
    WORLD_63 = _fife.Key_WORLD_63
    WORLD_64 = _fife.Key_WORLD_64
    WORLD_65 = _fife.Key_WORLD_65
    WORLD_66 = _fife.Key_WORLD_66
    WORLD_67 = _fife.Key_WORLD_67
    WORLD_68 = _fife.Key_WORLD_68
    WORLD_69 = _fife.Key_WORLD_69
    WORLD_70 = _fife.Key_WORLD_70
    WORLD_71 = _fife.Key_WORLD_71
    WORLD_72 = _fife.Key_WORLD_72
    WORLD_73 = _fife.Key_WORLD_73
    WORLD_74 = _fife.Key_WORLD_74
    WORLD_75 = _fife.Key_WORLD_75
    WORLD_76 = _fife.Key_WORLD_76
    WORLD_77 = _fife.Key_WORLD_77
    WORLD_78 = _fife.Key_WORLD_78
    WORLD_79 = _fife.Key_WORLD_79
    WORLD_80 = _fife.Key_WORLD_80
    WORLD_81 = _fife.Key_WORLD_81
    WORLD_82 = _fife.Key_WORLD_82
    WORLD_83 = _fife.Key_WORLD_83
    WORLD_84 = _fife.Key_WORLD_84
    WORLD_85 = _fife.Key_WORLD_85
    WORLD_86 = _fife.Key_WORLD_86
    WORLD_87 = _fife.Key_WORLD_87
    WORLD_88 = _fife.Key_WORLD_88
    WORLD_89 = _fife.Key_WORLD_89
    WORLD_90 = _fife.Key_WORLD_90
    WORLD_91 = _fife.Key_WORLD_91
    WORLD_92 = _fife.Key_WORLD_92
    WORLD_93 = _fife.Key_WORLD_93
    WORLD_94 = _fife.Key_WORLD_94
    WORLD_95 = _fife.Key_WORLD_95
    KP0 = _fife.Key_KP0
    KP1 = _fife.Key_KP1
    KP2 = _fife.Key_KP2
    KP3 = _fife.Key_KP3
    KP4 = _fife.Key_KP4
    KP5 = _fife.Key_KP5
    KP6 = _fife.Key_KP6
    KP7 = _fife.Key_KP7
    KP8 = _fife.Key_KP8
    KP9 = _fife.Key_KP9
    KP_PERIOD = _fife.Key_KP_PERIOD
    KP_DIVIDE = _fife.Key_KP_DIVIDE
    KP_MULTIPLY = _fife.Key_KP_MULTIPLY
    KP_MINUS = _fife.Key_KP_MINUS
    KP_PLUS = _fife.Key_KP_PLUS
    KP_ENTER = _fife.Key_KP_ENTER
    KP_EQUALS = _fife.Key_KP_EQUALS
    UP = _fife.Key_UP
    DOWN = _fife.Key_DOWN
    RIGHT = _fife.Key_RIGHT
    LEFT = _fife.Key_LEFT
    INSERT = _fife.Key_INSERT
    HOME = _fife.Key_HOME
    END = _fife.Key_END
    PAGE_UP = _fife.Key_PAGE_UP
    PAGE_DOWN = _fife.Key_PAGE_DOWN
    F1 = _fife.Key_F1
    F2 = _fife.Key_F2
    F3 = _fife.Key_F3
    F4 = _fife.Key_F4
    F5 = _fife.Key_F5
    F6 = _fife.Key_F6
    F7 = _fife.Key_F7
    F8 = _fife.Key_F8
    F9 = _fife.Key_F9
    F10 = _fife.Key_F10
    F11 = _fife.Key_F11
    F12 = _fife.Key_F12
    F13 = _fife.Key_F13
    F14 = _fife.Key_F14
    F15 = _fife.Key_F15
    NUM_LOCK = _fife.Key_NUM_LOCK
    CAPS_LOCK = _fife.Key_CAPS_LOCK
    SCROLL_LOCK = _fife.Key_SCROLL_LOCK
    RIGHT_SHIFT = _fife.Key_RIGHT_SHIFT
    LEFT_SHIFT = _fife.Key_LEFT_SHIFT
    RIGHT_CONTROL = _fife.Key_RIGHT_CONTROL
    LEFT_CONTROL = _fife.Key_LEFT_CONTROL
    RIGHT_ALT = _fife.Key_RIGHT_ALT
    LEFT_ALT = _fife.Key_LEFT_ALT
    RIGHT_META = _fife.Key_RIGHT_META
    LEFT_META = _fife.Key_LEFT_META
    RIGHT_SUPER = _fife.Key_RIGHT_SUPER
    LEFT_SUPER = _fife.Key_LEFT_SUPER
    ALT_GR = _fife.Key_ALT_GR
    COMPOSE = _fife.Key_COMPOSE
    HELP = _fife.Key_HELP
    PRINT_SCREEN = _fife.Key_PRINT_SCREEN
    SYSREQ = _fife.Key_SYSREQ
    BREAK = _fife.Key_BREAK
    MENU = _fife.Key_MENU
    POWER = _fife.Key_POWER
    EURO = _fife.Key_EURO
    UNDO = _fife.Key_UNDO
    def __init__(self, *args): 
        """
        __init__(FIFE::Key self, FIFE::Key::KeyType key=INVALID_KEY, uint32_t codepoint=0) -> Key
        __init__(FIFE::Key self, FIFE::Key::KeyType key=INVALID_KEY) -> Key
        __init__(FIFE::Key self) -> Key
        """
        this = _fife.new_Key(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Key
    __del__ = lambda self : None;
    def isPrintable(self):
        """isPrintable(Key self) -> bool"""
        return _fife.Key_isPrintable(self)

    def isFunctionKey(self):
        """isFunctionKey(Key self) -> bool"""
        return _fife.Key_isFunctionKey(self)

    def getValue(self):
        """getValue(Key self) -> FIFE::Key::KeyType"""
        return _fife.Key_getValue(self)

    def getAsString(self):
        """getAsString(Key self) -> std::string"""
        return _fife.Key_getAsString(self)

Key_swigregister = _fife.Key_swigregister
Key_swigregister(Key)

ES_ENGINE = _fife.ES_ENGINE
ES_GUICHAN_WIDGET = _fife.ES_GUICHAN_WIDGET
CMD_UNKNOWN = _fife.CMD_UNKNOWN
CMD_QUIT_GAME = _fife.CMD_QUIT_GAME
CMD_MOUSE_FOCUS_GAINED = _fife.CMD_MOUSE_FOCUS_GAINED
CMD_MOUSE_FOCUS_LOST = _fife.CMD_MOUSE_FOCUS_LOST
CMD_INPUT_FOCUS_GAINED = _fife.CMD_INPUT_FOCUS_GAINED
CMD_INPUT_FOCUS_LOST = _fife.CMD_INPUT_FOCUS_LOST
CMD_APP_RESTORED = _fife.CMD_APP_RESTORED
CMD_APP_ICONIFIED = _fife.CMD_APP_ICONIFIED
class IEventSource(_object):
    """Proxy of C++ FIFE::IEventSource class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEventSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEventSource, name)
    __repr__ = _swig_repr
    def getEventSourceType(self):
        """getEventSourceType(IEventSource self) -> FIFE::EventSourceType"""
        return _fife.IEventSource_getEventSourceType(self)

    __swig_destroy__ = _fife.delete_IEventSource
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::IEventSource self) -> IEventSource"""
        if self.__class__ == IEventSource:
            _self = None
        else:
            _self = self
        this = _fife.new_IEventSource(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IEventSource(self)
        return weakref_proxy(self)
IEventSource_swigregister = _fife.IEventSource_swigregister
IEventSource_swigregister(IEventSource)

class Event(_object):
    """Proxy of C++ FIFE::Event class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def consume(self):
        """consume(Event self)"""
        return _fife.Event_consume(self)

    def isConsumed(self):
        """isConsumed(Event self) -> bool"""
        return _fife.Event_isConsumed(self)

    def getSource(self):
        """getSource(Event self) -> IEventSource"""
        return _fife.Event_getSource(self)

    def getTimeStamp(self):
        """getTimeStamp(Event self) -> int32_t"""
        return _fife.Event_getTimeStamp(self)

    def getDebugString(self):
        """getDebugString(Event self) -> std::string"""
        return _fife.Event_getDebugString(self)

    def getName(self):
        """getName(Event self) -> std::string const &"""
        return _fife.Event_getName(self)

    __swig_destroy__ = _fife.delete_Event
    __del__ = lambda self : None;
Event_swigregister = _fife.Event_swigregister
Event_swigregister(Event)

class InputEvent(Event):
    """Proxy of C++ FIFE::InputEvent class"""
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def isConsumedByWidgets(self):
        """isConsumedByWidgets(InputEvent self) -> bool"""
        return _fife.InputEvent_isConsumedByWidgets(self)

    def isAltPressed(self):
        """isAltPressed(InputEvent self) -> bool"""
        return _fife.InputEvent_isAltPressed(self)

    def isControlPressed(self):
        """isControlPressed(InputEvent self) -> bool"""
        return _fife.InputEvent_isControlPressed(self)

    def isMetaPressed(self):
        """isMetaPressed(InputEvent self) -> bool"""
        return _fife.InputEvent_isMetaPressed(self)

    def isShiftPressed(self):
        """isShiftPressed(InputEvent self) -> bool"""
        return _fife.InputEvent_isShiftPressed(self)

    __swig_destroy__ = _fife.delete_InputEvent
    __del__ = lambda self : None;
InputEvent_swigregister = _fife.InputEvent_swigregister
InputEvent_swigregister(InputEvent)

class Command(Event):
    """Proxy of C++ FIFE::Command class"""
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::Command self) -> Command"""
        this = _fife.new_Command()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Command
    __del__ = lambda self : None;
    def getCommandType(self):
        """getCommandType(Command self) -> FIFE::CommandType"""
        return _fife.Command_getCommandType(self)

    def setCommandType(self, *args):
        """setCommandType(Command self, FIFE::CommandType type)"""
        return _fife.Command_setCommandType(self, *args)

    def getCode(self):
        """getCode(Command self) -> int32_t"""
        return _fife.Command_getCode(self)

    def setCode(self, *args):
        """setCode(Command self, int32_t code)"""
        return _fife.Command_setCode(self, *args)

    def setSource(self, *args):
        """setSource(Command self, IEventSource source)"""
        return _fife.Command_setSource(self, *args)

    def setTimeStamp(self, *args):
        """setTimeStamp(Command self, int32_t timestamp)"""
        return _fife.Command_setTimeStamp(self, *args)

Command_swigregister = _fife.Command_swigregister
Command_swigregister(Command)

class ICommandListener(_object):
    """Proxy of C++ FIFE::ICommandListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandListener, name)
    __repr__ = _swig_repr
    def onCommand(self, *args):
        """onCommand(ICommandListener self, Command command)"""
        return _fife.ICommandListener_onCommand(self, *args)

    __swig_destroy__ = _fife.delete_ICommandListener
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::ICommandListener self) -> ICommandListener"""
        if self.__class__ == ICommandListener:
            _self = None
        else:
            _self = self
        this = _fife.new_ICommandListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_ICommandListener(self)
        return weakref_proxy(self)
ICommandListener_swigregister = _fife.ICommandListener_swigregister
ICommandListener_swigregister(ICommandListener)

class KeyEvent(InputEvent):
    """Proxy of C++ FIFE::KeyEvent class"""
    __swig_setmethods__ = {}
    for _s in [InputEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [InputEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    UNKNOWN = _fife.KeyEvent_UNKNOWN
    PRESSED = _fife.KeyEvent_PRESSED
    RELEASED = _fife.KeyEvent_RELEASED
    def getType(self):
        """getType(KeyEvent self) -> FIFE::KeyEvent::KeyEventType"""
        return _fife.KeyEvent_getType(self)

    def isNumericPad(self):
        """isNumericPad(KeyEvent self) -> bool"""
        return _fife.KeyEvent_isNumericPad(self)

    def getKey(self):
        """getKey(KeyEvent self) -> Key"""
        return _fife.KeyEvent_getKey(self)

    __swig_destroy__ = _fife.delete_KeyEvent
    __del__ = lambda self : None;
KeyEvent_swigregister = _fife.KeyEvent_swigregister
KeyEvent_swigregister(KeyEvent)

class IKeyListener(_object):
    """Proxy of C++ FIFE::IKeyListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKeyListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKeyListener, name)
    __repr__ = _swig_repr
    def keyPressed(self, *args):
        """keyPressed(IKeyListener self, KeyEvent evt)"""
        return _fife.IKeyListener_keyPressed(self, *args)

    def keyReleased(self, *args):
        """keyReleased(IKeyListener self, KeyEvent evt)"""
        return _fife.IKeyListener_keyReleased(self, *args)

    __swig_destroy__ = _fife.delete_IKeyListener
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::IKeyListener self) -> IKeyListener"""
        if self.__class__ == IKeyListener:
            _self = None
        else:
            _self = self
        this = _fife.new_IKeyListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IKeyListener(self)
        return weakref_proxy(self)
IKeyListener_swigregister = _fife.IKeyListener_swigregister
IKeyListener_swigregister(IKeyListener)

class ISdlEventListener(_object):
    """Proxy of C++ FIFE::ISdlEventListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISdlEventListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISdlEventListener, name)
    __repr__ = _swig_repr
    def onSdlEvent(self, *args):
        """onSdlEvent(ISdlEventListener self, SDL_Event & evt) -> bool"""
        return _fife.ISdlEventListener_onSdlEvent(self, *args)

    __swig_destroy__ = _fife.delete_ISdlEventListener
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::ISdlEventListener self) -> ISdlEventListener"""
        if self.__class__ == ISdlEventListener:
            _self = None
        else:
            _self = self
        this = _fife.new_ISdlEventListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_ISdlEventListener(self)
        return weakref_proxy(self)
ISdlEventListener_swigregister = _fife.ISdlEventListener_swigregister
ISdlEventListener_swigregister(ISdlEventListener)

class MouseEvent(InputEvent):
    """Proxy of C++ FIFE::MouseEvent class"""
    __swig_setmethods__ = {}
    for _s in [InputEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [InputEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MouseEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    UNKNOWN_EVENT = _fife.MouseEvent_UNKNOWN_EVENT
    MOVED = _fife.MouseEvent_MOVED
    PRESSED = _fife.MouseEvent_PRESSED
    RELEASED = _fife.MouseEvent_RELEASED
    WHEEL_MOVED_DOWN = _fife.MouseEvent_WHEEL_MOVED_DOWN
    WHEEL_MOVED_UP = _fife.MouseEvent_WHEEL_MOVED_UP
    CLICKED = _fife.MouseEvent_CLICKED
    ENTERED = _fife.MouseEvent_ENTERED
    EXITED = _fife.MouseEvent_EXITED
    DRAGGED = _fife.MouseEvent_DRAGGED
    EMPTY = _fife.MouseEvent_EMPTY
    LEFT = _fife.MouseEvent_LEFT
    RIGHT = _fife.MouseEvent_RIGHT
    MIDDLE = _fife.MouseEvent_MIDDLE
    UNKNOWN_BUTTON = _fife.MouseEvent_UNKNOWN_BUTTON
    def getX(self):
        """getX(MouseEvent self) -> int32_t"""
        return _fife.MouseEvent_getX(self)

    def getY(self):
        """getY(MouseEvent self) -> int32_t"""
        return _fife.MouseEvent_getY(self)

    def getType(self):
        """getType(MouseEvent self) -> FIFE::MouseEvent::MouseEventType"""
        return _fife.MouseEvent_getType(self)

    def getButton(self):
        """getButton(MouseEvent self) -> FIFE::MouseEvent::MouseButtonType"""
        return _fife.MouseEvent_getButton(self)

    __swig_destroy__ = _fife.delete_MouseEvent
    __del__ = lambda self : None;
MouseEvent_swigregister = _fife.MouseEvent_swigregister
MouseEvent_swigregister(MouseEvent)

class IMouseListener(_object):
    """Proxy of C++ FIFE::IMouseListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMouseListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMouseListener, name)
    __repr__ = _swig_repr
    def mouseEntered(self, *args):
        """mouseEntered(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseEntered(self, *args)

    def mouseExited(self, *args):
        """mouseExited(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseExited(self, *args)

    def mousePressed(self, *args):
        """mousePressed(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mousePressed(self, *args)

    def mouseReleased(self, *args):
        """mouseReleased(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseReleased(self, *args)

    def mouseClicked(self, *args):
        """mouseClicked(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseClicked(self, *args)

    def mouseWheelMovedUp(self, *args):
        """mouseWheelMovedUp(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseWheelMovedUp(self, *args)

    def mouseWheelMovedDown(self, *args):
        """mouseWheelMovedDown(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseWheelMovedDown(self, *args)

    def mouseMoved(self, *args):
        """mouseMoved(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseMoved(self, *args)

    def mouseDragged(self, *args):
        """mouseDragged(IMouseListener self, MouseEvent evt)"""
        return _fife.IMouseListener_mouseDragged(self, *args)

    __swig_destroy__ = _fife.delete_IMouseListener
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::IMouseListener self) -> IMouseListener"""
        if self.__class__ == IMouseListener:
            _self = None
        else:
            _self = self
        this = _fife.new_IMouseListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IMouseListener(self)
        return weakref_proxy(self)
IMouseListener_swigregister = _fife.IMouseListener_swigregister
IMouseListener_swigregister(IMouseListener)

class IKeyFilter(_object):
    """Proxy of C++ FIFE::IKeyFilter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKeyFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKeyFilter, name)
    __repr__ = _swig_repr
    def isFiltered(self, *args):
        """isFiltered(IKeyFilter self, KeyEvent evt) -> bool"""
        return _fife.IKeyFilter_isFiltered(self, *args)

    __swig_destroy__ = _fife.delete_IKeyFilter
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::IKeyFilter self) -> IKeyFilter"""
        if self.__class__ == IKeyFilter:
            _self = None
        else:
            _self = self
        this = _fife.new_IKeyFilter(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IKeyFilter(self)
        return weakref_proxy(self)
IKeyFilter_swigregister = _fife.IKeyFilter_swigregister
IKeyFilter_swigregister(IKeyFilter)

class EventManager(_object):
    """Proxy of C++ FIFE::EventManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::EventManager self) -> EventManager"""
        this = _fife.new_EventManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_EventManager
    __del__ = lambda self : None;
    def addCommandListener(self, *args):
        """addCommandListener(EventManager self, ICommandListener listener)"""
        return _fife.EventManager_addCommandListener(self, *args)

    def addCommandListenerFront(self, *args):
        """addCommandListenerFront(EventManager self, ICommandListener listener)"""
        return _fife.EventManager_addCommandListenerFront(self, *args)

    def removeCommandListener(self, *args):
        """removeCommandListener(EventManager self, ICommandListener listener)"""
        return _fife.EventManager_removeCommandListener(self, *args)

    def addKeyListener(self, *args):
        """addKeyListener(EventManager self, IKeyListener listener)"""
        return _fife.EventManager_addKeyListener(self, *args)

    def addKeyListenerFront(self, *args):
        """addKeyListenerFront(EventManager self, IKeyListener listener)"""
        return _fife.EventManager_addKeyListenerFront(self, *args)

    def removeKeyListener(self, *args):
        """removeKeyListener(EventManager self, IKeyListener listener)"""
        return _fife.EventManager_removeKeyListener(self, *args)

    def addMouseListener(self, *args):
        """addMouseListener(EventManager self, IMouseListener listener)"""
        return _fife.EventManager_addMouseListener(self, *args)

    def addMouseListenerFront(self, *args):
        """addMouseListenerFront(EventManager self, IMouseListener listener)"""
        return _fife.EventManager_addMouseListenerFront(self, *args)

    def removeMouseListener(self, *args):
        """removeMouseListener(EventManager self, IMouseListener listener)"""
        return _fife.EventManager_removeMouseListener(self, *args)

    def addSdlEventListener(self, *args):
        """addSdlEventListener(EventManager self, ISdlEventListener listener)"""
        return _fife.EventManager_addSdlEventListener(self, *args)

    def addSdlEventListenerFront(self, *args):
        """addSdlEventListenerFront(EventManager self, ISdlEventListener listener)"""
        return _fife.EventManager_addSdlEventListenerFront(self, *args)

    def removeSdlEventListener(self, *args):
        """removeSdlEventListener(EventManager self, ISdlEventListener listener)"""
        return _fife.EventManager_removeSdlEventListener(self, *args)

    def getEventSourceType(self):
        """getEventSourceType(EventManager self) -> FIFE::EventSourceType"""
        return _fife.EventManager_getEventSourceType(self)

    def dispatchCommand(self, *args):
        """dispatchCommand(EventManager self, Command command)"""
        return _fife.EventManager_dispatchCommand(self, *args)

    def setKeyFilter(self, *args):
        """setKeyFilter(EventManager self, IKeyFilter keyFilter)"""
        return _fife.EventManager_setKeyFilter(self, *args)

    def setMouseSensitivity(self, *args):
        """setMouseSensitivity(EventManager self, float sensitivity)"""
        return _fife.EventManager_setMouseSensitivity(self, *args)

    def getMouseSensitivity(self):
        """getMouseSensitivity(EventManager self) -> float"""
        return _fife.EventManager_getMouseSensitivity(self)

    def setMouseAccelerationEnabled(self, *args):
        """setMouseAccelerationEnabled(EventManager self, bool acceleration)"""
        return _fife.EventManager_setMouseAccelerationEnabled(self, *args)

    def isMouseAccelerationEnabled(self):
        """isMouseAccelerationEnabled(EventManager self) -> bool"""
        return _fife.EventManager_isMouseAccelerationEnabled(self)

EventManager_swigregister = _fife.EventManager_swigregister
EventManager_swigregister(EventManager)

class IFont(_object):
    """Proxy of C++ FIFE::IFont class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IFont, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IFont
    __del__ = lambda self : None;
    def setRowSpacing(self, *args):
        """setRowSpacing(IFont self, int32_t spacing)"""
        return _fife.IFont_setRowSpacing(self, *args)

    def getRowSpacing(self):
        """getRowSpacing(IFont self) -> int32_t"""
        return _fife.IFont_getRowSpacing(self)

    def setGlyphSpacing(self, *args):
        """setGlyphSpacing(IFont self, int32_t spacing)"""
        return _fife.IFont_setGlyphSpacing(self, *args)

    def getGlyphSpacing(self):
        """getGlyphSpacing(IFont self) -> int32_t"""
        return _fife.IFont_getGlyphSpacing(self)

    def setAntiAlias(self, *args):
        """setAntiAlias(IFont self, bool antiAlias)"""
        return _fife.IFont_setAntiAlias(self, *args)

    def isAntiAlias(self):
        """isAntiAlias(IFont self) -> bool"""
        return _fife.IFont_isAntiAlias(self)

    def setColor(self, *args):
        """
        setColor(IFont self, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        setColor(IFont self, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.IFont_setColor(self, *args)

    def getColor(self):
        """getColor(IFont self) -> SDL_Color"""
        return _fife.IFont_getColor(self)

    def getWidth(self, *args):
        """getWidth(IFont self, std::string const & text) -> int32_t"""
        return _fife.IFont_getWidth(self, *args)

    def getHeight(self):
        """getHeight(IFont self) -> int32_t"""
        return _fife.IFont_getHeight(self)

IFont_swigregister = _fife.IFont_swigregister
IFont_swigregister(IFont)

class FontBase(IFont):
    """Proxy of C++ FIFE::FontBase class"""
    __swig_setmethods__ = {}
    for _s in [IFont]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontBase, name, value)
    __swig_getmethods__ = {}
    for _s in [IFont]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FontBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_FontBase
    __del__ = lambda self : None;
FontBase_swigregister = _fife.FontBase_swigregister
FontBase_swigregister(FontBase)

class TTFont(FontBase):
    """Proxy of C++ FIFE::TrueTypeFont class"""
    __swig_setmethods__ = {}
    for _s in [FontBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTFont, name, value)
    __swig_getmethods__ = {}
    for _s in [FontBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTFont, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::TrueTypeFont self, std::string const & filename, int32_t size) -> TTFont"""
        this = _fife.new_TTFont(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TTFont
    __del__ = lambda self : None;
    def setColor(self, *args):
        """
        setColor(TTFont self, Uint8 r, Uint8 g, Uint8 b, Uint8 a=255)
        setColor(TTFont self, Uint8 r, Uint8 g, Uint8 b)
        """
        return _fife.TTFont_setColor(self, *args)

    def getWidth(self, *args):
        """getWidth(TTFont self, std::string const & text) -> int32_t"""
        return _fife.TTFont_getWidth(self, *args)

    def getHeight(self):
        """getHeight(TTFont self) -> int32_t"""
        return _fife.TTFont_getHeight(self)

TTFont_swigregister = _fife.TTFont_swigregister
TTFont_swigregister(TTFont)

class SubImageFont(FontBase):
    """Proxy of C++ FIFE::SubImageFont class"""
    __swig_setmethods__ = {}
    for _s in [FontBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubImageFont, name, value)
    __swig_getmethods__ = {}
    for _s in [FontBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubImageFont, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::SubImageFont self, std::string const & filename, std::string const & glyphs) -> SubImageFont"""
        this = _fife.new_SubImageFont(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SubImageFont
    __del__ = lambda self : None;
    def setColor(self, *args):
        """
        setColor(SubImageFont self, Uint8 r, Uint8 g, Uint8 b, Uint8 a=255)
        setColor(SubImageFont self, Uint8 r, Uint8 g, Uint8 b)
        """
        return _fife.SubImageFont_setColor(self, *args)

    def getWidth(self, *args):
        """getWidth(SubImageFont self, std::string const & text) -> int32_t"""
        return _fife.SubImageFont_getWidth(self, *args)

    def getHeight(self):
        """getHeight(SubImageFont self) -> int32_t"""
        return _fife.SubImageFont_getHeight(self)

SubImageFont_swigregister = _fife.SubImageFont_swigregister
SubImageFont_swigregister(SubImageFont)

class Font(_object):
    """Proxy of C++ fcn::Font class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_Font
    __del__ = lambda self : None;
    def getWidth(self, *args):
        """getWidth(Font self, std::string const & text) -> int32_t"""
        return _fife.Font_getWidth(self, *args)

    def getHeight(self):
        """getHeight(Font self) -> int32_t"""
        return _fife.Font_getHeight(self)

Font_swigregister = _fife.Font_swigregister
Font_swigregister(Font)

class GuiFont(Font,IFont):
    """Proxy of C++ FIFE::GuiFont class"""
    __swig_setmethods__ = {}
    for _s in [Font,IFont]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiFont, name, value)
    __swig_getmethods__ = {}
    for _s in [Font,IFont]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiFont, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::GuiFont self, IFont font) -> GuiFont"""
        this = _fife.new_GuiFont(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GuiFont
    __del__ = lambda self : None;
    def getStringIndexAt(self, *args):
        """getStringIndexAt(GuiFont self, std::string const & text, int32_t x) -> int32_t"""
        return _fife.GuiFont_getStringIndexAt(self, *args)

    def drawString(self, *args):
        """drawString(GuiFont self, Graphics graphics, std::string const & text, int32_t x, int32_t y)"""
        return _fife.GuiFont_drawString(self, *args)

    def setRowSpacing(self, *args):
        """setRowSpacing(GuiFont self, int32_t spacing)"""
        return _fife.GuiFont_setRowSpacing(self, *args)

    def getRowSpacing(self):
        """getRowSpacing(GuiFont self) -> int32_t"""
        return _fife.GuiFont_getRowSpacing(self)

    def setGlyphSpacing(self, *args):
        """setGlyphSpacing(GuiFont self, int32_t spacing)"""
        return _fife.GuiFont_setGlyphSpacing(self, *args)

    def getGlyphSpacing(self):
        """getGlyphSpacing(GuiFont self) -> int32_t"""
        return _fife.GuiFont_getGlyphSpacing(self)

    def setAntiAlias(self, *args):
        """setAntiAlias(GuiFont self, bool antiAlias)"""
        return _fife.GuiFont_setAntiAlias(self, *args)

    def isAntiAlias(self):
        """isAntiAlias(GuiFont self) -> bool"""
        return _fife.GuiFont_isAntiAlias(self)

    def getAsImage(self, *args):
        """getAsImage(GuiFont self, std::string const & text) -> Image"""
        return _fife.GuiFont_getAsImage(self, *args)

    def setColor(self, *args):
        """
        setColor(GuiFont self, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        setColor(GuiFont self, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.GuiFont_setColor(self, *args)

    def getColor(self):
        """getColor(GuiFont self) -> SDL_Color"""
        return _fife.GuiFont_getColor(self)

    def getWidth(self, *args):
        """getWidth(GuiFont self, std::string const & text) -> int32_t"""
        return _fife.GuiFont_getWidth(self, *args)

    def getHeight(self):
        """getHeight(GuiFont self) -> int32_t"""
        return _fife.GuiFont_getHeight(self)

GuiFont_swigregister = _fife.GuiFont_swigregister
GuiFont_swigregister(GuiFont)

class GcnImage(_object):
    """Proxy of C++ fcn::Image class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GcnImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GcnImage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_GcnImage
    __del__ = lambda self : None;
    def load(*args):
        """
        load(std::string const & filename, bool convertToDisplayFormat=True) -> GcnImage
        load(std::string const & filename) -> GcnImage
        """
        return _fife.GcnImage_load(*args)

    if _newclass:load = staticmethod(load)
    __swig_getmethods__["load"] = lambda x: load
    def getWidth(self):
        """getWidth(GcnImage self) -> int32_t"""
        return _fife.GcnImage_getWidth(self)

    def getHeight(self):
        """getHeight(GcnImage self) -> int32_t"""
        return _fife.GcnImage_getHeight(self)

GcnImage_swigregister = _fife.GcnImage_swigregister
GcnImage_swigregister(GcnImage)

def GcnImage_load(*args):
  """
    load(std::string const & filename, bool convertToDisplayFormat=True) -> GcnImage
    GcnImage_load(std::string const & filename) -> GcnImage
    """
  return _fife.GcnImage_load(*args)

class GuiImage(GcnImage):
    """Proxy of C++ FIFE::GuiImage class"""
    __swig_setmethods__ = {}
    for _s in [GcnImage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiImage, name, value)
    __swig_getmethods__ = {}
    for _s in [GcnImage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GuiImage self) -> GuiImage
        __init__(FIFE::GuiImage self, SharedImagePointer Image) -> GuiImage
        """
        this = _fife.new_GuiImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def getWidth(self):
        """getWidth(GuiImage self) -> int32_t"""
        return _fife.GuiImage_getWidth(self)

    def getHeight(self):
        """getHeight(GuiImage self) -> int32_t"""
        return _fife.GuiImage_getHeight(self)

    __swig_destroy__ = _fife.delete_GuiImage
    __del__ = lambda self : None;
GuiImage_swigregister = _fife.GuiImage_swigregister
GuiImage_swigregister(GuiImage)

class ConsoleExecuter(_object):
    """Proxy of C++ FIFE::ConsoleExecuter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleExecuter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleExecuter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_ConsoleExecuter
    __del__ = lambda self : None;
    def onToolsClick(self):
        """onToolsClick(ConsoleExecuter self)"""
        return _fife.ConsoleExecuter_onToolsClick(self)

    def onConsoleCommand(self, *args):
        """onConsoleCommand(ConsoleExecuter self, std::string const & command) -> std::string"""
        return _fife.ConsoleExecuter_onConsoleCommand(self, *args)

    def __init__(self): 
        """__init__(FIFE::ConsoleExecuter self) -> ConsoleExecuter"""
        if self.__class__ == ConsoleExecuter:
            _self = None
        else:
            _self = self
        this = _fife.new_ConsoleExecuter(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_ConsoleExecuter(self)
        return weakref_proxy(self)
ConsoleExecuter_swigregister = _fife.ConsoleExecuter_swigregister
ConsoleExecuter_swigregister(ConsoleExecuter)

class Console(_object):
    """Proxy of C++ FIFE::Console class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Console, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Console, name)
    __repr__ = _swig_repr
    def show(self):
        """show(Console self)"""
        return _fife.Console_show(self)

    def hide(self):
        """hide(Console self)"""
        return _fife.Console_hide(self)

    def clear(self):
        """clear(Console self)"""
        return _fife.Console_clear(self)

    def toggleShowHide(self):
        """toggleShowHide(Console self)"""
        return _fife.Console_toggleShowHide(self)

    def println(self, *args):
        """println(Console self, std::string const & s)"""
        return _fife.Console_println(self, *args)

    def setConsoleExecuter(self, *args):
        """setConsoleExecuter(Console self, ConsoleExecuter consoleexec)"""
        return _fife.Console_setConsoleExecuter(self, *args)

    def removeConsoleExecuter(self):
        """removeConsoleExecuter(Console self)"""
        return _fife.Console_removeConsoleExecuter(self)

    def __init__(self): 
        """__init__(FIFE::Console self) -> Console"""
        this = _fife.new_Console()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Console
    __del__ = lambda self : None;
Console_swigregister = _fife.Console_swigregister
Console_swigregister(Console)

class IGUIManager(ISdlEventListener):
    """Proxy of C++ FIFE::IGUIManager class"""
    __swig_setmethods__ = {}
    for _s in [ISdlEventListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGUIManager, name, value)
    __swig_getmethods__ = {}
    for _s in [ISdlEventListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IGUIManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IGUIManager
    __del__ = lambda self : None;
    def turn(self):
        """turn(IGUIManager self)"""
        return _fife.IGUIManager_turn(self)

    def resizeTopContainer(self, *args):
        """resizeTopContainer(IGUIManager self, uint32_t x, uint32_t y, uint32_t width, uint32_t height)"""
        return _fife.IGUIManager_resizeTopContainer(self, *args)

IGUIManager_swigregister = _fife.IGUIManager_swigregister
IGUIManager_swigregister(IGUIManager)

class FifechanManager(IGUIManager):
    """Proxy of C++ FIFE::FifechanManager class"""
    __swig_setmethods__ = {}
    for _s in [IGUIManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FifechanManager, name, value)
    __swig_getmethods__ = {}
    for _s in [IGUIManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FifechanManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::FifechanManager self) -> FifechanManager"""
        this = _fife.new_FifechanManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_FifechanManager
    __del__ = lambda self : None;
    def init(self, *args):
        """init(FifechanManager self, std::string const & backend, int32_t screenWidth, int32_t screenHeight)"""
        return _fife.FifechanManager_init(self, *args)

    def getConsole(self):
        """getConsole(FifechanManager self) -> Console"""
        return _fife.FifechanManager_getConsole(self)

    def add(self, *args):
        """add(FifechanManager self, Widget widget)"""
        return _fife.FifechanManager_add(self, *args)

    def remove(self, *args):
        """remove(FifechanManager self, Widget widget)"""
        return _fife.FifechanManager_remove(self, *args)

    def createFont(self, *args):
        """createFont(FifechanManager self, std::string const & path, uint32_t size, std::string const & glyphs) -> GuiFont"""
        return _fife.FifechanManager_createFont(self, *args)

    def releaseFont(self, *args):
        """releaseFont(FifechanManager self, GuiFont font)"""
        return _fife.FifechanManager_releaseFont(self, *args)

    def setDefaultFont(self, *args):
        """setDefaultFont(FifechanManager self, std::string const & path, uint32_t size, std::string const & glyphs) -> GuiFont"""
        return _fife.FifechanManager_setDefaultFont(self, *args)

    def getDefaultFont(self):
        """getDefaultFont(FifechanManager self) -> GuiFont"""
        return _fife.FifechanManager_getDefaultFont(self)

    def translateKeyEvent(self, *args):
        """translateKeyEvent(FifechanManager self, fcn::KeyEvent const & evt) -> KeyEvent"""
        return _fife.FifechanManager_translateKeyEvent(self, *args)

    def translateMouseEvent(self, *args):
        """translateMouseEvent(FifechanManager self, fcn::MouseEvent const & evt) -> MouseEvent"""
        return _fife.FifechanManager_translateMouseEvent(self, *args)

FifechanManager_swigregister = _fife.FifechanManager_swigregister
FifechanManager_swigregister(FifechanManager)

class TwoButton(fifechan.Widget):
    """Proxy of C++ fcn::TwoButton class"""
    __swig_setmethods__ = {}
    for _s in [fifechan.Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoButton, name, value)
    __swig_getmethods__ = {}
    for _s in [fifechan.Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoButton, name)
    __repr__ = _swig_repr
    def __init__(self, up_image=None, down_image=None, hover_image=None, caption=""): 
        """
        __init__(fcn::TwoButton self, GcnImage up_image=None, GcnImage down_image=None, GcnImage hover_image=None, char const * caption="") -> TwoButton
        __init__(fcn::TwoButton self, GcnImage up_image=None, GcnImage down_image=None, GcnImage hover_image=None) -> TwoButton
        __init__(fcn::TwoButton self, GcnImage up_image=None, GcnImage down_image=None) -> TwoButton
        __init__(fcn::TwoButton self, GcnImage up_image=None) -> TwoButton
        __init__(fcn::TwoButton self) -> TwoButton
        """
        this = _fife.new_TwoButton(up_image, down_image, hover_image, caption)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TwoButton
    __del__ = lambda self : None;
    def setCaption(self, *args):
        """setCaption(TwoButton self, std::string const & caption)"""
        return _fife.TwoButton_setCaption(self, *args)

    def getCaption(self):
        """getCaption(TwoButton self) -> std::string const &"""
        return _fife.TwoButton_getCaption(self)

    def setAlignment(self, *args):
        """setAlignment(TwoButton self, fcn::Graphics::Alignment alignment)"""
        return _fife.TwoButton_setAlignment(self, *args)

    def getAlignment(self):
        """getAlignment(TwoButton self) -> fcn::Graphics::Alignment"""
        return _fife.TwoButton_getAlignment(self)

    def setUpImage(self, *args):
        """setUpImage(TwoButton self, GcnImage image)"""
        return _fife.TwoButton_setUpImage(self, *args)

    def setDownImage(self, *args):
        """setDownImage(TwoButton self, GcnImage image)"""
        return _fife.TwoButton_setDownImage(self, *args)

    def setHoverImage(self, *args):
        """setHoverImage(TwoButton self, GcnImage image)"""
        return _fife.TwoButton_setHoverImage(self, *args)

    def setDownOffset(self, *args):
        """setDownOffset(TwoButton self, int32_t x, int32_t y)"""
        return _fife.TwoButton_setDownOffset(self, *args)

    def getDownXOffset(self):
        """getDownXOffset(TwoButton self) -> int32_t"""
        return _fife.TwoButton_getDownXOffset(self)

    def getDownYOffset(self):
        """getDownYOffset(TwoButton self) -> int32_t"""
        return _fife.TwoButton_getDownYOffset(self)

TwoButton_swigregister = _fife.TwoButton_swigregister
TwoButton_swigregister(TwoButton)

class ToggleButton(fifechan.Widget):
    """Proxy of C++ fcn::ToggleButton class"""
    __swig_setmethods__ = {}
    for _s in [fifechan.Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToggleButton, name, value)
    __swig_getmethods__ = {}
    for _s in [fifechan.Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToggleButton, name)
    __repr__ = _swig_repr
    def __init__(self, up_image=None, down_image=None, hover_image=None, caption="", group=""): 
        """
        __init__(fcn::ToggleButton self, GcnImage up_image=None, GcnImage down_image=None, GcnImage hover_image=None, char const * caption="", 
            char const * group="") -> ToggleButton
        __init__(fcn::ToggleButton self, GcnImage up_image=None, GcnImage down_image=None, GcnImage hover_image=None, char const * caption="") -> ToggleButton
        __init__(fcn::ToggleButton self, GcnImage up_image=None, GcnImage down_image=None, GcnImage hover_image=None) -> ToggleButton
        __init__(fcn::ToggleButton self, GcnImage up_image=None, GcnImage down_image=None) -> ToggleButton
        __init__(fcn::ToggleButton self, GcnImage up_image=None) -> ToggleButton
        __init__(fcn::ToggleButton self) -> ToggleButton
        """
        this = _fife.new_ToggleButton(up_image, down_image, hover_image, caption, group)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_ToggleButton
    __del__ = lambda self : None;
    def setCaption(self, *args):
        """setCaption(ToggleButton self, std::string const & caption)"""
        return _fife.ToggleButton_setCaption(self, *args)

    def getCaption(self):
        """getCaption(ToggleButton self) -> std::string const &"""
        return _fife.ToggleButton_getCaption(self)

    def setAlignment(self, *args):
        """setAlignment(ToggleButton self, fcn::Graphics::Alignment alignment)"""
        return _fife.ToggleButton_setAlignment(self, *args)

    def getAlignment(self):
        """getAlignment(ToggleButton self) -> fcn::Graphics::Alignment"""
        return _fife.ToggleButton_getAlignment(self)

    def setSpacing(self, *args):
        """setSpacing(ToggleButton self, uint32_t spacing)"""
        return _fife.ToggleButton_setSpacing(self, *args)

    def getSpacing(self):
        """getSpacing(ToggleButton self) -> uint32_t"""
        return _fife.ToggleButton_getSpacing(self)

    def setUpImage(self, *args):
        """setUpImage(ToggleButton self, GcnImage image)"""
        return _fife.ToggleButton_setUpImage(self, *args)

    def setDownImage(self, *args):
        """setDownImage(ToggleButton self, GcnImage image)"""
        return _fife.ToggleButton_setDownImage(self, *args)

    def setHoverImage(self, *args):
        """setHoverImage(ToggleButton self, GcnImage image)"""
        return _fife.ToggleButton_setHoverImage(self, *args)

    def setDownOffset(self, *args):
        """setDownOffset(ToggleButton self, int32_t x, int32_t y)"""
        return _fife.ToggleButton_setDownOffset(self, *args)

    def getDownXOffset(self):
        """getDownXOffset(ToggleButton self) -> int32_t"""
        return _fife.ToggleButton_getDownXOffset(self)

    def getDownYOffset(self):
        """getDownYOffset(ToggleButton self) -> int32_t"""
        return _fife.ToggleButton_getDownYOffset(self)

    def isToggled(self):
        """isToggled(ToggleButton self) -> bool"""
        return _fife.ToggleButton_isToggled(self)

    def setToggled(self, *args):
        """setToggled(ToggleButton self, bool toggled)"""
        return _fife.ToggleButton_setToggled(self, *args)

    def setGroup(self, *args):
        """setGroup(ToggleButton self, std::string const & group)"""
        return _fife.ToggleButton_setGroup(self, *args)

    def getGroup(self):
        """getGroup(ToggleButton self) -> std::string const &"""
        return _fife.ToggleButton_getGroup(self)

ToggleButton_swigregister = _fife.ToggleButton_swigregister
ToggleButton_swigregister(ToggleButton)

class Label(fifechan.Widget):
    """Proxy of C++ fcn::ClickLabel class"""
    __swig_setmethods__ = {}
    for _s in [fifechan.Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    for _s in [fifechan.Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        ClickLabel() -> Label
        __init__(fcn::ClickLabel self, std::string const & caption) -> Label
        """
        this = _fife.new_Label(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Label
    __del__ = lambda self : None;
    def setCaption(self, *args):
        """setCaption(Label self, std::string const & caption)"""
        return _fife.Label_setCaption(self, *args)

    def getCaption(self):
        """getCaption(Label self) -> std::string const &"""
        return _fife.Label_getCaption(self)

    def isTextWrapping(self):
        """isTextWrapping(Label self) -> bool"""
        return _fife.Label_isTextWrapping(self)

    def setTextWrapping(self, *args):
        """setTextWrapping(Label self, bool arg2)"""
        return _fife.Label_setTextWrapping(self, *args)

    def setWidth(self, *args):
        """setWidth(Label self, int32_t width)"""
        return _fife.Label_setWidth(self, *args)

    def adjustSize(self):
        """adjustSize(Label self)"""
        return _fife.Label_adjustSize(self)

Label_swigregister = _fife.Label_swigregister
Label_swigregister(Label)

class Icon(fifechan.Widget):
    """Proxy of C++ fcn::Icon2 class"""
    __swig_setmethods__ = {}
    for _s in [fifechan.Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Icon, name, value)
    __swig_getmethods__ = {}
    for _s in [fifechan.Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Icon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(fcn::Icon2 self, GcnImage image) -> Icon"""
        this = _fife.new_Icon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Icon
    __del__ = lambda self : None;
    def setImage(self, *args):
        """setImage(Icon self, GcnImage image)"""
        return _fife.Icon_setImage(self, *args)

Icon_swigregister = _fife.Icon_swigregister
Icon_swigregister(Icon)

class PercentageBar(fifechan.Widget):
    """Proxy of C++ fcn::PercentageBar class"""
    __swig_setmethods__ = {}
    for _s in [fifechan.Widget]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PercentageBar, name, value)
    __swig_getmethods__ = {}
    for _s in [fifechan.Widget]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PercentageBar, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(fcn::PercentageBar self) -> PercentageBar"""
        this = _fife.new_PercentageBar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_PercentageBar
    __del__ = lambda self : None;
    def setForegroundImage(self, *args):
        """setForegroundImage(PercentageBar self, GcnImage image)"""
        return _fife.PercentageBar_setForegroundImage(self, *args)

    def setOrientation(self, *args):
        """setOrientation(PercentageBar self, fcn::PercentageBar::Orientation orientation)"""
        return _fife.PercentageBar_setOrientation(self, *args)

    def getOrientation(self):
        """getOrientation(PercentageBar self) -> fcn::PercentageBar::Orientation"""
        return _fife.PercentageBar_getOrientation(self)

    def getValue(self):
        """getValue(PercentageBar self) -> int32_t"""
        return _fife.PercentageBar_getValue(self)

    def setValue(self, *args):
        """setValue(PercentageBar self, int32_t value)"""
        return _fife.PercentageBar_setValue(self, *args)

    HORIZONTAL = _fife.PercentageBar_HORIZONTAL
    VERTICAL = _fife.PercentageBar_VERTICAL
PercentageBar_swigregister = _fife.PercentageBar_swigregister
PercentageBar_swigregister(PercentageBar)

class HybridGuiManager(IGUIManager):
    """Proxy of C++ FIFE::HybridGuiManager class"""
    __swig_setmethods__ = {}
    for _s in [IGUIManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HybridGuiManager, name, value)
    __swig_getmethods__ = {}
    for _s in [IGUIManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HybridGuiManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::HybridGuiManager self) -> HybridGuiManager"""
        this = _fife.new_HybridGuiManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_HybridGuiManager
    __del__ = lambda self : None;
    def addGuiManager(self, *args):
        """addGuiManager(HybridGuiManager self, IGUIManager guiManager)"""
        return _fife.HybridGuiManager_addGuiManager(self, *args)

    def removeGuiManager(self, *args):
        """removeGuiManager(HybridGuiManager self, IGUIManager guiManager)"""
        return _fife.HybridGuiManager_removeGuiManager(self, *args)

HybridGuiManager_swigregister = _fife.HybridGuiManager_swigregister
HybridGuiManager_swigregister(HybridGuiManager)

class Exception(Exception):
    """Proxy of C++ FIFE::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Exception self, std::string const & msg) -> Exception"""
        this = _fife.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Exception
    __del__ = lambda self : None;
    def what(self):
        """what(Exception self) -> char const *"""
        return _fife.Exception_what(self)

    def getTypeStr(self):
        """getTypeStr(Exception self) -> std::string const &"""
        return _fife.Exception_getTypeStr(self)

    def getDescription(self):
        """getDescription(Exception self) -> std::string const &"""
        return _fife.Exception_getDescription(self)

Exception_swigregister = _fife.Exception_swigregister
Exception_swigregister(Exception)

class SDLException(Exception):
    """Proxy of C++ FIFE::SDLException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDLException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SDLException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::SDLException self, std::string const & msg) -> SDLException"""
        this = _fife.new_SDLException(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(SDLException self) -> std::string const &"""
        return _fife.SDLException_getTypeStr(self)

    def getDescription(self):
        """getDescription(SDLException self) -> std::string const &"""
        return _fife.SDLException_getDescription(self)

    __swig_destroy__ = _fife.delete_SDLException
    __del__ = lambda self : None;
SDLException_swigregister = _fife.SDLException_swigregister
SDLException_swigregister(SDLException)

class NotFound(Exception):
    """Proxy of C++ FIFE::NotFound class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::NotFound self, std::string const & msg) -> NotFound"""
        this = _fife.new_NotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(NotFound self) -> std::string const &"""
        return _fife.NotFound_getTypeStr(self)

    def getDescription(self):
        """getDescription(NotFound self) -> std::string const &"""
        return _fife.NotFound_getDescription(self)

    __swig_destroy__ = _fife.delete_NotFound
    __del__ = lambda self : None;
NotFound_swigregister = _fife.NotFound_swigregister
NotFound_swigregister(NotFound)

class NotSet(Exception):
    """Proxy of C++ FIFE::NotSet class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::NotSet self, std::string const & msg) -> NotSet"""
        this = _fife.new_NotSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(NotSet self) -> std::string const &"""
        return _fife.NotSet_getTypeStr(self)

    def getDescription(self):
        """getDescription(NotSet self) -> std::string const &"""
        return _fife.NotSet_getDescription(self)

    __swig_destroy__ = _fife.delete_NotSet
    __del__ = lambda self : None;
NotSet_swigregister = _fife.NotSet_swigregister
NotSet_swigregister(NotSet)

class IndexOverflow(Exception):
    """Proxy of C++ FIFE::IndexOverflow class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOverflow, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOverflow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::IndexOverflow self, std::string const & msg) -> IndexOverflow"""
        this = _fife.new_IndexOverflow(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(IndexOverflow self) -> std::string const &"""
        return _fife.IndexOverflow_getTypeStr(self)

    def getDescription(self):
        """getDescription(IndexOverflow self) -> std::string const &"""
        return _fife.IndexOverflow_getDescription(self)

    __swig_destroy__ = _fife.delete_IndexOverflow
    __del__ = lambda self : None;
IndexOverflow_swigregister = _fife.IndexOverflow_swigregister
IndexOverflow_swigregister(IndexOverflow)

class InvalidFormat(Exception):
    """Proxy of C++ FIFE::InvalidFormat class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::InvalidFormat self, std::string const & msg) -> InvalidFormat"""
        this = _fife.new_InvalidFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(InvalidFormat self) -> std::string const &"""
        return _fife.InvalidFormat_getTypeStr(self)

    def getDescription(self):
        """getDescription(InvalidFormat self) -> std::string const &"""
        return _fife.InvalidFormat_getDescription(self)

    __swig_destroy__ = _fife.delete_InvalidFormat
    __del__ = lambda self : None;
InvalidFormat_swigregister = _fife.InvalidFormat_swigregister
InvalidFormat_swigregister(InvalidFormat)

class CannotOpenFile(Exception):
    """Proxy of C++ FIFE::CannotOpenFile class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CannotOpenFile, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CannotOpenFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::CannotOpenFile self, std::string const & msg) -> CannotOpenFile"""
        this = _fife.new_CannotOpenFile(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(CannotOpenFile self) -> std::string const &"""
        return _fife.CannotOpenFile_getTypeStr(self)

    def getDescription(self):
        """getDescription(CannotOpenFile self) -> std::string const &"""
        return _fife.CannotOpenFile_getDescription(self)

    __swig_destroy__ = _fife.delete_CannotOpenFile
    __del__ = lambda self : None;
CannotOpenFile_swigregister = _fife.CannotOpenFile_swigregister
CannotOpenFile_swigregister(CannotOpenFile)

class InvalidConversion(Exception):
    """Proxy of C++ FIFE::InvalidConversion class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidConversion, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidConversion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::InvalidConversion self, std::string const & msg) -> InvalidConversion"""
        this = _fife.new_InvalidConversion(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(InvalidConversion self) -> std::string const &"""
        return _fife.InvalidConversion_getTypeStr(self)

    def getDescription(self):
        """getDescription(InvalidConversion self) -> std::string const &"""
        return _fife.InvalidConversion_getDescription(self)

    __swig_destroy__ = _fife.delete_InvalidConversion
    __del__ = lambda self : None;
InvalidConversion_swigregister = _fife.InvalidConversion_swigregister
InvalidConversion_swigregister(InvalidConversion)

class NotSupported(Exception):
    """Proxy of C++ FIFE::NotSupported class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotSupported, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotSupported, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::NotSupported self, std::string const & msg) -> NotSupported"""
        this = _fife.new_NotSupported(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(NotSupported self) -> std::string const &"""
        return _fife.NotSupported_getTypeStr(self)

    def getDescription(self):
        """getDescription(NotSupported self) -> std::string const &"""
        return _fife.NotSupported_getDescription(self)

    __swig_destroy__ = _fife.delete_NotSupported
    __del__ = lambda self : None;
NotSupported_swigregister = _fife.NotSupported_swigregister
NotSupported_swigregister(NotSupported)

class NameClash(Exception):
    """Proxy of C++ FIFE::NameClash class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameClash, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NameClash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::NameClash self, std::string const & msg) -> NameClash"""
        this = _fife.new_NameClash(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(NameClash self) -> std::string const &"""
        return _fife.NameClash_getTypeStr(self)

    def getDescription(self):
        """getDescription(NameClash self) -> std::string const &"""
        return _fife.NameClash_getDescription(self)

    __swig_destroy__ = _fife.delete_NameClash
    __del__ = lambda self : None;
NameClash_swigregister = _fife.NameClash_swigregister
NameClash_swigregister(NameClash)

class Duplicate(Exception):
    """Proxy of C++ FIFE::Duplicate class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duplicate, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Duplicate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Duplicate self, std::string const & msg) -> Duplicate"""
        this = _fife.new_Duplicate(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(Duplicate self) -> std::string const &"""
        return _fife.Duplicate_getTypeStr(self)

    def getDescription(self):
        """getDescription(Duplicate self) -> std::string const &"""
        return _fife.Duplicate_getDescription(self)

    __swig_destroy__ = _fife.delete_Duplicate
    __del__ = lambda self : None;
Duplicate_swigregister = _fife.Duplicate_swigregister
Duplicate_swigregister(Duplicate)

class ScriptException(Exception):
    """Proxy of C++ FIFE::ScriptException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::ScriptException self, std::string const & msg) -> ScriptException"""
        this = _fife.new_ScriptException(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(ScriptException self) -> std::string const &"""
        return _fife.ScriptException_getTypeStr(self)

    def getDescription(self):
        """getDescription(ScriptException self) -> std::string const &"""
        return _fife.ScriptException_getDescription(self)

    __swig_destroy__ = _fife.delete_ScriptException
    __del__ = lambda self : None;
ScriptException_swigregister = _fife.ScriptException_swigregister
ScriptException_swigregister(ScriptException)

class EventException(Exception):
    """Proxy of C++ FIFE::EventException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::EventException self, std::string const & msg) -> EventException"""
        this = _fife.new_EventException(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(EventException self) -> std::string const &"""
        return _fife.EventException_getTypeStr(self)

    def getDescription(self):
        """getDescription(EventException self) -> std::string const &"""
        return _fife.EventException_getDescription(self)

    __swig_destroy__ = _fife.delete_EventException
    __del__ = lambda self : None;
EventException_swigregister = _fife.EventException_swigregister
EventException_swigregister(EventException)

class GuiException(Exception):
    """Proxy of C++ FIFE::GuiException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::GuiException self, std::string const & msg) -> GuiException"""
        this = _fife.new_GuiException(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(GuiException self) -> std::string const &"""
        return _fife.GuiException_getTypeStr(self)

    def getDescription(self):
        """getDescription(GuiException self) -> std::string const &"""
        return _fife.GuiException_getDescription(self)

    __swig_destroy__ = _fife.delete_GuiException
    __del__ = lambda self : None;
GuiException_swigregister = _fife.GuiException_swigregister
GuiException_swigregister(GuiException)

class InconsistencyDetected(Exception):
    """Proxy of C++ FIFE::InconsistencyDetected class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InconsistencyDetected, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InconsistencyDetected, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::InconsistencyDetected self, std::string const & msg) -> InconsistencyDetected"""
        this = _fife.new_InconsistencyDetected(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(InconsistencyDetected self) -> std::string const &"""
        return _fife.InconsistencyDetected_getTypeStr(self)

    def getDescription(self):
        """getDescription(InconsistencyDetected self) -> std::string const &"""
        return _fife.InconsistencyDetected_getDescription(self)

    __swig_destroy__ = _fife.delete_InconsistencyDetected
    __del__ = lambda self : None;
InconsistencyDetected_swigregister = _fife.InconsistencyDetected_swigregister
InconsistencyDetected_swigregister(InconsistencyDetected)

class OutOfMemory(Exception):
    """Proxy of C++ FIFE::OutOfMemory class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemory, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OutOfMemory self, std::string const & msg) -> OutOfMemory"""
        this = _fife.new_OutOfMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTypeStr(self):
        """getTypeStr(OutOfMemory self) -> std::string const &"""
        return _fife.OutOfMemory_getTypeStr(self)

    def getDescription(self):
        """getDescription(OutOfMemory self) -> std::string const &"""
        return _fife.OutOfMemory_getDescription(self)

    __swig_destroy__ = _fife.delete_OutOfMemory
    __del__ = lambda self : None;
OutOfMemory_swigregister = _fife.OutOfMemory_swigregister
OutOfMemory_swigregister(OutOfMemory)

class FifeClass(_object):
    """Proxy of C++ FIFE::FifeClass class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FifeClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FifeClass, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_FifeClass
    __del__ = lambda self : None;
    def getFifeId(self):
        """getFifeId(FifeClass self) -> FIFE::fifeid_t"""
        return _fife.FifeClass_getFifeId(self)

    def __init__(self): 
        """__init__(FIFE::FifeClass self) -> FifeClass"""
        this = _fife.new_FifeClass()
        try: self.this.append(this)
        except: self.this = this
FifeClass_swigregister = _fife.FifeClass_swigregister
FifeClass_swigregister(FifeClass)

class Point(_object):
    """Proxy of C++ FIFE::PointType2D<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.Point_x_set
    __swig_getmethods__["x"] = _fife.Point_x_get
    if _newclass:x = _swig_property(_fife.Point_x_get, _fife.Point_x_set)
    __swig_setmethods__["y"] = _fife.Point_y_set
    __swig_getmethods__["y"] = _fife.Point_y_get
    if _newclass:y = _swig_property(_fife.Point_y_get, _fife.Point_y_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType2D<(int32_t)> self, int _x=0, int _y=0) -> Point
        __init__(FIFE::PointType2D<(int32_t)> self, int _x=0) -> Point
        __init__(FIFE::PointType2D<(int32_t)> self) -> Point
        __init__(FIFE::PointType2D<(int32_t)> self, Point rhs) -> Point
        """
        this = _fife.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(Point self, Point p) -> Point"""
        return _fife.Point___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Point self, Point p) -> Point"""
        return _fife.Point___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(Point self, Point p) -> Point"""
        return _fife.Point___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(Point self, Point p) -> Point"""
        return _fife.Point___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(Point self, int const & i) -> Point"""
        return _fife.Point___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Point self, int const & i) -> Point"""
        return _fife.Point___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(Point self, Point p) -> bool"""
        return _fife.Point___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Point self, Point p) -> bool"""
        return _fife.Point___ne__(self, *args)

    def length(self):
        """length(Point self) -> int"""
        return _fife.Point_length(self)

    def normalize(self):
        """normalize(Point self)"""
        return _fife.Point_normalize(self)

    def rotate(self, *args):
        """
        rotate(Point self, int angle)
        rotate(Point self, Point origin, int angle)
        """
        return _fife.Point_rotate(self, *args)

    def set(self, *args):
        """set(Point self, int _x, int _y)"""
        return _fife.Point_set(self, *args)

    def getX(self):
        """getX(Point self) -> int32_t"""
        return _fife.Point_getX(self)

    def getY(self):
        """getY(Point self) -> int32_t"""
        return _fife.Point_getY(self)

    def setX(self, *args):
        """setX(Point self, int32_t _x)"""
        return _fife.Point_setX(self, *args)

    def setY(self, *args):
        """setY(Point self, int32_t _y)"""
        return _fife.Point_setY(self, *args)

    def __str__(self):
        """__str__(Point self) -> std::string"""
        return _fife.Point___str__(self)

    __swig_destroy__ = _fife.delete_Point
    __del__ = lambda self : None;
Point_swigregister = _fife.Point_swigregister
Point_swigregister(Point)

class DoublePoint(_object):
    """Proxy of C++ FIFE::PointType2D<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.DoublePoint_x_set
    __swig_getmethods__["x"] = _fife.DoublePoint_x_get
    if _newclass:x = _swig_property(_fife.DoublePoint_x_get, _fife.DoublePoint_x_set)
    __swig_setmethods__["y"] = _fife.DoublePoint_y_set
    __swig_getmethods__["y"] = _fife.DoublePoint_y_get
    if _newclass:y = _swig_property(_fife.DoublePoint_y_get, _fife.DoublePoint_y_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType2D<(double)> self, double _x=0, double _y=0) -> DoublePoint
        __init__(FIFE::PointType2D<(double)> self, double _x=0) -> DoublePoint
        __init__(FIFE::PointType2D<(double)> self) -> DoublePoint
        __init__(FIFE::PointType2D<(double)> self, DoublePoint rhs) -> DoublePoint
        """
        this = _fife.new_DoublePoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(DoublePoint self, DoublePoint p) -> DoublePoint"""
        return _fife.DoublePoint___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(DoublePoint self, DoublePoint p) -> DoublePoint"""
        return _fife.DoublePoint___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(DoublePoint self, DoublePoint p) -> DoublePoint"""
        return _fife.DoublePoint___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(DoublePoint self, DoublePoint p) -> DoublePoint"""
        return _fife.DoublePoint___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(DoublePoint self, double const & i) -> DoublePoint"""
        return _fife.DoublePoint___mul__(self, *args)

    def __div__(self, *args):
        """__div__(DoublePoint self, double const & i) -> DoublePoint"""
        return _fife.DoublePoint___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(DoublePoint self, DoublePoint p) -> bool"""
        return _fife.DoublePoint___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DoublePoint self, DoublePoint p) -> bool"""
        return _fife.DoublePoint___ne__(self, *args)

    def length(self):
        """length(DoublePoint self) -> double"""
        return _fife.DoublePoint_length(self)

    def normalize(self):
        """normalize(DoublePoint self)"""
        return _fife.DoublePoint_normalize(self)

    def rotate(self, *args):
        """
        rotate(DoublePoint self, double angle)
        rotate(DoublePoint self, DoublePoint origin, double angle)
        """
        return _fife.DoublePoint_rotate(self, *args)

    def set(self, *args):
        """set(DoublePoint self, double _x, double _y)"""
        return _fife.DoublePoint_set(self, *args)

    def getX(self):
        """getX(DoublePoint self) -> double"""
        return _fife.DoublePoint_getX(self)

    def getY(self):
        """getY(DoublePoint self) -> double"""
        return _fife.DoublePoint_getY(self)

    def setX(self, *args):
        """setX(DoublePoint self, double _x)"""
        return _fife.DoublePoint_setX(self, *args)

    def setY(self, *args):
        """setY(DoublePoint self, double _y)"""
        return _fife.DoublePoint_setY(self, *args)

    def __str__(self):
        """__str__(DoublePoint self) -> std::string"""
        return _fife.DoublePoint___str__(self)

    __swig_destroy__ = _fife.delete_DoublePoint
    __del__ = lambda self : None;
DoublePoint_swigregister = _fife.DoublePoint_swigregister
DoublePoint_swigregister(DoublePoint)

class Point3D(_object):
    """Proxy of C++ FIFE::PointType3D<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.Point3D_x_set
    __swig_getmethods__["x"] = _fife.Point3D_x_get
    if _newclass:x = _swig_property(_fife.Point3D_x_get, _fife.Point3D_x_set)
    __swig_setmethods__["y"] = _fife.Point3D_y_set
    __swig_getmethods__["y"] = _fife.Point3D_y_get
    if _newclass:y = _swig_property(_fife.Point3D_y_get, _fife.Point3D_y_set)
    __swig_setmethods__["z"] = _fife.Point3D_z_set
    __swig_getmethods__["z"] = _fife.Point3D_z_get
    if _newclass:z = _swig_property(_fife.Point3D_z_get, _fife.Point3D_z_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0, int _y=0, int _z=0) -> Point3D
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0, int _y=0) -> Point3D
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0) -> Point3D
        __init__(FIFE::PointType3D<(int32_t)> self) -> Point3D
        __init__(FIFE::PointType3D<(int32_t)> self, Point3D rhs) -> Point3D
        """
        this = _fife.new_Point3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(Point3D self, Point3D p) -> Point3D"""
        return _fife.Point3D___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(Point3D self, Point3D p) -> Point3D"""
        return _fife.Point3D___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(Point3D self, Point3D p) -> Point3D"""
        return _fife.Point3D___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(Point3D self, Point3D p) -> Point3D"""
        return _fife.Point3D___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(Point3D self, int const & i) -> Point3D"""
        return _fife.Point3D___mul__(self, *args)

    def __div__(self, *args):
        """__div__(Point3D self, int const & i) -> Point3D"""
        return _fife.Point3D___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(Point3D self, Point3D p) -> bool"""
        return _fife.Point3D___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Point3D self, Point3D p) -> bool"""
        return _fife.Point3D___ne__(self, *args)

    def length(self):
        """length(Point3D self) -> int"""
        return _fife.Point3D_length(self)

    def normalize(self):
        """normalize(Point3D self)"""
        return _fife.Point3D_normalize(self)

    def set(self, *args):
        """set(Point3D self, int _x, int _y, int _z)"""
        return _fife.Point3D_set(self, *args)

    __swig_destroy__ = _fife.delete_Point3D
    __del__ = lambda self : None;
Point3D_swigregister = _fife.Point3D_swigregister
Point3D_swigregister(Point3D)

class DoublePoint3D(_object):
    """Proxy of C++ FIFE::PointType3D<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePoint3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePoint3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.DoublePoint3D_x_set
    __swig_getmethods__["x"] = _fife.DoublePoint3D_x_get
    if _newclass:x = _swig_property(_fife.DoublePoint3D_x_get, _fife.DoublePoint3D_x_set)
    __swig_setmethods__["y"] = _fife.DoublePoint3D_y_set
    __swig_getmethods__["y"] = _fife.DoublePoint3D_y_get
    if _newclass:y = _swig_property(_fife.DoublePoint3D_y_get, _fife.DoublePoint3D_y_set)
    __swig_setmethods__["z"] = _fife.DoublePoint3D_z_set
    __swig_getmethods__["z"] = _fife.DoublePoint3D_z_get
    if _newclass:z = _swig_property(_fife.DoublePoint3D_z_get, _fife.DoublePoint3D_z_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType3D<(double)> self, double _x=0, double _y=0, double _z=0) -> DoublePoint3D
        __init__(FIFE::PointType3D<(double)> self, double _x=0, double _y=0) -> DoublePoint3D
        __init__(FIFE::PointType3D<(double)> self, double _x=0) -> DoublePoint3D
        __init__(FIFE::PointType3D<(double)> self) -> DoublePoint3D
        __init__(FIFE::PointType3D<(double)> self, DoublePoint3D rhs) -> DoublePoint3D
        """
        this = _fife.new_DoublePoint3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(DoublePoint3D self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.DoublePoint3D___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(DoublePoint3D self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.DoublePoint3D___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(DoublePoint3D self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.DoublePoint3D___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(DoublePoint3D self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.DoublePoint3D___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(DoublePoint3D self, double const & i) -> DoublePoint3D"""
        return _fife.DoublePoint3D___mul__(self, *args)

    def __div__(self, *args):
        """__div__(DoublePoint3D self, double const & i) -> DoublePoint3D"""
        return _fife.DoublePoint3D___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(DoublePoint3D self, DoublePoint3D p) -> bool"""
        return _fife.DoublePoint3D___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(DoublePoint3D self, DoublePoint3D p) -> bool"""
        return _fife.DoublePoint3D___ne__(self, *args)

    def length(self):
        """length(DoublePoint3D self) -> double"""
        return _fife.DoublePoint3D_length(self)

    def normalize(self):
        """normalize(DoublePoint3D self)"""
        return _fife.DoublePoint3D_normalize(self)

    def set(self, *args):
        """set(DoublePoint3D self, double _x, double _y, double _z)"""
        return _fife.DoublePoint3D_set(self, *args)

    __swig_destroy__ = _fife.delete_DoublePoint3D
    __del__ = lambda self : None;
DoublePoint3D_swigregister = _fife.DoublePoint3D_swigregister
DoublePoint3D_swigregister(DoublePoint3D)

class Rect(_object):
    """Proxy of C++ FIFE::RectType<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.Rect_x_set
    __swig_getmethods__["x"] = _fife.Rect_x_get
    if _newclass:x = _swig_property(_fife.Rect_x_get, _fife.Rect_x_set)
    __swig_setmethods__["y"] = _fife.Rect_y_set
    __swig_getmethods__["y"] = _fife.Rect_y_get
    if _newclass:y = _swig_property(_fife.Rect_y_get, _fife.Rect_y_set)
    __swig_setmethods__["w"] = _fife.Rect_w_set
    __swig_getmethods__["w"] = _fife.Rect_w_get
    if _newclass:w = _swig_property(_fife.Rect_w_get, _fife.Rect_w_set)
    __swig_setmethods__["h"] = _fife.Rect_h_set
    __swig_getmethods__["h"] = _fife.Rect_h_get
    if _newclass:h = _swig_property(_fife.Rect_h_get, _fife.Rect_h_set)
    def __init__(self, x=0, y=0, width=0, height=0): 
        """
        __init__(FIFE::RectType<(int32_t)> self, int x=0, int y=0, int width=0, int height=0) -> Rect
        __init__(FIFE::RectType<(int32_t)> self, int x=0, int y=0, int width=0) -> Rect
        __init__(FIFE::RectType<(int32_t)> self, int x=0, int y=0) -> Rect
        __init__(FIFE::RectType<(int32_t)> self, int x=0) -> Rect
        __init__(FIFE::RectType<(int32_t)> self) -> Rect
        """
        this = _fife.new_Rect(x, y, width, height)
        try: self.this.append(this)
        except: self.this = this
    def right(self):
        """right(Rect self) -> int"""
        return _fife.Rect_right(self)

    def bottom(self):
        """bottom(Rect self) -> int"""
        return _fife.Rect_bottom(self)

    def __eq__(self, *args):
        """__eq__(Rect self, Rect rect) -> bool"""
        return _fife.Rect___eq__(self, *args)

    def contains(self, *args):
        """contains(Rect self, Point point) -> bool"""
        return _fife.Rect_contains(self, *args)

    def intersects(self, *args):
        """intersects(Rect self, Rect rect) -> bool"""
        return _fife.Rect_intersects(self, *args)

    def intersectInplace(self, *args):
        """intersectInplace(Rect self, Rect rect) -> bool"""
        return _fife.Rect_intersectInplace(self, *args)

    def getX(self):
        """getX(Rect self) -> int32_t"""
        return _fife.Rect_getX(self)

    def getY(self):
        """getY(Rect self) -> int32_t"""
        return _fife.Rect_getY(self)

    def setX(self, *args):
        """setX(Rect self, int32_t _x)"""
        return _fife.Rect_setX(self, *args)

    def setY(self, *args):
        """setY(Rect self, int32_t _y)"""
        return _fife.Rect_setY(self, *args)

    def getW(self):
        """getW(Rect self) -> int32_t"""
        return _fife.Rect_getW(self)

    def getH(self):
        """getH(Rect self) -> int32_t"""
        return _fife.Rect_getH(self)

    def setW(self, *args):
        """setW(Rect self, int32_t _w)"""
        return _fife.Rect_setW(self, *args)

    def setH(self, *args):
        """setH(Rect self, int32_t _h)"""
        return _fife.Rect_setH(self, *args)

    def __str__(self):
        """__str__(Rect self) -> std::string"""
        return _fife.Rect___str__(self)

    __swig_destroy__ = _fife.delete_Rect
    __del__ = lambda self : None;
Rect_swigregister = _fife.Rect_swigregister
Rect_swigregister(Rect)

class FloatRect(_object):
    """Proxy of C++ FIFE::RectType<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.FloatRect_x_set
    __swig_getmethods__["x"] = _fife.FloatRect_x_get
    if _newclass:x = _swig_property(_fife.FloatRect_x_get, _fife.FloatRect_x_set)
    __swig_setmethods__["y"] = _fife.FloatRect_y_set
    __swig_getmethods__["y"] = _fife.FloatRect_y_get
    if _newclass:y = _swig_property(_fife.FloatRect_y_get, _fife.FloatRect_y_set)
    __swig_setmethods__["w"] = _fife.FloatRect_w_set
    __swig_getmethods__["w"] = _fife.FloatRect_w_get
    if _newclass:w = _swig_property(_fife.FloatRect_w_get, _fife.FloatRect_w_set)
    __swig_setmethods__["h"] = _fife.FloatRect_h_set
    __swig_getmethods__["h"] = _fife.FloatRect_h_get
    if _newclass:h = _swig_property(_fife.FloatRect_h_get, _fife.FloatRect_h_set)
    def __init__(self, x=0, y=0, width=0, height=0): 
        """
        __init__(FIFE::RectType<(float)> self, float x=0, float y=0, float width=0, float height=0) -> FloatRect
        __init__(FIFE::RectType<(float)> self, float x=0, float y=0, float width=0) -> FloatRect
        __init__(FIFE::RectType<(float)> self, float x=0, float y=0) -> FloatRect
        __init__(FIFE::RectType<(float)> self, float x=0) -> FloatRect
        __init__(FIFE::RectType<(float)> self) -> FloatRect
        """
        this = _fife.new_FloatRect(x, y, width, height)
        try: self.this.append(this)
        except: self.this = this
    def right(self):
        """right(FloatRect self) -> float"""
        return _fife.FloatRect_right(self)

    def bottom(self):
        """bottom(FloatRect self) -> float"""
        return _fife.FloatRect_bottom(self)

    def __eq__(self, *args):
        """__eq__(FloatRect self, FloatRect rect) -> bool"""
        return _fife.FloatRect___eq__(self, *args)

    def contains(self, *args):
        """contains(FloatRect self, FIFE::PointType2D< float > const & point) -> bool"""
        return _fife.FloatRect_contains(self, *args)

    def intersects(self, *args):
        """intersects(FloatRect self, FloatRect rect) -> bool"""
        return _fife.FloatRect_intersects(self, *args)

    def intersectInplace(self, *args):
        """intersectInplace(FloatRect self, FloatRect rect) -> bool"""
        return _fife.FloatRect_intersectInplace(self, *args)

    def getX(self):
        """getX(FloatRect self) -> float"""
        return _fife.FloatRect_getX(self)

    def getY(self):
        """getY(FloatRect self) -> float"""
        return _fife.FloatRect_getY(self)

    def setX(self, *args):
        """setX(FloatRect self, float _x)"""
        return _fife.FloatRect_setX(self, *args)

    def setY(self, *args):
        """setY(FloatRect self, float _y)"""
        return _fife.FloatRect_setY(self, *args)

    def getW(self):
        """getW(FloatRect self) -> float"""
        return _fife.FloatRect_getW(self)

    def getH(self):
        """getH(FloatRect self) -> float"""
        return _fife.FloatRect_getH(self)

    def setW(self, *args):
        """setW(FloatRect self, float _w)"""
        return _fife.FloatRect_setW(self, *args)

    def setH(self, *args):
        """setH(FloatRect self, float _h)"""
        return _fife.FloatRect_setH(self, *args)

    def __str__(self):
        """__str__(FloatRect self) -> std::string"""
        return _fife.FloatRect___str__(self)

    __swig_destroy__ = _fife.delete_FloatRect
    __del__ = lambda self : None;
FloatRect_swigregister = _fife.FloatRect_swigregister
FloatRect_swigregister(FloatRect)

class DoubleRect(_object):
    """Proxy of C++ FIFE::RectType<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.DoubleRect_x_set
    __swig_getmethods__["x"] = _fife.DoubleRect_x_get
    if _newclass:x = _swig_property(_fife.DoubleRect_x_get, _fife.DoubleRect_x_set)
    __swig_setmethods__["y"] = _fife.DoubleRect_y_set
    __swig_getmethods__["y"] = _fife.DoubleRect_y_get
    if _newclass:y = _swig_property(_fife.DoubleRect_y_get, _fife.DoubleRect_y_set)
    __swig_setmethods__["w"] = _fife.DoubleRect_w_set
    __swig_getmethods__["w"] = _fife.DoubleRect_w_get
    if _newclass:w = _swig_property(_fife.DoubleRect_w_get, _fife.DoubleRect_w_set)
    __swig_setmethods__["h"] = _fife.DoubleRect_h_set
    __swig_getmethods__["h"] = _fife.DoubleRect_h_get
    if _newclass:h = _swig_property(_fife.DoubleRect_h_get, _fife.DoubleRect_h_set)
    def __init__(self, x=0, y=0, width=0, height=0): 
        """
        __init__(FIFE::RectType<(double)> self, double x=0, double y=0, double width=0, double height=0) -> DoubleRect
        __init__(FIFE::RectType<(double)> self, double x=0, double y=0, double width=0) -> DoubleRect
        __init__(FIFE::RectType<(double)> self, double x=0, double y=0) -> DoubleRect
        __init__(FIFE::RectType<(double)> self, double x=0) -> DoubleRect
        __init__(FIFE::RectType<(double)> self) -> DoubleRect
        """
        this = _fife.new_DoubleRect(x, y, width, height)
        try: self.this.append(this)
        except: self.this = this
    def right(self):
        """right(DoubleRect self) -> double"""
        return _fife.DoubleRect_right(self)

    def bottom(self):
        """bottom(DoubleRect self) -> double"""
        return _fife.DoubleRect_bottom(self)

    def __eq__(self, *args):
        """__eq__(DoubleRect self, DoubleRect rect) -> bool"""
        return _fife.DoubleRect___eq__(self, *args)

    def contains(self, *args):
        """contains(DoubleRect self, DoublePoint point) -> bool"""
        return _fife.DoubleRect_contains(self, *args)

    def intersects(self, *args):
        """intersects(DoubleRect self, DoubleRect rect) -> bool"""
        return _fife.DoubleRect_intersects(self, *args)

    def intersectInplace(self, *args):
        """intersectInplace(DoubleRect self, DoubleRect rect) -> bool"""
        return _fife.DoubleRect_intersectInplace(self, *args)

    def getX(self):
        """getX(DoubleRect self) -> double"""
        return _fife.DoubleRect_getX(self)

    def getY(self):
        """getY(DoubleRect self) -> double"""
        return _fife.DoubleRect_getY(self)

    def setX(self, *args):
        """setX(DoubleRect self, double _x)"""
        return _fife.DoubleRect_setX(self, *args)

    def setY(self, *args):
        """setY(DoubleRect self, double _y)"""
        return _fife.DoubleRect_setY(self, *args)

    def getW(self):
        """getW(DoubleRect self) -> double"""
        return _fife.DoubleRect_getW(self)

    def getH(self):
        """getH(DoubleRect self) -> double"""
        return _fife.DoubleRect_getH(self)

    def setW(self, *args):
        """setW(DoubleRect self, double _w)"""
        return _fife.DoubleRect_setW(self, *args)

    def setH(self, *args):
        """setH(DoubleRect self, double _h)"""
        return _fife.DoubleRect_setH(self, *args)

    def __str__(self):
        """__str__(DoubleRect self) -> std::string"""
        return _fife.DoubleRect___str__(self)

    __swig_destroy__ = _fife.delete_DoubleRect
    __del__ = lambda self : None;
DoubleRect_swigregister = _fife.DoubleRect_swigregister
DoubleRect_swigregister(DoubleRect)

class ScreenModeVector(_object):
    """Proxy of C++ std::vector<(FIFE::ScreenMode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenModeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenModeVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ScreenModeVector self) -> SwigPyIterator"""
        return _fife.ScreenModeVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ScreenModeVector self) -> bool"""
        return _fife.ScreenModeVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ScreenModeVector self) -> bool"""
        return _fife.ScreenModeVector___bool__(self)

    def __len__(self):
        """__len__(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::size_type"""
        return _fife.ScreenModeVector___len__(self)

    def pop(self):
        """pop(ScreenModeVector self) -> ScreenMode"""
        return _fife.ScreenModeVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i, std::vector< FIFE::ScreenMode >::difference_type j) -> ScreenModeVector"""
        return _fife.ScreenModeVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i, std::vector< FIFE::ScreenMode >::difference_type j, 
            ScreenModeVector v=std::vector< FIFE::ScreenMode,std::allocator< FIFE::ScreenMode > >())
        __setslice__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i, std::vector< FIFE::ScreenMode >::difference_type j)
        """
        return _fife.ScreenModeVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i, std::vector< FIFE::ScreenMode >::difference_type j)"""
        return _fife.ScreenModeVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i)
        __delitem__(ScreenModeVector self, PySliceObject * slice)
        """
        return _fife.ScreenModeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ScreenModeVector self, PySliceObject * slice) -> ScreenModeVector
        __getitem__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i) -> ScreenMode
        """
        return _fife.ScreenModeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ScreenModeVector self, PySliceObject * slice, ScreenModeVector v)
        __setitem__(ScreenModeVector self, PySliceObject * slice)
        __setitem__(ScreenModeVector self, std::vector< FIFE::ScreenMode >::difference_type i, ScreenMode x)
        """
        return _fife.ScreenModeVector___setitem__(self, *args)

    def append(self, *args):
        """append(ScreenModeVector self, ScreenMode x)"""
        return _fife.ScreenModeVector_append(self, *args)

    def empty(self):
        """empty(ScreenModeVector self) -> bool"""
        return _fife.ScreenModeVector_empty(self)

    def size(self):
        """size(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::size_type"""
        return _fife.ScreenModeVector_size(self)

    def clear(self):
        """clear(ScreenModeVector self)"""
        return _fife.ScreenModeVector_clear(self)

    def swap(self, *args):
        """swap(ScreenModeVector self, ScreenModeVector v)"""
        return _fife.ScreenModeVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::allocator_type"""
        return _fife.ScreenModeVector_get_allocator(self)

    def begin(self):
        """begin(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::iterator"""
        return _fife.ScreenModeVector_begin(self)

    def end(self):
        """end(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::iterator"""
        return _fife.ScreenModeVector_end(self)

    def rbegin(self):
        """rbegin(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::reverse_iterator"""
        return _fife.ScreenModeVector_rbegin(self)

    def rend(self):
        """rend(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::reverse_iterator"""
        return _fife.ScreenModeVector_rend(self)

    def pop_back(self):
        """pop_back(ScreenModeVector self)"""
        return _fife.ScreenModeVector_pop_back(self)

    def erase(self, *args):
        """
        erase(ScreenModeVector self, std::vector< FIFE::ScreenMode >::iterator pos) -> std::vector< FIFE::ScreenMode >::iterator
        erase(ScreenModeVector self, std::vector< FIFE::ScreenMode >::iterator first, std::vector< FIFE::ScreenMode >::iterator last) -> std::vector< FIFE::ScreenMode >::iterator
        """
        return _fife.ScreenModeVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(FIFE::ScreenMode)> self) -> ScreenModeVector
        __init__(std::vector<(FIFE::ScreenMode)> self, ScreenModeVector arg2) -> ScreenModeVector
        __init__(std::vector<(FIFE::ScreenMode)> self, std::vector< FIFE::ScreenMode >::size_type size) -> ScreenModeVector
        __init__(std::vector<(FIFE::ScreenMode)> self, std::vector< FIFE::ScreenMode >::size_type size, ScreenMode value) -> ScreenModeVector
        """
        this = _fife.new_ScreenModeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ScreenModeVector self, ScreenMode x)"""
        return _fife.ScreenModeVector_push_back(self, *args)

    def front(self):
        """front(ScreenModeVector self) -> ScreenMode"""
        return _fife.ScreenModeVector_front(self)

    def back(self):
        """back(ScreenModeVector self) -> ScreenMode"""
        return _fife.ScreenModeVector_back(self)

    def assign(self, *args):
        """assign(ScreenModeVector self, std::vector< FIFE::ScreenMode >::size_type n, ScreenMode x)"""
        return _fife.ScreenModeVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(ScreenModeVector self, std::vector< FIFE::ScreenMode >::size_type new_size)
        resize(ScreenModeVector self, std::vector< FIFE::ScreenMode >::size_type new_size, ScreenMode x)
        """
        return _fife.ScreenModeVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(ScreenModeVector self, std::vector< FIFE::ScreenMode >::iterator pos, ScreenMode x) -> std::vector< FIFE::ScreenMode >::iterator
        insert(ScreenModeVector self, std::vector< FIFE::ScreenMode >::iterator pos, std::vector< FIFE::ScreenMode >::size_type n, 
            ScreenMode x)
        """
        return _fife.ScreenModeVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(ScreenModeVector self, std::vector< FIFE::ScreenMode >::size_type n)"""
        return _fife.ScreenModeVector_reserve(self, *args)

    def capacity(self):
        """capacity(ScreenModeVector self) -> std::vector< FIFE::ScreenMode >::size_type"""
        return _fife.ScreenModeVector_capacity(self)

    __swig_destroy__ = _fife.delete_ScreenModeVector
    __del__ = lambda self : None;
ScreenModeVector_swigregister = _fife.ScreenModeVector_swigregister
ScreenModeVector_swigregister(ScreenModeVector)

class Image(IResource):
    """Proxy of C++ FIFE::Image class"""
    __swig_setmethods__ = {}
    for _s in [IResource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [IResource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_Image
    __del__ = lambda self : None;
    def getSurface(self):
        """getSurface(Image self) -> SDL_Surface *"""
        return _fife.Image_getSurface(self)

    def getWidth(self):
        """getWidth(Image self) -> uint32_t"""
        return _fife.Image_getWidth(self)

    def getHeight(self):
        """getHeight(Image self) -> uint32_t"""
        return _fife.Image_getHeight(self)

    def getArea(self):
        """getArea(Image self) -> Rect"""
        return _fife.Image_getArea(self)

    def setXShift(self, *args):
        """setXShift(Image self, int32_t xshift)"""
        return _fife.Image_setXShift(self, *args)

    def getXShift(self):
        """getXShift(Image self) -> int32_t"""
        return _fife.Image_getXShift(self)

    def setYShift(self, *args):
        """setYShift(Image self, int32_t yshift)"""
        return _fife.Image_setYShift(self, *args)

    def getYShift(self):
        """getYShift(Image self) -> int32_t"""
        return _fife.Image_getYShift(self)

    def getPixelRGBA(self, *args):
        """getPixelRGBA(Image self, int32_t x, int32_t y)"""
        return _fife.Image_getPixelRGBA(self, *args)

    def saveImage(self, *args):
        """saveImage(Image self, std::string const & filename)"""
        return _fife.Image_saveImage(self, *args)

    def useSharedImage(self, *args):
        """useSharedImage(Image self, SharedImagePointer shared, Rect region)"""
        return _fife.Image_useSharedImage(self, *args)

    def forceLoadInternal(self):
        """forceLoadInternal(Image self)"""
        return _fife.Image_forceLoadInternal(self)

    def isSharedImage(self):
        """isSharedImage(Image self) -> bool"""
        return _fife.Image_isSharedImage(self)

    def getSubImageRect(self):
        """getSubImageRect(Image self) -> Rect"""
        return _fife.Image_getSubImageRect(self)

    def copySubimage(self, *args):
        """copySubimage(Image self, uint32_t xoffset, uint32_t yoffset, SharedImagePointer img)"""
        return _fife.Image_copySubimage(self, *args)

Image_swigregister = _fife.Image_swigregister
Image_swigregister(Image)

class SharedImagePointer(_object):
    """Proxy of C++ FIFE::SharedPtr<(FIFE::Image)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedImagePointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedImagePointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::SharedPtr<(FIFE::Image)> self) -> SharedImagePointer
        __init__(FIFE::SharedPtr<(FIFE::Image)> self, SharedImagePointer rhs) -> SharedImagePointer
        """
        this = _fife.new_SharedImagePointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SharedImagePointer
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(SharedImagePointer self) -> Image"""
        return _fife.SharedImagePointer___ref__(self)

    def __deref__(self):
        """__deref__(SharedImagePointer self) -> Image"""
        return _fife.SharedImagePointer___deref__(self)

    def get(self):
        """get(SharedImagePointer self) -> Image"""
        return _fife.SharedImagePointer_get(self)

    def reset(self, ptr=None):
        """
        reset(SharedImagePointer self, Image ptr=None)
        reset(SharedImagePointer self)
        """
        return _fife.SharedImagePointer_reset(self, ptr)

    def useCount(self):
        """useCount(SharedImagePointer self) -> uint32_t"""
        return _fife.SharedImagePointer_useCount(self)

    def useCountPtr(self):
        """useCountPtr(SharedImagePointer self) -> uint32_t *"""
        return _fife.SharedImagePointer_useCountPtr(self)

    def unique(self):
        """unique(SharedImagePointer self) -> bool"""
        return _fife.SharedImagePointer_unique(self)

    def __nonzero__(self):
        return _fife.SharedImagePointer___nonzero__(self)
    __bool__ = __nonzero__


    def getSurface(self):
        """getSurface(SharedImagePointer self) -> SDL_Surface *"""
        return _fife.SharedImagePointer_getSurface(self)

    def getWidth(self):
        """getWidth(SharedImagePointer self) -> uint32_t"""
        return _fife.SharedImagePointer_getWidth(self)

    def getHeight(self):
        """getHeight(SharedImagePointer self) -> uint32_t"""
        return _fife.SharedImagePointer_getHeight(self)

    def getArea(self):
        """getArea(SharedImagePointer self) -> Rect"""
        return _fife.SharedImagePointer_getArea(self)

    def setXShift(self, *args):
        """setXShift(SharedImagePointer self, int32_t xshift)"""
        return _fife.SharedImagePointer_setXShift(self, *args)

    def getXShift(self):
        """getXShift(SharedImagePointer self) -> int32_t"""
        return _fife.SharedImagePointer_getXShift(self)

    def setYShift(self, *args):
        """setYShift(SharedImagePointer self, int32_t yshift)"""
        return _fife.SharedImagePointer_setYShift(self, *args)

    def getYShift(self):
        """getYShift(SharedImagePointer self) -> int32_t"""
        return _fife.SharedImagePointer_getYShift(self)

    def getPixelRGBA(self, *args):
        """getPixelRGBA(SharedImagePointer self, int32_t x, int32_t y)"""
        return _fife.SharedImagePointer_getPixelRGBA(self, *args)

    def saveImage(self, *args):
        """saveImage(SharedImagePointer self, std::string const & filename)"""
        return _fife.SharedImagePointer_saveImage(self, *args)

    def useSharedImage(self, *args):
        """useSharedImage(SharedImagePointer self, SharedImagePointer shared, Rect region)"""
        return _fife.SharedImagePointer_useSharedImage(self, *args)

    def forceLoadInternal(self):
        """forceLoadInternal(SharedImagePointer self)"""
        return _fife.SharedImagePointer_forceLoadInternal(self)

    def isSharedImage(self):
        """isSharedImage(SharedImagePointer self) -> bool"""
        return _fife.SharedImagePointer_isSharedImage(self)

    def getSubImageRect(self):
        """getSubImageRect(SharedImagePointer self) -> Rect"""
        return _fife.SharedImagePointer_getSubImageRect(self)

    def copySubimage(self, *args):
        """copySubimage(SharedImagePointer self, uint32_t xoffset, uint32_t yoffset, SharedImagePointer img)"""
        return _fife.SharedImagePointer_copySubimage(self, *args)

    def getName(self):
        """getName(SharedImagePointer self) -> std::string const &"""
        return _fife.SharedImagePointer_getName(self)

    def getHandle(self):
        """getHandle(SharedImagePointer self) -> FIFE::ResourceHandle"""
        return _fife.SharedImagePointer_getHandle(self)

    def getState(self):
        """getState(SharedImagePointer self) -> FIFE::IResource::ResourceState"""
        return _fife.SharedImagePointer_getState(self)

    def setState(self, *args):
        """setState(SharedImagePointer self, FIFE::IResource::ResourceState const & state)"""
        return _fife.SharedImagePointer_setState(self, *args)

    def getSize(self):
        """getSize(SharedImagePointer self) -> size_t"""
        return _fife.SharedImagePointer_getSize(self)

    def load(self):
        """load(SharedImagePointer self)"""
        return _fife.SharedImagePointer_load(self)

    def free(self):
        """free(SharedImagePointer self)"""
        return _fife.SharedImagePointer_free(self)

SharedImagePointer_swigregister = _fife.SharedImagePointer_swigregister
SharedImagePointer_swigregister(SharedImagePointer)

class ImageManager(IResourceManager):
    """Proxy of C++ FIFE::ImageManager class"""
    __swig_setmethods__ = {}
    for _s in [IResourceManager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageManager, name, value)
    __swig_getmethods__ = {}
    for _s in [IResourceManager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageManager, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_ImageManager
    __del__ = lambda self : None;
    def getMemoryUsed(self):
        """getMemoryUsed(ImageManager self) -> size_t"""
        return _fife.ImageManager_getMemoryUsed(self)

    def getTotalResourcesCreated(self):
        """getTotalResourcesCreated(ImageManager self) -> size_t"""
        return _fife.ImageManager_getTotalResourcesCreated(self)

    def getTotalResourcesLoaded(self):
        """getTotalResourcesLoaded(ImageManager self) -> size_t"""
        return _fife.ImageManager_getTotalResourcesLoaded(self)

    def getTotalResources(self):
        """getTotalResources(ImageManager self) -> size_t"""
        return _fife.ImageManager_getTotalResources(self)

    def create(self, *args):
        """
        create(ImageManager self, std::string const & name, IResourceLoader loader=None) -> SharedImagePointer
        create(ImageManager self, std::string const & name) -> SharedImagePointer
        """
        return _fife.ImageManager_create(self, *args)

    def load(self, *args):
        """
        load(ImageManager self, std::string const & name, IResourceLoader loader=None) -> SharedImagePointer
        load(ImageManager self, std::string const & name) -> SharedImagePointer
        """
        return _fife.ImageManager_load(self, *args)

    def loadBlank(self, *args):
        """loadBlank(ImageManager self, uint32_t width, uint32_t height) -> SharedImagePointer"""
        return _fife.ImageManager_loadBlank(self, *args)

    def add(self, *args):
        """add(ImageManager self, Image res) -> SharedImagePointer"""
        return _fife.ImageManager_add(self, *args)

    def exists(self, *args):
        """
        exists(ImageManager self, std::string const & name) -> bool
        exists(ImageManager self, FIFE::ResourceHandle handle) -> bool
        """
        return _fife.ImageManager_exists(self, *args)

    def reload(self, *args):
        """
        reload(ImageManager self, std::string const & name)
        reload(ImageManager self, FIFE::ResourceHandle handle)
        """
        return _fife.ImageManager_reload(self, *args)

    def reloadAll(self):
        """reloadAll(ImageManager self)"""
        return _fife.ImageManager_reloadAll(self)

    def loadUnreferenced(self):
        """loadUnreferenced(ImageManager self)"""
        return _fife.ImageManager_loadUnreferenced(self)

    def free(self, *args):
        """
        free(ImageManager self, std::string const & name)
        free(ImageManager self, FIFE::ResourceHandle handle)
        """
        return _fife.ImageManager_free(self, *args)

    def freeAll(self):
        """freeAll(ImageManager self)"""
        return _fife.ImageManager_freeAll(self)

    def freeUnreferenced(self):
        """freeUnreferenced(ImageManager self)"""
        return _fife.ImageManager_freeUnreferenced(self)

    def remove(self, *args):
        """
        remove(ImageManager self, SharedImagePointer resource)
        remove(ImageManager self, std::string const & name)
        remove(ImageManager self, FIFE::ResourceHandle handle)
        """
        return _fife.ImageManager_remove(self, *args)

    def removeAll(self):
        """removeAll(ImageManager self)"""
        return _fife.ImageManager_removeAll(self)

    def removeUnreferenced(self):
        """removeUnreferenced(ImageManager self)"""
        return _fife.ImageManager_removeUnreferenced(self)

    def get(self, *args):
        """
        get(ImageManager self, std::string const & name) -> SharedImagePointer
        get(ImageManager self, FIFE::ResourceHandle handle) -> SharedImagePointer
        """
        return _fife.ImageManager_get(self, *args)

    def getResourceHandle(self, *args):
        """getResourceHandle(ImageManager self, std::string const & name) -> FIFE::ResourceHandle"""
        return _fife.ImageManager_getResourceHandle(self, *args)

    def invalidate(self, *args):
        """
        invalidate(ImageManager self, std::string const & name)
        invalidate(ImageManager self, FIFE::ResourceHandle handle)
        """
        return _fife.ImageManager_invalidate(self, *args)

    def invalidateAll(self):
        """invalidateAll(ImageManager self)"""
        return _fife.ImageManager_invalidateAll(self)

    def __init__(self): 
        """__init__(FIFE::ImageManager self) -> ImageManager"""
        this = _fife.new_ImageManager()
        try: self.this.append(this)
        except: self.this = this
ImageManager_swigregister = _fife.ImageManager_swigregister
ImageManager_swigregister(ImageManager)

class Animation(FifeClass):
    """Proxy of C++ FIFE::Animation class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Animation, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Animation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::Animation self) -> Animation"""
        this = _fife.new_Animation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Animation
    __del__ = lambda self : None;
    def addFrame(self, *args):
        """addFrame(Animation self, SharedImagePointer image, uint32_t duration)"""
        return _fife.Animation_addFrame(self, *args)

    def getFrameIndex(self, *args):
        """getFrameIndex(Animation self, uint32_t timestamp) -> int32_t"""
        return _fife.Animation_getFrameIndex(self, *args)

    def getFrame(self, *args):
        """getFrame(Animation self, int32_t index) -> SharedImagePointer"""
        return _fife.Animation_getFrame(self, *args)

    def getFrameByTimestamp(self, *args):
        """getFrameByTimestamp(Animation self, uint32_t timestamp) -> SharedImagePointer"""
        return _fife.Animation_getFrameByTimestamp(self, *args)

    def getFrameDuration(self, *args):
        """getFrameDuration(Animation self, int32_t index) -> int32_t"""
        return _fife.Animation_getFrameDuration(self, *args)

    def getFrameCount(self):
        """getFrameCount(Animation self) -> uint32_t"""
        return _fife.Animation_getFrameCount(self)

    def setActionFrame(self, *args):
        """setActionFrame(Animation self, int32_t num)"""
        return _fife.Animation_setActionFrame(self, *args)

    def getActionFrame(self):
        """getActionFrame(Animation self) -> int32_t"""
        return _fife.Animation_getActionFrame(self)

    def setDirection(self, *args):
        """setDirection(Animation self, uint32_t direction)"""
        return _fife.Animation_setDirection(self, *args)

    def getDirection(self):
        """getDirection(Animation self) -> uint32_t"""
        return _fife.Animation_getDirection(self)

    def getDuration(self):
        """getDuration(Animation self) -> int32_t"""
        return _fife.Animation_getDuration(self)

    def createAnimation():
        """createAnimation() -> SharedAnimationPointer"""
        return _fife.Animation_createAnimation()

    if _newclass:createAnimation = staticmethod(createAnimation)
    __swig_getmethods__["createAnimation"] = lambda x: createAnimation
Animation_swigregister = _fife.Animation_swigregister
Animation_swigregister(Animation)

def Animation_createAnimation():
  """Animation_createAnimation() -> SharedAnimationPointer"""
  return _fife.Animation_createAnimation()

class SharedAnimationPointer(_object):
    """Proxy of C++ FIFE::SharedPtr<(FIFE::Animation)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedAnimationPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedAnimationPointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::SharedPtr<(FIFE::Animation)> self) -> SharedAnimationPointer
        __init__(FIFE::SharedPtr<(FIFE::Animation)> self, SharedAnimationPointer rhs) -> SharedAnimationPointer
        """
        this = _fife.new_SharedAnimationPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SharedAnimationPointer
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(SharedAnimationPointer self) -> Animation"""
        return _fife.SharedAnimationPointer___ref__(self)

    def __deref__(self):
        """__deref__(SharedAnimationPointer self) -> Animation"""
        return _fife.SharedAnimationPointer___deref__(self)

    def get(self):
        """get(SharedAnimationPointer self) -> Animation"""
        return _fife.SharedAnimationPointer_get(self)

    def reset(self, ptr=None):
        """
        reset(SharedAnimationPointer self, Animation ptr=None)
        reset(SharedAnimationPointer self)
        """
        return _fife.SharedAnimationPointer_reset(self, ptr)

    def useCount(self):
        """useCount(SharedAnimationPointer self) -> uint32_t"""
        return _fife.SharedAnimationPointer_useCount(self)

    def useCountPtr(self):
        """useCountPtr(SharedAnimationPointer self) -> uint32_t *"""
        return _fife.SharedAnimationPointer_useCountPtr(self)

    def unique(self):
        """unique(SharedAnimationPointer self) -> bool"""
        return _fife.SharedAnimationPointer_unique(self)

    def __nonzero__(self):
        return _fife.SharedAnimationPointer___nonzero__(self)
    __bool__ = __nonzero__


    def addFrame(self, *args):
        """addFrame(SharedAnimationPointer self, SharedImagePointer image, uint32_t duration)"""
        return _fife.SharedAnimationPointer_addFrame(self, *args)

    def getFrameIndex(self, *args):
        """getFrameIndex(SharedAnimationPointer self, uint32_t timestamp) -> int32_t"""
        return _fife.SharedAnimationPointer_getFrameIndex(self, *args)

    def getFrame(self, *args):
        """getFrame(SharedAnimationPointer self, int32_t index) -> SharedImagePointer"""
        return _fife.SharedAnimationPointer_getFrame(self, *args)

    def getFrameByTimestamp(self, *args):
        """getFrameByTimestamp(SharedAnimationPointer self, uint32_t timestamp) -> SharedImagePointer"""
        return _fife.SharedAnimationPointer_getFrameByTimestamp(self, *args)

    def getFrameDuration(self, *args):
        """getFrameDuration(SharedAnimationPointer self, int32_t index) -> int32_t"""
        return _fife.SharedAnimationPointer_getFrameDuration(self, *args)

    def getFrameCount(self):
        """getFrameCount(SharedAnimationPointer self) -> uint32_t"""
        return _fife.SharedAnimationPointer_getFrameCount(self)

    def setActionFrame(self, *args):
        """setActionFrame(SharedAnimationPointer self, int32_t num)"""
        return _fife.SharedAnimationPointer_setActionFrame(self, *args)

    def getActionFrame(self):
        """getActionFrame(SharedAnimationPointer self) -> int32_t"""
        return _fife.SharedAnimationPointer_getActionFrame(self)

    def setDirection(self, *args):
        """setDirection(SharedAnimationPointer self, uint32_t direction)"""
        return _fife.SharedAnimationPointer_setDirection(self, *args)

    def getDirection(self):
        """getDirection(SharedAnimationPointer self) -> uint32_t"""
        return _fife.SharedAnimationPointer_getDirection(self)

    def getDuration(self):
        """getDuration(SharedAnimationPointer self) -> int32_t"""
        return _fife.SharedAnimationPointer_getDuration(self)

    def createAnimation(self):
        """createAnimation(SharedAnimationPointer self) -> SharedAnimationPointer"""
        return _fife.SharedAnimationPointer_createAnimation(self)

    def getFifeId(self):
        """getFifeId(SharedAnimationPointer self) -> FIFE::fifeid_t"""
        return _fife.SharedAnimationPointer_getFifeId(self)

SharedAnimationPointer_swigregister = _fife.SharedAnimationPointer_swigregister
SharedAnimationPointer_swigregister(SharedAnimationPointer)

TEXTURE_FILTER_NONE = _fife.TEXTURE_FILTER_NONE
TEXTURE_FILTER_BILINEAR = _fife.TEXTURE_FILTER_BILINEAR
TEXTURE_FILTER_TRILINEAR = _fife.TEXTURE_FILTER_TRILINEAR
TEXTURE_FILTER_ANISOTROPIC = _fife.TEXTURE_FILTER_ANISOTROPIC
class RenderBackend(_object):
    """Proxy of C++ FIFE::RenderBackend class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderBackend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderBackend, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_RenderBackend
    __del__ = lambda self : None;
    def getName(self):
        """getName(RenderBackend self) -> std::string const &"""
        return _fife.RenderBackend_getName(self)

    def captureScreen(self, *args):
        """
        captureScreen(RenderBackend self, std::string const & filename)
        captureScreen(RenderBackend self, std::string const & filename, uint32_t width, uint32_t height)
        """
        return _fife.RenderBackend_captureScreen(self, *args)

    def getCurrentScreenMode(self):
        """getCurrentScreenMode(RenderBackend self) -> ScreenMode"""
        return _fife.RenderBackend_getCurrentScreenMode(self)

    def getWidth(self):
        """getWidth(RenderBackend self) -> uint32_t"""
        return _fife.RenderBackend_getWidth(self)

    def getHeight(self):
        """getHeight(RenderBackend self) -> uint32_t"""
        return _fife.RenderBackend_getHeight(self)

    def getScreenWidth(self):
        """getScreenWidth(RenderBackend self) -> uint32_t"""
        return _fife.RenderBackend_getScreenWidth(self)

    def getScreenHeight(self):
        """getScreenHeight(RenderBackend self) -> uint32_t"""
        return _fife.RenderBackend_getScreenHeight(self)

    def getArea(self):
        """getArea(RenderBackend self) -> Rect"""
        return _fife.RenderBackend_getArea(self)

    def getClipArea(self):
        """getClipArea(RenderBackend self) -> Rect"""
        return _fife.RenderBackend_getClipArea(self)

    def setAlphaOptimizerEnabled(self, *args):
        """setAlphaOptimizerEnabled(RenderBackend self, bool enabled)"""
        return _fife.RenderBackend_setAlphaOptimizerEnabled(self, *args)

    def isAlphaOptimizerEnabled(self):
        """isAlphaOptimizerEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isAlphaOptimizerEnabled(self)

    def setImageCompressingEnabled(self, *args):
        """setImageCompressingEnabled(RenderBackend self, bool enabled)"""
        return _fife.RenderBackend_setImageCompressingEnabled(self, *args)

    def isImageCompressingEnabled(self):
        """isImageCompressingEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isImageCompressingEnabled(self)

    def setFramebufferEnabled(self, *args):
        """setFramebufferEnabled(RenderBackend self, bool enabled)"""
        return _fife.RenderBackend_setFramebufferEnabled(self, *args)

    def isFramebufferEnabled(self):
        """isFramebufferEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isFramebufferEnabled(self)

    def setNPOTEnabled(self, *args):
        """setNPOTEnabled(RenderBackend self, bool enabled)"""
        return _fife.RenderBackend_setNPOTEnabled(self, *args)

    def isNPOTEnabled(self):
        """isNPOTEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isNPOTEnabled(self)

    def setTextureFiltering(self, *args):
        """setTextureFiltering(RenderBackend self, FIFE::TextureFiltering filter)"""
        return _fife.RenderBackend_setTextureFiltering(self, *args)

    def getTextureFiltering(self):
        """getTextureFiltering(RenderBackend self) -> FIFE::TextureFiltering"""
        return _fife.RenderBackend_getTextureFiltering(self)

    def setMipmappingEnabled(self, *args):
        """setMipmappingEnabled(RenderBackend self, bool enabled)"""
        return _fife.RenderBackend_setMipmappingEnabled(self, *args)

    def isMipmappingEnabled(self):
        """isMipmappingEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isMipmappingEnabled(self)

    def setMonochromeEnabled(self, *args):
        """setMonochromeEnabled(RenderBackend self, bool enabled)"""
        return _fife.RenderBackend_setMonochromeEnabled(self, *args)

    def isMonochromeEnabled(self):
        """isMonochromeEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isMonochromeEnabled(self)

    def setColorKeyEnabled(self, *args):
        """setColorKeyEnabled(RenderBackend self, bool colorkeyenable)"""
        return _fife.RenderBackend_setColorKeyEnabled(self, *args)

    def isColorKeyEnabled(self):
        """isColorKeyEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isColorKeyEnabled(self)

    def setColorKey(self, *args):
        """setColorKey(RenderBackend self, SDL_Color const & colorkey)"""
        return _fife.RenderBackend_setColorKey(self, *args)

    def getColorKey(self):
        """getColorKey(RenderBackend self) -> SDL_Color const &"""
        return _fife.RenderBackend_getColorKey(self)

    def getPixelFormat(self):
        """getPixelFormat(RenderBackend self) -> SDL_PixelFormat const &"""
        return _fife.RenderBackend_getPixelFormat(self)

    def setBackgroundColor(self, *args):
        """setBackgroundColor(RenderBackend self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.RenderBackend_setBackgroundColor(self, *args)

    def resetBackgroundColor(self):
        """resetBackgroundColor(RenderBackend self)"""
        return _fife.RenderBackend_resetBackgroundColor(self)

    def setFrameLimitEnabled(self, *args):
        """setFrameLimitEnabled(RenderBackend self, bool limited)"""
        return _fife.RenderBackend_setFrameLimitEnabled(self, *args)

    def isFrameLimitEnabled(self):
        """isFrameLimitEnabled(RenderBackend self) -> bool"""
        return _fife.RenderBackend_isFrameLimitEnabled(self)

    def setFrameLimit(self, *args):
        """setFrameLimit(RenderBackend self, uint16_t framelimit)"""
        return _fife.RenderBackend_setFrameLimit(self, *args)

    def getFrameLimit(self):
        """getFrameLimit(RenderBackend self) -> uint16_t"""
        return _fife.RenderBackend_getFrameLimit(self)

RenderBackend_swigregister = _fife.RenderBackend_swigregister
RenderBackend_swigregister(RenderBackend)

CURSOR_NONE = _fife.CURSOR_NONE
CURSOR_NATIVE = _fife.CURSOR_NATIVE
CURSOR_IMAGE = _fife.CURSOR_IMAGE
CURSOR_ANIMATION = _fife.CURSOR_ANIMATION
NC_ARROW = _fife.NC_ARROW
NC_IBEAM = _fife.NC_IBEAM
NC_WAIT = _fife.NC_WAIT
NC_CROSS = _fife.NC_CROSS
NC_UPARROW = _fife.NC_UPARROW
NC_RESIZENW = _fife.NC_RESIZENW
NC_RESIZESE = _fife.NC_RESIZESE
NC_RESIZESW = _fife.NC_RESIZESW
NC_RESIZENE = _fife.NC_RESIZENE
NC_RESIZEE = _fife.NC_RESIZEE
NC_RESIZEW = _fife.NC_RESIZEW
NC_RESIZEN = _fife.NC_RESIZEN
NC_RESIZES = _fife.NC_RESIZES
NC_RESIZEALL = _fife.NC_RESIZEALL
NC_NO = _fife.NC_NO
NC_HAND = _fife.NC_HAND
NC_APPSTARTING = _fife.NC_APPSTARTING
NC_HELP = _fife.NC_HELP
class Cursor(_object):
    """Proxy of C++ FIFE::Cursor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cursor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_Cursor
    __del__ = lambda self : None;
    def draw(self):
        """draw(Cursor self)"""
        return _fife.Cursor_draw(self)

    def set(self, *args):
        """
        set(Cursor self, uint32_t cursor_id=0)
        set(Cursor self)
        set(Cursor self, SharedAnimationPointer anim)
        set(Cursor self, SharedImagePointer image)
        """
        return _fife.Cursor_set(self, *args)

    def setDrag(self, *args):
        """
        setDrag(Cursor self, SharedAnimationPointer anim, int32_t drag_offset_x=0, int32_t drag_offset_y=0)
        setDrag(Cursor self, SharedAnimationPointer anim, int32_t drag_offset_x=0)
        setDrag(Cursor self, SharedAnimationPointer anim)
        setDrag(Cursor self, SharedImagePointer image, int32_t drag_offset_x=0, int32_t drag_offset_y=0)
        setDrag(Cursor self, SharedImagePointer image, int32_t drag_offset_x=0)
        setDrag(Cursor self, SharedImagePointer image)
        """
        return _fife.Cursor_setDrag(self, *args)

    def resetDrag(self):
        """resetDrag(Cursor self)"""
        return _fife.Cursor_resetDrag(self)

    def getType(self):
        """getType(Cursor self) -> FIFE::MouseCursorType"""
        return _fife.Cursor_getType(self)

    def getId(self):
        """getId(Cursor self) -> uint32_t"""
        return _fife.Cursor_getId(self)

    def getImage(self):
        """getImage(Cursor self) -> SharedImagePointer"""
        return _fife.Cursor_getImage(self)

    def getAnimation(self):
        """getAnimation(Cursor self) -> SharedAnimationPointer"""
        return _fife.Cursor_getAnimation(self)

    def getDragType(self):
        """getDragType(Cursor self) -> FIFE::MouseCursorType"""
        return _fife.Cursor_getDragType(self)

    def getDragImage(self):
        """getDragImage(Cursor self) -> SharedImagePointer"""
        return _fife.Cursor_getDragImage(self)

    def getDragAnimation(self):
        """getDragAnimation(Cursor self) -> SharedAnimationPointer"""
        return _fife.Cursor_getDragAnimation(self)

    def getX(self):
        """getX(Cursor self) -> uint32_t"""
        return _fife.Cursor_getX(self)

    def getY(self):
        """getY(Cursor self) -> uint32_t"""
        return _fife.Cursor_getY(self)

    def setPosition(self, *args):
        """setPosition(Cursor self, uint32_t x, uint32_t y)"""
        return _fife.Cursor_setPosition(self, *args)

    def getPosition(self):
        """getPosition(Cursor self)"""
        return _fife.Cursor_getPosition(self)

Cursor_swigregister = _fife.Cursor_swigregister
Cursor_swigregister(Cursor)

class ScreenMode(_object):
    """Proxy of C++ FIFE::ScreenMode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenMode, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_ScreenMode
    __del__ = lambda self : None;
    def getWidth(self):
        """getWidth(ScreenMode self) -> uint16_t"""
        return _fife.ScreenMode_getWidth(self)

    def getHeight(self):
        """getHeight(ScreenMode self) -> uint16_t"""
        return _fife.ScreenMode_getHeight(self)

    def getBPP(self):
        """getBPP(ScreenMode self) -> uint16_t"""
        return _fife.ScreenMode_getBPP(self)

    def getSDLFlags(self):
        """getSDLFlags(ScreenMode self) -> uint32_t"""
        return _fife.ScreenMode_getSDLFlags(self)

    def isFullScreen(self):
        """isFullScreen(ScreenMode self) -> bool"""
        return _fife.ScreenMode_isFullScreen(self)

    def isOpenGL(self):
        """isOpenGL(ScreenMode self) -> bool"""
        return _fife.ScreenMode_isOpenGL(self)

    def isSDL(self):
        """isSDL(ScreenMode self) -> bool"""
        return _fife.ScreenMode_isSDL(self)

    def isSDLHardwareSurface(self):
        """isSDLHardwareSurface(ScreenMode self) -> bool"""
        return _fife.ScreenMode_isSDLHardwareSurface(self)

    def __init__(self): 
        """__init__(FIFE::ScreenMode self) -> ScreenMode"""
        this = _fife.new_ScreenMode()
        try: self.this.append(this)
        except: self.this = this
ScreenMode_swigregister = _fife.ScreenMode_swigregister
ScreenMode_swigregister(ScreenMode)
cvar = _fife.cvar
ScreenMode.HW_WINDOWED_OPENGL = _fife.cvar.ScreenMode_HW_WINDOWED_OPENGL
ScreenMode.HW_FULLSCREEN_OPENGL = _fife.cvar.ScreenMode_HW_FULLSCREEN_OPENGL
ScreenMode.WINDOWED_SDL = _fife.cvar.ScreenMode_WINDOWED_SDL
ScreenMode.WINDOWED_SDL_DB_HW = _fife.cvar.ScreenMode_WINDOWED_SDL_DB_HW
ScreenMode.FULLSCREEN_SDL = _fife.cvar.ScreenMode_FULLSCREEN_SDL
ScreenMode.FULLSCREEN_SDL_DB_HW = _fife.cvar.ScreenMode_FULLSCREEN_SDL_DB_HW

class DeviceCaps(_object):
    """Proxy of C++ FIFE::DeviceCaps class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceCaps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceCaps, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::DeviceCaps self) -> DeviceCaps"""
        this = _fife.new_DeviceCaps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_DeviceCaps
    __del__ = lambda self : None;
    def fillDeviceCaps(self):
        """fillDeviceCaps(DeviceCaps self)"""
        return _fife.DeviceCaps_fillDeviceCaps(self)

    def getSupportedScreenModes(self):
        """getSupportedScreenModes(DeviceCaps self) -> ScreenModeVector"""
        return _fife.DeviceCaps_getSupportedScreenModes(self)

    def getNearestScreenMode(self, *args):
        """getNearestScreenMode(DeviceCaps self, uint16_t width, uint16_t height, uint16_t bpp, std::string const & renderer, bool fs) -> ScreenMode"""
        return _fife.DeviceCaps_getNearestScreenMode(self, *args)

    def getDriverName(self):
        """getDriverName(DeviceCaps self) -> std::string"""
        return _fife.DeviceCaps_getDriverName(self)

    def getAvailableDrivers(self):
        """getAvailableDrivers(DeviceCaps self) -> StringVector"""
        return _fife.DeviceCaps_getAvailableDrivers(self)

    def isHwSurfaceAvail(self):
        """isHwSurfaceAvail(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isHwSurfaceAvail(self)

    def isWindowManagerAvail(self):
        """isWindowManagerAvail(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isWindowManagerAvail(self)

    def isHwBlitAccel(self):
        """isHwBlitAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isHwBlitAccel(self)

    def isHwColorkeyBlitAccel(self):
        """isHwColorkeyBlitAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isHwColorkeyBlitAccel(self)

    def isHwAlphaBlitAccel(self):
        """isHwAlphaBlitAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isHwAlphaBlitAccel(self)

    def isSwToHwBlitAccel(self):
        """isSwToHwBlitAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isSwToHwBlitAccel(self)

    def isSwToHwColorkeyBlitAccel(self):
        """isSwToHwColorkeyBlitAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isSwToHwColorkeyBlitAccel(self)

    def isSwToHwAlphaBlitAccel(self):
        """isSwToHwAlphaBlitAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isSwToHwAlphaBlitAccel(self)

    def isBlitFillAccel(self):
        """isBlitFillAccel(DeviceCaps self) -> bool"""
        return _fife.DeviceCaps_isBlitFillAccel(self)

    def getVideoMemory(self):
        """getVideoMemory(DeviceCaps self) -> uint32_t"""
        return _fife.DeviceCaps_getVideoMemory(self)

    def getDesktopWidth(self):
        """getDesktopWidth(DeviceCaps self) -> int32_t"""
        return _fife.DeviceCaps_getDesktopWidth(self)

    def getDesktopHeight(self):
        """getDesktopHeight(DeviceCaps self) -> int32_t"""
        return _fife.DeviceCaps_getDesktopHeight(self)

DeviceCaps_swigregister = _fife.DeviceCaps_swigregister
DeviceCaps_swigregister(DeviceCaps)

class AtlasBlock(_object):
    """Proxy of C++ FIFE::AtlasBlock class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlasBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlasBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["page"] = _fife.AtlasBlock_page_set
    __swig_getmethods__["page"] = _fife.AtlasBlock_page_get
    if _newclass:page = _swig_property(_fife.AtlasBlock_page_get, _fife.AtlasBlock_page_set)
    __swig_setmethods__["left"] = _fife.AtlasBlock_left_set
    __swig_getmethods__["left"] = _fife.AtlasBlock_left_get
    if _newclass:left = _swig_property(_fife.AtlasBlock_left_get, _fife.AtlasBlock_left_set)
    __swig_setmethods__["right"] = _fife.AtlasBlock_right_set
    __swig_getmethods__["right"] = _fife.AtlasBlock_right_get
    if _newclass:right = _swig_property(_fife.AtlasBlock_right_get, _fife.AtlasBlock_right_set)
    __swig_setmethods__["top"] = _fife.AtlasBlock_top_set
    __swig_getmethods__["top"] = _fife.AtlasBlock_top_get
    if _newclass:top = _swig_property(_fife.AtlasBlock_top_get, _fife.AtlasBlock_top_set)
    __swig_setmethods__["bottom"] = _fife.AtlasBlock_bottom_set
    __swig_getmethods__["bottom"] = _fife.AtlasBlock_bottom_get
    if _newclass:bottom = _swig_property(_fife.AtlasBlock_bottom_get, _fife.AtlasBlock_bottom_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::AtlasBlock self, Rect rect, uint32_t page) -> AtlasBlock
        __init__(FIFE::AtlasBlock self) -> AtlasBlock
        """
        this = _fife.new_AtlasBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTrivial(self):
        """setTrivial(AtlasBlock self)"""
        return _fife.AtlasBlock_setTrivial(self)

    def isTrivial(self):
        """isTrivial(AtlasBlock self) -> bool"""
        return _fife.AtlasBlock_isTrivial(self)

    def getWidth(self):
        """getWidth(AtlasBlock self) -> uint32_t"""
        return _fife.AtlasBlock_getWidth(self)

    def getHeight(self):
        """getHeight(AtlasBlock self) -> uint32_t"""
        return _fife.AtlasBlock_getHeight(self)

    def intersects(self, *args):
        """intersects(AtlasBlock self, AtlasBlock rect) -> AtlasBlock"""
        return _fife.AtlasBlock_intersects(self, *args)

    def merge(self, *args):
        """merge(AtlasBlock self, AtlasBlock rect)"""
        return _fife.AtlasBlock_merge(self, *args)

    __swig_destroy__ = _fife.delete_AtlasBlock
    __del__ = lambda self : None;
AtlasBlock_swigregister = _fife.AtlasBlock_swigregister
AtlasBlock_swigregister(AtlasBlock)

class AtlasBook(_object):
    """Proxy of C++ FIFE::AtlasBook class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlasBook, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlasBook, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::AtlasBook self, uint32_t pageWidth, uint32_t pageHeight, uint32_t pixelSize=4) -> AtlasBook
        __init__(FIFE::AtlasBook self, uint32_t pageWidth, uint32_t pageHeight) -> AtlasBook
        """
        this = _fife.new_AtlasBook(*args)
        try: self.this.append(this)
        except: self.this = this
    def getBlock(self, *args):
        """getBlock(AtlasBook self, uint32_t width, uint32_t height) -> AtlasBlock"""
        return _fife.AtlasBook_getBlock(self, *args)

    def shrink(self, *args):
        """shrink(AtlasBook self, bool pot)"""
        return _fife.AtlasBook_shrink(self, *args)

    def getPageWidth(self, *args):
        """getPageWidth(AtlasBook self, uint32_t index) -> uint32_t"""
        return _fife.AtlasBook_getPageWidth(self, *args)

    def getPageHeight(self, *args):
        """getPageHeight(AtlasBook self, uint32_t index) -> uint32_t"""
        return _fife.AtlasBook_getPageHeight(self, *args)

    __swig_destroy__ = _fife.delete_AtlasBook
    __del__ = lambda self : None;
AtlasBook_swigregister = _fife.AtlasBook_swigregister
AtlasBook_swigregister(AtlasBook)

class Color(_object):
    """Proxy of C++ FIFE::Color class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    def __init__(self, r=0, g=0, b=0, alpha=255): 
        """
        __init__(FIFE::Color self, uint8_t r=0, uint8_t g=0, uint8_t b=0, uint8_t alpha=255) -> Color
        __init__(FIFE::Color self, uint8_t r=0, uint8_t g=0, uint8_t b=0) -> Color
        __init__(FIFE::Color self, uint8_t r=0, uint8_t g=0) -> Color
        __init__(FIFE::Color self, uint8_t r=0) -> Color
        __init__(FIFE::Color self) -> Color
        """
        this = _fife.new_Color(r, g, b, alpha)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Color
    __del__ = lambda self : None;
    def set(self, *args):
        """set(Color self, uint8_t r, uint8_t g, uint8_t b, uint8_t alpha)"""
        return _fife.Color_set(self, *args)

    __swig_setmethods__["r"] = _fife.Color_r_set
    __swig_getmethods__["r"] = _fife.Color_r_get
    if _newclass:r = _swig_property(_fife.Color_r_get, _fife.Color_r_set)
    __swig_setmethods__["g"] = _fife.Color_g_set
    __swig_getmethods__["g"] = _fife.Color_g_get
    if _newclass:g = _swig_property(_fife.Color_g_get, _fife.Color_g_set)
    __swig_setmethods__["b"] = _fife.Color_b_set
    __swig_getmethods__["b"] = _fife.Color_b_get
    if _newclass:b = _swig_property(_fife.Color_b_get, _fife.Color_b_set)
    __swig_setmethods__["a"] = _fife.Color_a_set
    __swig_getmethods__["a"] = _fife.Color_a_get
    if _newclass:a = _swig_property(_fife.Color_a_get, _fife.Color_a_set)
Color_swigregister = _fife.Color_swigregister
Color_swigregister(Color)

class IAnimationLoader(_object):
    """Proxy of C++ FIFE::IAnimationLoader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAnimationLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAnimationLoader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IAnimationLoader
    __del__ = lambda self : None;
    def isLoadable(self, *args):
        """isLoadable(IAnimationLoader self, std::string const & filename) -> bool"""
        return _fife.IAnimationLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(IAnimationLoader self, std::string const & filename) -> SharedAnimationPointer"""
        return _fife.IAnimationLoader_load(self, *args)

    def __init__(self): 
        """__init__(FIFE::IAnimationLoader self) -> IAnimationLoader"""
        if self.__class__ == IAnimationLoader:
            _self = None
        else:
            _self = self
        this = _fife.new_IAnimationLoader(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IAnimationLoader(self)
        return weakref_proxy(self)
IAnimationLoader_swigregister = _fife.IAnimationLoader_swigregister
IAnimationLoader_swigregister(IAnimationLoader)

class IAtlasLoader(_object):
    """Proxy of C++ FIFE::IAtlasLoader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAtlasLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAtlasLoader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IAtlasLoader
    __del__ = lambda self : None;
    def isLoadable(self, *args):
        """isLoadable(IAtlasLoader self, std::string const & filename) -> bool"""
        return _fife.IAtlasLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(IAtlasLoader self, std::string const & filename) -> FIFE::AtlasPtr"""
        return _fife.IAtlasLoader_load(self, *args)

    def __init__(self): 
        """__init__(FIFE::IAtlasLoader self) -> IAtlasLoader"""
        if self.__class__ == IAtlasLoader:
            _self = None
        else:
            _self = self
        this = _fife.new_IAtlasLoader(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IAtlasLoader(self)
        return weakref_proxy(self)
IAtlasLoader_swigregister = _fife.IAtlasLoader_swigregister
IAtlasLoader_swigregister(IAtlasLoader)

class AtlasData(_object):
    """Proxy of C++ FIFE::AtlasData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlasData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtlasData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rect"] = _fife.AtlasData_rect_set
    __swig_getmethods__["rect"] = _fife.AtlasData_rect_get
    if _newclass:rect = _swig_property(_fife.AtlasData_rect_get, _fife.AtlasData_rect_set)
    __swig_setmethods__["image"] = _fife.AtlasData_image_set
    __swig_getmethods__["image"] = _fife.AtlasData_image_get
    if _newclass:image = _swig_property(_fife.AtlasData_image_get, _fife.AtlasData_image_set)
    def __init__(self): 
        """__init__(FIFE::AtlasData self) -> AtlasData"""
        this = _fife.new_AtlasData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_AtlasData
    __del__ = lambda self : None;
AtlasData_swigregister = _fife.AtlasData_swigregister
AtlasData_swigregister(AtlasData)

class Atlas(_object):
    """Proxy of C++ FIFE::Atlas class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Atlas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Atlas, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Atlas self, std::string const & name) -> Atlas"""
        this = _fife.new_Atlas(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Atlas
    __del__ = lambda self : None;
    def getImageCount(self):
        """getImageCount(Atlas self) -> size_t"""
        return _fife.Atlas_getImageCount(self)

    def getPackedImage(self):
        """getPackedImage(Atlas self) -> SharedImagePointer"""
        return _fife.Atlas_getPackedImage(self)

    def getImage(self, *args):
        """
        getImage(Atlas self, std::string const & id) -> SharedImagePointer
        getImage(Atlas self, uint32_t index) -> SharedImagePointer
        """
        return _fife.Atlas_getImage(self, *args)

    def addImage(self, *args):
        """addImage(Atlas self, std::string const & imagename, AtlasData data) -> bool"""
        return _fife.Atlas_addImage(self, *args)

    def setPackedImage(self, *args):
        """setPackedImage(Atlas self, SharedImagePointer image)"""
        return _fife.Atlas_setPackedImage(self, *args)

    def getName(self):
        """getName(Atlas self) -> std::string const &"""
        return _fife.Atlas_getName(self)

Atlas_swigregister = _fife.Atlas_swigregister
Atlas_swigregister(Atlas)

class AtlasLoader(IAtlasLoader):
    """Proxy of C++ FIFE::AtlasLoader class"""
    __swig_setmethods__ = {}
    for _s in [IAtlasLoader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtlasLoader, name, value)
    __swig_getmethods__ = {}
    for _s in [IAtlasLoader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtlasLoader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::AtlasLoader self, Model model, VFS vfs, ImageManager imageManager) -> AtlasLoader"""
        this = _fife.new_AtlasLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_AtlasLoader
    __del__ = lambda self : None;
    def isLoadable(self, *args):
        """isLoadable(AtlasLoader self, std::string const & filename) -> bool"""
        return _fife.AtlasLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(AtlasLoader self, std::string const & filename) -> FIFE::AtlasPtr"""
        return _fife.AtlasLoader_load(self, *args)

AtlasLoader_swigregister = _fife.AtlasLoader_swigregister
AtlasLoader_swigregister(AtlasLoader)


def createDefaultAtlasLoader(*args):
  """createDefaultAtlasLoader(Model model, VFS vfs, ImageManager imageManager) -> AtlasLoader"""
  return _fife.createDefaultAtlasLoader(*args)
class IMapLoader(_object):
    """Proxy of C++ FIFE::IMapLoader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMapLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMapLoader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IMapLoader
    __del__ = lambda self : None;
    def setObjectLoader(self, *args):
        """setObjectLoader(IMapLoader self, FIFE::ObjectLoaderPtr const & objectLoader)"""
        return _fife.IMapLoader_setObjectLoader(self, *args)

    def setAnimationLoader(self, *args):
        """setAnimationLoader(IMapLoader self, FIFE::AnimationLoaderPtr const & animationLoader)"""
        return _fife.IMapLoader_setAnimationLoader(self, *args)

    def setAtlasLoader(self, *args):
        """setAtlasLoader(IMapLoader self, FIFE::AtlasLoaderPtr const & atlasLoader)"""
        return _fife.IMapLoader_setAtlasLoader(self, *args)

    def isLoadable(self, *args):
        """isLoadable(IMapLoader self, std::string const & filename) -> bool"""
        return _fife.IMapLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(IMapLoader self, std::string const & filename) -> Map"""
        return _fife.IMapLoader_load(self, *args)

    def __init__(self): 
        """__init__(FIFE::IMapLoader self) -> IMapLoader"""
        if self.__class__ == IMapLoader:
            _self = None
        else:
            _self = self
        this = _fife.new_IMapLoader(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IMapLoader(self)
        return weakref_proxy(self)
IMapLoader_swigregister = _fife.IMapLoader_swigregister
IMapLoader_swigregister(IMapLoader)

class IObjectLoader(_object):
    """Proxy of C++ FIFE::IObjectLoader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObjectLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObjectLoader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IObjectLoader
    __del__ = lambda self : None;
    def setAnimationLoader(self, *args):
        """setAnimationLoader(IObjectLoader self, FIFE::AnimationLoaderPtr const & animationLoader)"""
        return _fife.IObjectLoader_setAnimationLoader(self, *args)

    def isLoadable(self, *args):
        """isLoadable(IObjectLoader self, std::string const & filename) -> bool"""
        return _fife.IObjectLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(IObjectLoader self, std::string const & filename)"""
        return _fife.IObjectLoader_load(self, *args)

    def __init__(self): 
        """__init__(FIFE::IObjectLoader self) -> IObjectLoader"""
        if self.__class__ == IObjectLoader:
            _self = None
        else:
            _self = self
        this = _fife.new_IObjectLoader(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IObjectLoader(self)
        return weakref_proxy(self)
IObjectLoader_swigregister = _fife.IObjectLoader_swigregister
IObjectLoader_swigregister(IObjectLoader)

class ObjectLoader(IObjectLoader):
    """Proxy of C++ FIFE::ObjectLoader class"""
    __swig_setmethods__ = {}
    for _s in [IObjectLoader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectLoader, name, value)
    __swig_getmethods__ = {}
    for _s in [IObjectLoader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectLoader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::ObjectLoader self, Model model, VFS vfs, ImageManager imageManager, FIFE::AnimationLoaderPtr const & animationLoader=FIFE::AnimationLoaderPtr()) -> ObjectLoader
        __init__(FIFE::ObjectLoader self, Model model, VFS vfs, ImageManager imageManager) -> ObjectLoader
        """
        this = _fife.new_ObjectLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_ObjectLoader
    __del__ = lambda self : None;
    def setAnimationLoader(self, *args):
        """setAnimationLoader(ObjectLoader self, FIFE::AnimationLoaderPtr const & animationLoader)"""
        return _fife.ObjectLoader_setAnimationLoader(self, *args)

    def isLoadable(self, *args):
        """isLoadable(ObjectLoader self, std::string const & filename) -> bool"""
        return _fife.ObjectLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(ObjectLoader self, std::string const & filename)"""
        return _fife.ObjectLoader_load(self, *args)

ObjectLoader_swigregister = _fife.ObjectLoader_swigregister
ObjectLoader_swigregister(ObjectLoader)

class MapLoader(IMapLoader):
    """Proxy of C++ FIFE::MapLoader class"""
    __swig_setmethods__ = {}
    for _s in [IMapLoader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapLoader, name, value)
    __swig_getmethods__ = {}
    for _s in [IMapLoader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapLoader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::MapLoader self, Model model, VFS vfs, ImageManager imageManager, RenderBackend renderBackend) -> MapLoader"""
        this = _fife.new_MapLoader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_MapLoader
    __del__ = lambda self : None;
    def setObjectLoader(self, *args):
        """setObjectLoader(MapLoader self, FIFE::ObjectLoaderPtr const & objectLoader)"""
        return _fife.MapLoader_setObjectLoader(self, *args)

    def setAnimationLoader(self, *args):
        """setAnimationLoader(MapLoader self, FIFE::AnimationLoaderPtr const & animationLoader)"""
        return _fife.MapLoader_setAnimationLoader(self, *args)

    def setAtlasLoader(self, *args):
        """setAtlasLoader(MapLoader self, FIFE::AtlasLoaderPtr const & atlasLoader)"""
        return _fife.MapLoader_setAtlasLoader(self, *args)

    def isLoadable(self, *args):
        """isLoadable(MapLoader self, std::string const & filename) -> bool"""
        return _fife.MapLoader_isLoadable(self, *args)

    def load(self, *args):
        """load(MapLoader self, std::string const & filename) -> Map"""
        return _fife.MapLoader_load(self, *args)

    def loadImportFile(self, *args):
        """
        loadImportFile(MapLoader self, std::string const & file, std::string const & directory="")
        loadImportFile(MapLoader self, std::string const & file)
        """
        return _fife.MapLoader_loadImportFile(self, *args)

    def loadImportDirectory(self, *args):
        """loadImportDirectory(MapLoader self, std::string const & directory)"""
        return _fife.MapLoader_loadImportDirectory(self, *args)

    def addPercentDoneListener(self, *args):
        """addPercentDoneListener(MapLoader self, PercentDoneListener listener)"""
        return _fife.MapLoader_addPercentDoneListener(self, *args)

    def getLoaderName(self):
        """getLoaderName(MapLoader self) -> std::string const &"""
        return _fife.MapLoader_getLoaderName(self)

MapLoader_swigregister = _fife.MapLoader_swigregister
MapLoader_swigregister(MapLoader)


def createDefaultMapLoader(*args):
  """createDefaultMapLoader(Model model, VFS vfs, ImageManager imageManager, RenderBackend renderBackend) -> MapLoader"""
  return _fife.createDefaultMapLoader(*args)
class PercentDoneListener(_object):
    """Proxy of C++ FIFE::PercentDoneListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PercentDoneListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PercentDoneListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_PercentDoneListener
    __del__ = lambda self : None;
    def OnEvent(self, *args):
        """OnEvent(PercentDoneListener self, unsigned int percentDone)"""
        return _fife.PercentDoneListener_OnEvent(self, *args)

    def __init__(self): 
        """__init__(FIFE::PercentDoneListener self) -> PercentDoneListener"""
        if self.__class__ == PercentDoneListener:
            _self = None
        else:
            _self = self
        this = _fife.new_PercentDoneListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_PercentDoneListener(self)
        return weakref_proxy(self)
PercentDoneListener_swigregister = _fife.PercentDoneListener_swigregister
PercentDoneListener_swigregister(PercentDoneListener)

class IVisual(_object):
    """Proxy of C++ FIFE::IVisual class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IVisual, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IVisual, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IVisual
    __del__ = lambda self : None;
IVisual_swigregister = _fife.IVisual_swigregister
IVisual_swigregister(IVisual)

class Action(FifeClass):
    """Proxy of C++ FIFE::Action class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Action, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Action, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Action self, std::string const & identifier) -> Action"""
        this = _fife.new_Action(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Action
    __del__ = lambda self : None;
    def getId(self):
        """getId(Action self) -> std::string const &"""
        return _fife.Action_getId(self)

    def adoptVisual(self, *args):
        """adoptVisual(Action self, IVisual visual)"""
        return _fife.Action_adoptVisual(self, *args)

    def setDuration(self, *args):
        """setDuration(Action self, uint32_t duration)"""
        return _fife.Action_setDuration(self, *args)

    def getDuration(self):
        """getDuration(Action self) -> uint32_t"""
        return _fife.Action_getDuration(self)

    def get2dGfxVisual(self):
        """get2dGfxVisual(Action self) -> ActionVisual"""
        return _fife.Action_get2dGfxVisual(self)

Action_swigregister = _fife.Action_swigregister
Action_swigregister(Action)

class ModelCoordinate(_object):
    """Proxy of C++ FIFE::PointType3D<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelCoordinate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.ModelCoordinate_x_set
    __swig_getmethods__["x"] = _fife.ModelCoordinate_x_get
    if _newclass:x = _swig_property(_fife.ModelCoordinate_x_get, _fife.ModelCoordinate_x_set)
    __swig_setmethods__["y"] = _fife.ModelCoordinate_y_set
    __swig_getmethods__["y"] = _fife.ModelCoordinate_y_get
    if _newclass:y = _swig_property(_fife.ModelCoordinate_y_get, _fife.ModelCoordinate_y_set)
    __swig_setmethods__["z"] = _fife.ModelCoordinate_z_set
    __swig_getmethods__["z"] = _fife.ModelCoordinate_z_get
    if _newclass:z = _swig_property(_fife.ModelCoordinate_z_get, _fife.ModelCoordinate_z_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0, int _y=0, int _z=0) -> ModelCoordinate
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0, int _y=0) -> ModelCoordinate
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0) -> ModelCoordinate
        __init__(FIFE::PointType3D<(int32_t)> self) -> ModelCoordinate
        __init__(FIFE::PointType3D<(int32_t)> self, Point3D rhs) -> ModelCoordinate
        """
        this = _fife.new_ModelCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(ModelCoordinate self, Point3D p) -> Point3D"""
        return _fife.ModelCoordinate___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(ModelCoordinate self, Point3D p) -> Point3D"""
        return _fife.ModelCoordinate___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(ModelCoordinate self, Point3D p) -> Point3D"""
        return _fife.ModelCoordinate___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(ModelCoordinate self, Point3D p) -> Point3D"""
        return _fife.ModelCoordinate___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(ModelCoordinate self, int const & i) -> Point3D"""
        return _fife.ModelCoordinate___mul__(self, *args)

    def __div__(self, *args):
        """__div__(ModelCoordinate self, int const & i) -> Point3D"""
        return _fife.ModelCoordinate___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(ModelCoordinate self, Point3D p) -> bool"""
        return _fife.ModelCoordinate___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ModelCoordinate self, Point3D p) -> bool"""
        return _fife.ModelCoordinate___ne__(self, *args)

    def length(self):
        """length(ModelCoordinate self) -> int"""
        return _fife.ModelCoordinate_length(self)

    def normalize(self):
        """normalize(ModelCoordinate self)"""
        return _fife.ModelCoordinate_normalize(self)

    def set(self, *args):
        """set(ModelCoordinate self, int _x, int _y, int _z)"""
        return _fife.ModelCoordinate_set(self, *args)

    __swig_destroy__ = _fife.delete_ModelCoordinate
    __del__ = lambda self : None;
ModelCoordinate_swigregister = _fife.ModelCoordinate_swigregister
ModelCoordinate_swigregister(ModelCoordinate)

class ExactModelCoordinate(_object):
    """Proxy of C++ FIFE::PointType3D<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactModelCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExactModelCoordinate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.ExactModelCoordinate_x_set
    __swig_getmethods__["x"] = _fife.ExactModelCoordinate_x_get
    if _newclass:x = _swig_property(_fife.ExactModelCoordinate_x_get, _fife.ExactModelCoordinate_x_set)
    __swig_setmethods__["y"] = _fife.ExactModelCoordinate_y_set
    __swig_getmethods__["y"] = _fife.ExactModelCoordinate_y_get
    if _newclass:y = _swig_property(_fife.ExactModelCoordinate_y_get, _fife.ExactModelCoordinate_y_set)
    __swig_setmethods__["z"] = _fife.ExactModelCoordinate_z_set
    __swig_getmethods__["z"] = _fife.ExactModelCoordinate_z_get
    if _newclass:z = _swig_property(_fife.ExactModelCoordinate_z_get, _fife.ExactModelCoordinate_z_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType3D<(double)> self, double _x=0, double _y=0, double _z=0) -> ExactModelCoordinate
        __init__(FIFE::PointType3D<(double)> self, double _x=0, double _y=0) -> ExactModelCoordinate
        __init__(FIFE::PointType3D<(double)> self, double _x=0) -> ExactModelCoordinate
        __init__(FIFE::PointType3D<(double)> self) -> ExactModelCoordinate
        __init__(FIFE::PointType3D<(double)> self, DoublePoint3D rhs) -> ExactModelCoordinate
        """
        this = _fife.new_ExactModelCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(ExactModelCoordinate self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.ExactModelCoordinate___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(ExactModelCoordinate self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.ExactModelCoordinate___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(ExactModelCoordinate self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.ExactModelCoordinate___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(ExactModelCoordinate self, DoublePoint3D p) -> DoublePoint3D"""
        return _fife.ExactModelCoordinate___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(ExactModelCoordinate self, double const & i) -> DoublePoint3D"""
        return _fife.ExactModelCoordinate___mul__(self, *args)

    def __div__(self, *args):
        """__div__(ExactModelCoordinate self, double const & i) -> DoublePoint3D"""
        return _fife.ExactModelCoordinate___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(ExactModelCoordinate self, DoublePoint3D p) -> bool"""
        return _fife.ExactModelCoordinate___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ExactModelCoordinate self, DoublePoint3D p) -> bool"""
        return _fife.ExactModelCoordinate___ne__(self, *args)

    def length(self):
        """length(ExactModelCoordinate self) -> double"""
        return _fife.ExactModelCoordinate_length(self)

    def normalize(self):
        """normalize(ExactModelCoordinate self)"""
        return _fife.ExactModelCoordinate_normalize(self)

    def set(self, *args):
        """set(ExactModelCoordinate self, double _x, double _y, double _z)"""
        return _fife.ExactModelCoordinate_set(self, *args)

    def __str__(self):
        """__str__(ExactModelCoordinate self) -> std::string"""
        return _fife.ExactModelCoordinate___str__(self)

    __swig_destroy__ = _fife.delete_ExactModelCoordinate
    __del__ = lambda self : None;
ExactModelCoordinate_swigregister = _fife.ExactModelCoordinate_swigregister
ExactModelCoordinate_swigregister(ExactModelCoordinate)

class ModelCoordinateVector(_object):
    """Proxy of C++ std::vector<(FIFE::ModelCoordinate)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelCoordinateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelCoordinateVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ModelCoordinateVector self) -> SwigPyIterator"""
        return _fife.ModelCoordinateVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ModelCoordinateVector self) -> bool"""
        return _fife.ModelCoordinateVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ModelCoordinateVector self) -> bool"""
        return _fife.ModelCoordinateVector___bool__(self)

    def __len__(self):
        """__len__(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::size_type"""
        return _fife.ModelCoordinateVector___len__(self)

    def pop(self):
        """pop(ModelCoordinateVector self) -> Point3D"""
        return _fife.ModelCoordinateVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i, std::vector< FIFE::PointType3D< int > >::difference_type j) -> std::vector< FIFE::PointType3D< int32_t >,std::allocator< FIFE::PointType3D< int32_t > > > *"""
        return _fife.ModelCoordinateVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i, std::vector< FIFE::PointType3D< int > >::difference_type j, 
            std::vector< FIFE::PointType3D< int32_t >,std::allocator< FIFE::PointType3D< int32_t > > > const & v=std::vector< FIFE::PointType3D< int >,std::allocator< FIFE::PointType3D< int > > >())
        __setslice__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i, std::vector< FIFE::PointType3D< int > >::difference_type j)
        """
        return _fife.ModelCoordinateVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i, std::vector< FIFE::PointType3D< int > >::difference_type j)"""
        return _fife.ModelCoordinateVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i)
        __delitem__(ModelCoordinateVector self, PySliceObject * slice)
        """
        return _fife.ModelCoordinateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ModelCoordinateVector self, PySliceObject * slice) -> std::vector< FIFE::PointType3D< int32_t >,std::allocator< FIFE::PointType3D< int32_t > > >
        __getitem__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i) -> Point3D
        """
        return _fife.ModelCoordinateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ModelCoordinateVector self, PySliceObject * slice, std::vector< FIFE::PointType3D< int32_t >,std::allocator< FIFE::PointType3D< int32_t > > > const & v)
        __setitem__(ModelCoordinateVector self, PySliceObject * slice)
        __setitem__(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::difference_type i, Point3D x)
        """
        return _fife.ModelCoordinateVector___setitem__(self, *args)

    def append(self, *args):
        """append(ModelCoordinateVector self, Point3D x)"""
        return _fife.ModelCoordinateVector_append(self, *args)

    def empty(self):
        """empty(ModelCoordinateVector self) -> bool"""
        return _fife.ModelCoordinateVector_empty(self)

    def size(self):
        """size(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::size_type"""
        return _fife.ModelCoordinateVector_size(self)

    def clear(self):
        """clear(ModelCoordinateVector self)"""
        return _fife.ModelCoordinateVector_clear(self)

    def swap(self, *args):
        """swap(ModelCoordinateVector self, ModelCoordinateVector v)"""
        return _fife.ModelCoordinateVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::allocator_type"""
        return _fife.ModelCoordinateVector_get_allocator(self)

    def begin(self):
        """begin(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::iterator"""
        return _fife.ModelCoordinateVector_begin(self)

    def end(self):
        """end(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::iterator"""
        return _fife.ModelCoordinateVector_end(self)

    def rbegin(self):
        """rbegin(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::reverse_iterator"""
        return _fife.ModelCoordinateVector_rbegin(self)

    def rend(self):
        """rend(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::reverse_iterator"""
        return _fife.ModelCoordinateVector_rend(self)

    def pop_back(self):
        """pop_back(ModelCoordinateVector self)"""
        return _fife.ModelCoordinateVector_pop_back(self)

    def erase(self, *args):
        """
        erase(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::iterator pos) -> std::vector< FIFE::PointType3D< int > >::iterator
        erase(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::iterator first, std::vector< FIFE::PointType3D< int > >::iterator last) -> std::vector< FIFE::PointType3D< int > >::iterator
        """
        return _fife.ModelCoordinateVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(FIFE::ModelCoordinate)> self) -> ModelCoordinateVector
        __init__(std::vector<(FIFE::ModelCoordinate)> self, ModelCoordinateVector arg2) -> ModelCoordinateVector
        __init__(std::vector<(FIFE::ModelCoordinate)> self, std::vector< FIFE::PointType3D< int > >::size_type size) -> ModelCoordinateVector
        __init__(std::vector<(FIFE::ModelCoordinate)> self, std::vector< FIFE::PointType3D< int > >::size_type size, Point3D value) -> ModelCoordinateVector
        """
        this = _fife.new_ModelCoordinateVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ModelCoordinateVector self, Point3D x)"""
        return _fife.ModelCoordinateVector_push_back(self, *args)

    def front(self):
        """front(ModelCoordinateVector self) -> Point3D"""
        return _fife.ModelCoordinateVector_front(self)

    def back(self):
        """back(ModelCoordinateVector self) -> Point3D"""
        return _fife.ModelCoordinateVector_back(self)

    def assign(self, *args):
        """assign(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::size_type n, Point3D x)"""
        return _fife.ModelCoordinateVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::size_type new_size)
        resize(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::size_type new_size, Point3D x)
        """
        return _fife.ModelCoordinateVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::iterator pos, Point3D x) -> std::vector< FIFE::PointType3D< int > >::iterator
        insert(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::iterator pos, std::vector< FIFE::PointType3D< int > >::size_type n, 
            Point3D x)
        """
        return _fife.ModelCoordinateVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(ModelCoordinateVector self, std::vector< FIFE::PointType3D< int > >::size_type n)"""
        return _fife.ModelCoordinateVector_reserve(self, *args)

    def capacity(self):
        """capacity(ModelCoordinateVector self) -> std::vector< FIFE::PointType3D< int > >::size_type"""
        return _fife.ModelCoordinateVector_capacity(self)

    __swig_destroy__ = _fife.delete_ModelCoordinateVector
    __del__ = lambda self : None;
ModelCoordinateVector_swigregister = _fife.ModelCoordinateVector_swigregister
ModelCoordinateVector_swigregister(ModelCoordinateVector)

class ExactModelCoordinateVector(_object):
    """Proxy of C++ std::vector<(FIFE::ExactModelCoordinate)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactModelCoordinateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExactModelCoordinateVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ExactModelCoordinateVector self) -> SwigPyIterator"""
        return _fife.ExactModelCoordinateVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ExactModelCoordinateVector self) -> bool"""
        return _fife.ExactModelCoordinateVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ExactModelCoordinateVector self) -> bool"""
        return _fife.ExactModelCoordinateVector___bool__(self)

    def __len__(self):
        """__len__(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::size_type"""
        return _fife.ExactModelCoordinateVector___len__(self)

    def pop(self):
        """pop(ExactModelCoordinateVector self) -> DoublePoint3D"""
        return _fife.ExactModelCoordinateVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i, std::vector< FIFE::PointType3D< double > >::difference_type j) -> ExactModelCoordinateVector"""
        return _fife.ExactModelCoordinateVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i, std::vector< FIFE::PointType3D< double > >::difference_type j, 
            ExactModelCoordinateVector v=std::vector< FIFE::PointType3D< double >,std::allocator< FIFE::PointType3D< double > > >())
        __setslice__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i, std::vector< FIFE::PointType3D< double > >::difference_type j)
        """
        return _fife.ExactModelCoordinateVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i, std::vector< FIFE::PointType3D< double > >::difference_type j)"""
        return _fife.ExactModelCoordinateVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i)
        __delitem__(ExactModelCoordinateVector self, PySliceObject * slice)
        """
        return _fife.ExactModelCoordinateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ExactModelCoordinateVector self, PySliceObject * slice) -> ExactModelCoordinateVector
        __getitem__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i) -> DoublePoint3D
        """
        return _fife.ExactModelCoordinateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ExactModelCoordinateVector self, PySliceObject * slice, ExactModelCoordinateVector v)
        __setitem__(ExactModelCoordinateVector self, PySliceObject * slice)
        __setitem__(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::difference_type i, DoublePoint3D x)
        """
        return _fife.ExactModelCoordinateVector___setitem__(self, *args)

    def append(self, *args):
        """append(ExactModelCoordinateVector self, DoublePoint3D x)"""
        return _fife.ExactModelCoordinateVector_append(self, *args)

    def empty(self):
        """empty(ExactModelCoordinateVector self) -> bool"""
        return _fife.ExactModelCoordinateVector_empty(self)

    def size(self):
        """size(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::size_type"""
        return _fife.ExactModelCoordinateVector_size(self)

    def clear(self):
        """clear(ExactModelCoordinateVector self)"""
        return _fife.ExactModelCoordinateVector_clear(self)

    def swap(self, *args):
        """swap(ExactModelCoordinateVector self, ExactModelCoordinateVector v)"""
        return _fife.ExactModelCoordinateVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::allocator_type"""
        return _fife.ExactModelCoordinateVector_get_allocator(self)

    def begin(self):
        """begin(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::iterator"""
        return _fife.ExactModelCoordinateVector_begin(self)

    def end(self):
        """end(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::iterator"""
        return _fife.ExactModelCoordinateVector_end(self)

    def rbegin(self):
        """rbegin(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::reverse_iterator"""
        return _fife.ExactModelCoordinateVector_rbegin(self)

    def rend(self):
        """rend(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::reverse_iterator"""
        return _fife.ExactModelCoordinateVector_rend(self)

    def pop_back(self):
        """pop_back(ExactModelCoordinateVector self)"""
        return _fife.ExactModelCoordinateVector_pop_back(self)

    def erase(self, *args):
        """
        erase(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::iterator pos) -> std::vector< FIFE::PointType3D< double > >::iterator
        erase(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::iterator first, std::vector< FIFE::PointType3D< double > >::iterator last) -> std::vector< FIFE::PointType3D< double > >::iterator
        """
        return _fife.ExactModelCoordinateVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(FIFE::ExactModelCoordinate)> self) -> ExactModelCoordinateVector
        __init__(std::vector<(FIFE::ExactModelCoordinate)> self, ExactModelCoordinateVector arg2) -> ExactModelCoordinateVector
        __init__(std::vector<(FIFE::ExactModelCoordinate)> self, std::vector< FIFE::PointType3D< double > >::size_type size) -> ExactModelCoordinateVector
        __init__(std::vector<(FIFE::ExactModelCoordinate)> self, std::vector< FIFE::PointType3D< double > >::size_type size, DoublePoint3D value) -> ExactModelCoordinateVector
        """
        this = _fife.new_ExactModelCoordinateVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ExactModelCoordinateVector self, DoublePoint3D x)"""
        return _fife.ExactModelCoordinateVector_push_back(self, *args)

    def front(self):
        """front(ExactModelCoordinateVector self) -> DoublePoint3D"""
        return _fife.ExactModelCoordinateVector_front(self)

    def back(self):
        """back(ExactModelCoordinateVector self) -> DoublePoint3D"""
        return _fife.ExactModelCoordinateVector_back(self)

    def assign(self, *args):
        """assign(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::size_type n, DoublePoint3D x)"""
        return _fife.ExactModelCoordinateVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::size_type new_size)
        resize(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::size_type new_size, DoublePoint3D x)
        """
        return _fife.ExactModelCoordinateVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::iterator pos, DoublePoint3D x) -> std::vector< FIFE::PointType3D< double > >::iterator
        insert(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::iterator pos, std::vector< FIFE::PointType3D< double > >::size_type n, 
            DoublePoint3D x)
        """
        return _fife.ExactModelCoordinateVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(ExactModelCoordinateVector self, std::vector< FIFE::PointType3D< double > >::size_type n)"""
        return _fife.ExactModelCoordinateVector_reserve(self, *args)

    def capacity(self):
        """capacity(ExactModelCoordinateVector self) -> std::vector< FIFE::PointType3D< double > >::size_type"""
        return _fife.ExactModelCoordinateVector_capacity(self)

    __swig_destroy__ = _fife.delete_ExactModelCoordinateVector
    __del__ = lambda self : None;
ExactModelCoordinateVector_swigregister = _fife.ExactModelCoordinateVector_swigregister
ExactModelCoordinateVector_swigregister(ExactModelCoordinateVector)

class CellGrid(_object):
    """Proxy of C++ FIFE::CellGrid class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_CellGrid
    __del__ = lambda self : None;
    def getAccessibleCoordinates(self, *args):
        """getAccessibleCoordinates(CellGrid self, Point3D curpos, std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > > & coordinates)"""
        return _fife.CellGrid_getAccessibleCoordinates(self, *args)

    def getType(self):
        """getType(CellGrid self) -> std::string const &"""
        return _fife.CellGrid_getType(self)

    def getName(self):
        """getName(CellGrid self) -> std::string const &"""
        return _fife.CellGrid_getName(self)

    def isAccessible(self, *args):
        """isAccessible(CellGrid self, Point3D curpos, Point3D target) -> bool"""
        return _fife.CellGrid_isAccessible(self, *args)

    def getAdjacentCost(self, *args):
        """getAdjacentCost(CellGrid self, Point3D curpos, Point3D target) -> double"""
        return _fife.CellGrid_getAdjacentCost(self, *args)

    def getHeuristicCost(self, *args):
        """getHeuristicCost(CellGrid self, Point3D curpos, Point3D target) -> double"""
        return _fife.CellGrid_getHeuristicCost(self, *args)

    def getCellSideCount(self):
        """getCellSideCount(CellGrid self) -> uint32_t"""
        return _fife.CellGrid_getCellSideCount(self)

    def toMapCoordinates(self, *args):
        """
        toMapCoordinates(CellGrid self, Point3D layer_coords) -> DoublePoint3D
        toMapCoordinates(CellGrid self, DoublePoint3D layer_coords) -> DoublePoint3D
        """
        return _fife.CellGrid_toMapCoordinates(self, *args)

    def toLayerCoordinates(self, *args):
        """toLayerCoordinates(CellGrid self, DoublePoint3D map_coord) -> Point3D"""
        return _fife.CellGrid_toLayerCoordinates(self, *args)

    def toExactLayerCoordinates(self, *args):
        """toExactLayerCoordinates(CellGrid self, DoublePoint3D map_coord) -> DoublePoint3D"""
        return _fife.CellGrid_toExactLayerCoordinates(self, *args)

    def getVertices(self, *args):
        """getVertices(CellGrid self, Point3D cell)"""
        return _fife.CellGrid_getVertices(self, *args)

    def getCoordinatesInLine(self, *args):
        """getCoordinatesInLine(CellGrid self, Point3D start, Point3D end) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > >"""
        return _fife.CellGrid_getCoordinatesInLine(self, *args)

    def setXShift(self, *args):
        """setXShift(CellGrid self, double const & xshift)"""
        return _fife.CellGrid_setXShift(self, *args)

    def getXShift(self):
        """getXShift(CellGrid self) -> double const"""
        return _fife.CellGrid_getXShift(self)

    def setYShift(self, *args):
        """setYShift(CellGrid self, double const yshift)"""
        return _fife.CellGrid_setYShift(self, *args)

    def getYShift(self):
        """getYShift(CellGrid self) -> double const"""
        return _fife.CellGrid_getYShift(self)

    def setZShift(self, *args):
        """setZShift(CellGrid self, double const zshift)"""
        return _fife.CellGrid_setZShift(self, *args)

    def getZShift(self):
        """getZShift(CellGrid self) -> double const"""
        return _fife.CellGrid_getZShift(self)

    def setXScale(self, *args):
        """setXScale(CellGrid self, double const scale)"""
        return _fife.CellGrid_setXScale(self, *args)

    def setYScale(self, *args):
        """setYScale(CellGrid self, double const scale)"""
        return _fife.CellGrid_setYScale(self, *args)

    def setZScale(self, *args):
        """setZScale(CellGrid self, double const scale)"""
        return _fife.CellGrid_setZScale(self, *args)

    def getXScale(self):
        """getXScale(CellGrid self) -> double const"""
        return _fife.CellGrid_getXScale(self)

    def getYScale(self):
        """getYScale(CellGrid self) -> double const"""
        return _fife.CellGrid_getYScale(self)

    def getZScale(self):
        """getZScale(CellGrid self) -> double const"""
        return _fife.CellGrid_getZScale(self)

    def setRotation(self, *args):
        """setRotation(CellGrid self, double const rotation)"""
        return _fife.CellGrid_setRotation(self, *args)

    def getRotation(self):
        """getRotation(CellGrid self) -> double const"""
        return _fife.CellGrid_getRotation(self)

CellGrid_swigregister = _fife.CellGrid_swigregister
CellGrid_swigregister(CellGrid)

class HexGrid(CellGrid):
    """Proxy of C++ FIFE::HexGrid class"""
    __swig_setmethods__ = {}
    for _s in [CellGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HexGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HexGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_HexGrid
    __del__ = lambda self : None;
    def isAccessible(self, *args):
        """isAccessible(HexGrid self, Point3D curpos, Point3D target) -> bool"""
        return _fife.HexGrid_isAccessible(self, *args)

    def getType(self):
        """getType(HexGrid self) -> std::string const &"""
        return _fife.HexGrid_getType(self)

    def getName(self):
        """getName(HexGrid self) -> std::string const &"""
        return _fife.HexGrid_getName(self)

    def getAdjacentCost(self, *args):
        """getAdjacentCost(HexGrid self, Point3D curpos, Point3D target) -> double"""
        return _fife.HexGrid_getAdjacentCost(self, *args)

    def getCellSideCount(self):
        """getCellSideCount(HexGrid self) -> uint32_t"""
        return _fife.HexGrid_getCellSideCount(self)

    def toMapCoordinates(self, *args):
        """toMapCoordinates(HexGrid self, DoublePoint3D layer_coords) -> DoublePoint3D"""
        return _fife.HexGrid_toMapCoordinates(self, *args)

    def toLayerCoordinates(self, *args):
        """toLayerCoordinates(HexGrid self, DoublePoint3D map_coord) -> Point3D"""
        return _fife.HexGrid_toLayerCoordinates(self, *args)

    def toExactLayerCoordinates(self, *args):
        """toExactLayerCoordinates(HexGrid self, DoublePoint3D map_coord) -> DoublePoint3D"""
        return _fife.HexGrid_toExactLayerCoordinates(self, *args)

    def getVertices(self, *args):
        """getVertices(HexGrid self, Point3D cell)"""
        return _fife.HexGrid_getVertices(self, *args)

    def getCoordinatesInLine(self, *args):
        """getCoordinatesInLine(HexGrid self, Point3D start, Point3D end) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > >"""
        return _fife.HexGrid_getCoordinatesInLine(self, *args)

HexGrid_swigregister = _fife.HexGrid_swigregister
HexGrid_swigregister(HexGrid)

class SquareGrid(CellGrid):
    """Proxy of C++ FIFE::SquareGrid class"""
    __swig_setmethods__ = {}
    for _s in [CellGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SquareGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [CellGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SquareGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_SquareGrid
    __del__ = lambda self : None;
    def getType(self):
        """getType(SquareGrid self) -> std::string const &"""
        return _fife.SquareGrid_getType(self)

    def getName(self):
        """getName(SquareGrid self) -> std::string const &"""
        return _fife.SquareGrid_getName(self)

    def isAccessible(self, *args):
        """isAccessible(SquareGrid self, Point3D curpos, Point3D target) -> bool"""
        return _fife.SquareGrid_isAccessible(self, *args)

    def getAdjacentCost(self, *args):
        """getAdjacentCost(SquareGrid self, Point3D curpos, Point3D target) -> double"""
        return _fife.SquareGrid_getAdjacentCost(self, *args)

    def getCellSideCount(self):
        """getCellSideCount(SquareGrid self) -> uint32_t"""
        return _fife.SquareGrid_getCellSideCount(self)

    def toMapCoordinates(self, *args):
        """toMapCoordinates(SquareGrid self, DoublePoint3D layer_coords) -> DoublePoint3D"""
        return _fife.SquareGrid_toMapCoordinates(self, *args)

    def toLayerCoordinates(self, *args):
        """toLayerCoordinates(SquareGrid self, DoublePoint3D map_coord) -> Point3D"""
        return _fife.SquareGrid_toLayerCoordinates(self, *args)

    def toExactLayerCoordinates(self, *args):
        """toExactLayerCoordinates(SquareGrid self, DoublePoint3D map_coord) -> DoublePoint3D"""
        return _fife.SquareGrid_toExactLayerCoordinates(self, *args)

    def getVertices(self, *args):
        """getVertices(SquareGrid self, Point3D cell)"""
        return _fife.SquareGrid_getVertices(self, *args)

    def getCoordinatesInLine(self, *args):
        """getCoordinatesInLine(SquareGrid self, Point3D start, Point3D end) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > >"""
        return _fife.SquareGrid_getCoordinatesInLine(self, *args)

SquareGrid_swigregister = _fife.SquareGrid_swigregister
SquareGrid_swigregister(SquareGrid)

class Location(_object):
    """Proxy of C++ FIFE::Location class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::Location self) -> Location
        __init__(FIFE::Location self, Location loc) -> Location
        __init__(FIFE::Location self, Layer layer) -> Location
        """
        this = _fife.new_Location(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Location
    __del__ = lambda self : None;
    def reset(self):
        """reset(Location self)"""
        return _fife.Location_reset(self)

    def __eq__(self, *args):
        """__eq__(Location self, Location loc) -> bool"""
        return _fife.Location___eq__(self, *args)

    def getMap(self):
        """getMap(Location self) -> Map"""
        return _fife.Location_getMap(self)

    def setLayer(self, *args):
        """setLayer(Location self, Layer layer)"""
        return _fife.Location_setLayer(self, *args)

    def getLayer(self):
        """getLayer(Location self) -> Layer"""
        return _fife.Location_getLayer(self)

    def setExactLayerCoordinates(self, *args):
        """setExactLayerCoordinates(Location self, DoublePoint3D coordinates)"""
        return _fife.Location_setExactLayerCoordinates(self, *args)

    def setLayerCoordinates(self, *args):
        """setLayerCoordinates(Location self, Point3D coordinates)"""
        return _fife.Location_setLayerCoordinates(self, *args)

    def setMapCoordinates(self, *args):
        """setMapCoordinates(Location self, DoublePoint3D coordinates)"""
        return _fife.Location_setMapCoordinates(self, *args)

    def getExactLayerCoordinatesRef(self):
        """getExactLayerCoordinatesRef(Location self) -> DoublePoint3D"""
        return _fife.Location_getExactLayerCoordinatesRef(self)

    def getExactLayerCoordinates(self, *args):
        """
        getExactLayerCoordinates(Location self) -> DoublePoint3D
        getExactLayerCoordinates(Location self, Layer layer) -> DoublePoint3D
        """
        return _fife.Location_getExactLayerCoordinates(self, *args)

    def getLayerCoordinates(self, *args):
        """
        getLayerCoordinates(Location self) -> Point3D
        getLayerCoordinates(Location self, Layer layer) -> Point3D
        """
        return _fife.Location_getLayerCoordinates(self, *args)

    def getMapCoordinates(self):
        """getMapCoordinates(Location self) -> DoublePoint3D"""
        return _fife.Location_getMapCoordinates(self)

    def isValid(self):
        """isValid(Location self) -> bool"""
        return _fife.Location_isValid(self)

    def getCellOffsetDistance(self):
        """getCellOffsetDistance(Location self) -> double"""
        return _fife.Location_getCellOffsetDistance(self)

    def getMapDistanceTo(self, *args):
        """getMapDistanceTo(Location self, Location location) -> double"""
        return _fife.Location_getMapDistanceTo(self, *args)

    def getLayerDistanceTo(self, *args):
        """getLayerDistanceTo(Location self, Location location) -> double"""
        return _fife.Location_getLayerDistanceTo(self, *args)

Location_swigregister = _fife.Location_swigregister
Location_swigregister(Location)


def __lshift__(*args):
  """__lshift__(std::ostream & os, Location l) -> std::ostream &"""
  return _fife.__lshift__(*args)
class InstanceActionListener(_object):
    """Proxy of C++ FIFE::InstanceActionListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceActionListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceActionListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_InstanceActionListener
    __del__ = lambda self : None;
    def onInstanceActionFinished(self, *args):
        """onInstanceActionFinished(InstanceActionListener self, Instance instance, Action action)"""
        return _fife.InstanceActionListener_onInstanceActionFinished(self, *args)

    def onInstanceActionCancelled(self, *args):
        """onInstanceActionCancelled(InstanceActionListener self, Instance instance, Action action)"""
        return _fife.InstanceActionListener_onInstanceActionCancelled(self, *args)

    def onInstanceActionFrame(self, *args):
        """onInstanceActionFrame(InstanceActionListener self, Instance instance, Action action, int32_t frame)"""
        return _fife.InstanceActionListener_onInstanceActionFrame(self, *args)

    def __init__(self): 
        """__init__(FIFE::InstanceActionListener self) -> InstanceActionListener"""
        if self.__class__ == InstanceActionListener:
            _self = None
        else:
            _self = self
        this = _fife.new_InstanceActionListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_InstanceActionListener(self)
        return weakref_proxy(self)
InstanceActionListener_swigregister = _fife.InstanceActionListener_swigregister
InstanceActionListener_swigregister(InstanceActionListener)

ICHANGE_NO_CHANGES = _fife.ICHANGE_NO_CHANGES
ICHANGE_LOC = _fife.ICHANGE_LOC
ICHANGE_ROTATION = _fife.ICHANGE_ROTATION
ICHANGE_SPEED = _fife.ICHANGE_SPEED
ICHANGE_ACTION = _fife.ICHANGE_ACTION
ICHANGE_TIME_MULTIPLIER = _fife.ICHANGE_TIME_MULTIPLIER
ICHANGE_SAYTEXT = _fife.ICHANGE_SAYTEXT
ICHANGE_BLOCK = _fife.ICHANGE_BLOCK
ICHANGE_CELL = _fife.ICHANGE_CELL
ICHANGE_TRANSPARENCY = _fife.ICHANGE_TRANSPARENCY
ICHANGE_VISIBLE = _fife.ICHANGE_VISIBLE
ICHANGE_STACKPOS = _fife.ICHANGE_STACKPOS
class InstanceChangeListener(_object):
    """Proxy of C++ FIFE::InstanceChangeListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceChangeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceChangeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_InstanceChangeListener
    __del__ = lambda self : None;
    def onInstanceChanged(self, *args):
        """onInstanceChanged(InstanceChangeListener self, Instance instance, FIFE::InstanceChangeInfo info)"""
        return _fife.InstanceChangeListener_onInstanceChanged(self, *args)

    def __init__(self): 
        """__init__(FIFE::InstanceChangeListener self) -> InstanceChangeListener"""
        if self.__class__ == InstanceChangeListener:
            _self = None
        else:
            _self = self
        this = _fife.new_InstanceChangeListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_InstanceChangeListener(self)
        return weakref_proxy(self)
InstanceChangeListener_swigregister = _fife.InstanceChangeListener_swigregister
InstanceChangeListener_swigregister(InstanceChangeListener)

class InstanceDeleteListener(_object):
    """Proxy of C++ FIFE::InstanceDeleteListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceDeleteListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceDeleteListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_InstanceDeleteListener
    __del__ = lambda self : None;
    def onInstanceDeleted(self, *args):
        """onInstanceDeleted(InstanceDeleteListener self, Instance instance)"""
        return _fife.InstanceDeleteListener_onInstanceDeleted(self, *args)

    def __init__(self): 
        """__init__(FIFE::InstanceDeleteListener self) -> InstanceDeleteListener"""
        if self.__class__ == InstanceDeleteListener:
            _self = None
        else:
            _self = self
        this = _fife.new_InstanceDeleteListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_InstanceDeleteListener(self)
        return weakref_proxy(self)
InstanceDeleteListener_swigregister = _fife.InstanceDeleteListener_swigregister
InstanceDeleteListener_swigregister(InstanceDeleteListener)

ITYPE_NO_SHAPE = _fife.ITYPE_NO_SHAPE
ITYPE_QUAD_SHAPE = _fife.ITYPE_QUAD_SHAPE
ITYPE_CIRCLE_SHAPE = _fife.ITYPE_CIRCLE_SHAPE
class Instance(FifeClass):
    """Proxy of C++ FIFE::Instance class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instance, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::Instance self, Object object, Location location, std::string const & identifier="") -> Instance
        __init__(FIFE::Instance self, Object object, Location location) -> Instance
        """
        this = _fife.new_Instance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Instance
    __del__ = lambda self : None;
    def getId(self):
        """getId(Instance self) -> std::string const &"""
        return _fife.Instance_getId(self)

    def setId(self, identifier=""):
        """
        setId(Instance self, std::string const & identifier="")
        setId(Instance self)
        """
        return _fife.Instance_setId(self, identifier)

    def getObject(self):
        """getObject(Instance self) -> Object"""
        return _fife.Instance_getObject(self)

    def setLocation(self, *args):
        """setLocation(Instance self, Location loc)"""
        return _fife.Instance_setLocation(self, *args)

    def getLocation(self):
        """getLocation(Instance self) -> Location"""
        return _fife.Instance_getLocation(self)

    def getLocationRef(self):
        """getLocationRef(Instance self) -> Location"""
        return _fife.Instance_getLocationRef(self)

    def getTargetLocation(self):
        """getTargetLocation(Instance self) -> Location"""
        return _fife.Instance_getTargetLocation(self)

    def setRotation(self, *args):
        """setRotation(Instance self, int32_t arg2)"""
        return _fife.Instance_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Instance self) -> int32_t"""
        return _fife.Instance_getRotation(self)

    def getOldRotation(self):
        """getOldRotation(Instance self) -> int32_t"""
        return _fife.Instance_getOldRotation(self)

    def setBlocking(self, *args):
        """setBlocking(Instance self, bool blocking)"""
        return _fife.Instance_setBlocking(self, *args)

    def isBlocking(self):
        """isBlocking(Instance self) -> bool"""
        return _fife.Instance_isBlocking(self)

    def setOverrideBlocking(self, *args):
        """setOverrideBlocking(Instance self, bool overblock)"""
        return _fife.Instance_setOverrideBlocking(self, *args)

    def isOverrideBlocking(self):
        """isOverrideBlocking(Instance self) -> bool"""
        return _fife.Instance_isOverrideBlocking(self)

    def addActionListener(self, *args):
        """addActionListener(Instance self, InstanceActionListener listener)"""
        return _fife.Instance_addActionListener(self, *args)

    def removeActionListener(self, *args):
        """removeActionListener(Instance self, InstanceActionListener listener)"""
        return _fife.Instance_removeActionListener(self, *args)

    def addChangeListener(self, *args):
        """addChangeListener(Instance self, InstanceChangeListener listener)"""
        return _fife.Instance_addChangeListener(self, *args)

    def removeChangeListener(self, *args):
        """removeChangeListener(Instance self, InstanceChangeListener listener)"""
        return _fife.Instance_removeChangeListener(self, *args)

    def addDeleteListener(self, *args):
        """addDeleteListener(Instance self, InstanceDeleteListener listener)"""
        return _fife.Instance_addDeleteListener(self, *args)

    def removeDeleteListener(self, *args):
        """removeDeleteListener(Instance self, InstanceDeleteListener listener)"""
        return _fife.Instance_removeDeleteListener(self, *args)

    def getCurrentAction(self):
        """getCurrentAction(Instance self) -> Action"""
        return _fife.Instance_getCurrentAction(self)

    def getMovementSpeed(self):
        """getMovementSpeed(Instance self) -> double"""
        return _fife.Instance_getMovementSpeed(self)

    def setFacingLocation(self, *args):
        """setFacingLocation(Instance self, Location loc)"""
        return _fife.Instance_setFacingLocation(self, *args)

    def getFacingLocation(self):
        """getFacingLocation(Instance self) -> Location"""
        return _fife.Instance_getFacingLocation(self)

    def getActionRuntime(self):
        """getActionRuntime(Instance self) -> uint32_t"""
        return _fife.Instance_getActionRuntime(self)

    def setActionRuntime(self, *args):
        """setActionRuntime(Instance self, uint32_t time_offset)"""
        return _fife.Instance_setActionRuntime(self, *args)

    def move(self, *args):
        """
        move(Instance self, std::string const & actionName, Location target, double const speed, std::string const & costId="")
        move(Instance self, std::string const & actionName, Location target, double const speed)
        """
        return _fife.Instance_move(self, *args)

    def actOnce(self, *args):
        """
        actOnce(Instance self, std::string const & actionName, Location direction)
        actOnce(Instance self, std::string const & actionName, int32_t rotation)
        actOnce(Instance self, std::string const & actionName)
        """
        return _fife.Instance_actOnce(self, *args)

    def actRepeat(self, *args):
        """
        actRepeat(Instance self, std::string const & actionName, Location direction)
        actRepeat(Instance self, std::string const & actionName, int32_t rotation)
        actRepeat(Instance self, std::string const & actionName)
        """
        return _fife.Instance_actRepeat(self, *args)

    def follow(self, *args):
        """
        follow(Instance self, std::string const & actionName, Instance leader, double const speed)
        follow(Instance self, std::string const & actionName, Route route, double const speed)
        """
        return _fife.Instance_follow(self, *args)

    def cancelMovement(self, length=1):
        """
        cancelMovement(Instance self, uint32_t length=1)
        cancelMovement(Instance self)
        """
        return _fife.Instance_cancelMovement(self, length)

    def say(self, *args):
        """
        say(Instance self, std::string const & text, uint32_t duration=0)
        say(Instance self, std::string const & text)
        """
        return _fife.Instance_say(self, *args)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(Instance self, float multip)"""
        return _fife.Instance_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(Instance self) -> float"""
        return _fife.Instance_getTimeMultiplier(self)

    def getRuntime(self):
        """getRuntime(Instance self) -> uint32_t"""
        return _fife.Instance_getRuntime(self)

    def refresh(self):
        """refresh(Instance self)"""
        return _fife.Instance_refresh(self)

    def getChangeInfo(self):
        """getChangeInfo(Instance self) -> FIFE::InstanceChangeInfo"""
        return _fife.Instance_getChangeInfo(self)

    def setVisual(self, *args):
        """setVisual(Instance self, IVisual visual)"""
        return _fife.Instance_setVisual(self, *args)

    def getRoute(self):
        """getRoute(Instance self) -> Route"""
        return _fife.Instance_getRoute(self)

    def setVisitor(self, *args):
        """setVisitor(Instance self, bool visit)"""
        return _fife.Instance_setVisitor(self, *args)

    def isVisitor(self):
        """isVisitor(Instance self) -> bool"""
        return _fife.Instance_isVisitor(self)

    def setVisitorShape(self, *args):
        """setVisitorShape(Instance self, FIFE::VisitorShapeInfo info)"""
        return _fife.Instance_setVisitorShape(self, *args)

    def getVisitorShape(self):
        """getVisitorShape(Instance self) -> FIFE::VisitorShapeInfo"""
        return _fife.Instance_getVisitorShape(self)

    def setVisitorRadius(self, *args):
        """setVisitorRadius(Instance self, uint16_t radius)"""
        return _fife.Instance_setVisitorRadius(self, *args)

    def getVisitorRadius(self):
        """getVisitorRadius(Instance self) -> uint16_t"""
        return _fife.Instance_getVisitorRadius(self)

    def setCellStackPosition(self, *args):
        """setCellStackPosition(Instance self, uint8_t stack)"""
        return _fife.Instance_setCellStackPosition(self, *args)

    def getCellStackPosition(self):
        """getCellStackPosition(Instance self) -> uint8_t"""
        return _fife.Instance_getCellStackPosition(self)

    def isSpecialCost(self):
        """isSpecialCost(Instance self) -> bool"""
        return _fife.Instance_isSpecialCost(self)

    def setCost(self, *args):
        """setCost(Instance self, std::string const & id, double cost)"""
        return _fife.Instance_setCost(self, *args)

    def resetCost(self):
        """resetCost(Instance self)"""
        return _fife.Instance_resetCost(self)

    def getCost(self):
        """getCost(Instance self) -> double"""
        return _fife.Instance_getCost(self)

    def getCostId(self):
        """getCostId(Instance self) -> std::string"""
        return _fife.Instance_getCostId(self)

    def getSpeed(self):
        """getSpeed(Instance self) -> double"""
        return _fife.Instance_getSpeed(self)

    def isSpecialSpeed(self):
        """isSpecialSpeed(Instance self) -> bool"""
        return _fife.Instance_isSpecialSpeed(self)

    def isMultiCell(self):
        """isMultiCell(Instance self) -> bool"""
        return _fife.Instance_isMultiCell(self)

    def addStaticColorOverlay(self, *args):
        """addStaticColorOverlay(Instance self, uint32_t angle, OverlayColors colors)"""
        return _fife.Instance_addStaticColorOverlay(self, *args)

    def getStaticColorOverlay(self, *args):
        """getStaticColorOverlay(Instance self, int32_t angle) -> OverlayColors"""
        return _fife.Instance_getStaticColorOverlay(self, *args)

    def removeStaticColorOverlay(self, *args):
        """removeStaticColorOverlay(Instance self, int32_t angle)"""
        return _fife.Instance_removeStaticColorOverlay(self, *args)

    def isStaticColorOverlay(self):
        """isStaticColorOverlay(Instance self) -> bool"""
        return _fife.Instance_isStaticColorOverlay(self)

    def addAnimationOverlay(self, *args):
        """addAnimationOverlay(Instance self, std::string const actionName, uint32_t angle, int32_t order, SharedAnimationPointer animationptr)"""
        return _fife.Instance_addAnimationOverlay(self, *args)

    def getAnimationOverlay(self, *args):
        """getAnimationOverlay(Instance self, std::string const actionName, int32_t angle) -> AnimationOverlayMap"""
        return _fife.Instance_getAnimationOverlay(self, *args)

    def removeAnimationOverlay(self, *args):
        """removeAnimationOverlay(Instance self, std::string const actionName, uint32_t angle, int32_t order)"""
        return _fife.Instance_removeAnimationOverlay(self, *args)

    def addColorOverlay(self, *args):
        """
        addColorOverlay(Instance self, std::string const actionName, uint32_t angle, OverlayColors colors)
        addColorOverlay(Instance self, std::string const actionName, uint32_t angle, int32_t order, OverlayColors colors)
        """
        return _fife.Instance_addColorOverlay(self, *args)

    def getColorOverlay(self, *args):
        """
        getColorOverlay(Instance self, std::string const actionName, uint32_t angle) -> OverlayColors
        getColorOverlay(Instance self, std::string const actionName, uint32_t angle, int32_t order) -> OverlayColors
        """
        return _fife.Instance_getColorOverlay(self, *args)

    def removeColorOverlay(self, *args):
        """
        removeColorOverlay(Instance self, std::string const actionName, int32_t angle)
        removeColorOverlay(Instance self, std::string const actionName, int32_t angle, int32_t order)
        """
        return _fife.Instance_removeColorOverlay(self, *args)

    def convertToOverlays(self, *args):
        """convertToOverlays(Instance self, std::string const actionName, bool color)"""
        return _fife.Instance_convertToOverlays(self, *args)

    def isAnimationOverlay(self, *args):
        """isAnimationOverlay(Instance self, std::string const actionName) -> bool"""
        return _fife.Instance_isAnimationOverlay(self, *args)

    def isColorOverlay(self, *args):
        """isColorOverlay(Instance self, std::string const actionName) -> bool"""
        return _fife.Instance_isColorOverlay(self, *args)

    def get2dGfxVisual(self):
        """get2dGfxVisual(Instance self) -> InstanceVisual"""
        return _fife.Instance_get2dGfxVisual(self)

Instance_swigregister = _fife.Instance_swigregister
Instance_swigregister(Instance)

class InstanceVector(_object):
    """Proxy of C++ std::vector<(p.FIFE::Instance)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(InstanceVector self) -> SwigPyIterator"""
        return _fife.InstanceVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(InstanceVector self) -> bool"""
        return _fife.InstanceVector___nonzero__(self)

    def __bool__(self):
        """__bool__(InstanceVector self) -> bool"""
        return _fife.InstanceVector___bool__(self)

    def __len__(self):
        """__len__(InstanceVector self) -> std::vector< FIFE::Instance * >::size_type"""
        return _fife.InstanceVector___len__(self)

    def pop(self):
        """pop(InstanceVector self) -> Instance"""
        return _fife.InstanceVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i, std::vector< FIFE::Instance * >::difference_type j) -> InstanceVector"""
        return _fife.InstanceVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i, std::vector< FIFE::Instance * >::difference_type j, 
            InstanceVector v=std::vector< FIFE::Instance *,std::allocator< FIFE::Instance * > >())
        __setslice__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i, std::vector< FIFE::Instance * >::difference_type j)
        """
        return _fife.InstanceVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i, std::vector< FIFE::Instance * >::difference_type j)"""
        return _fife.InstanceVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i)
        __delitem__(InstanceVector self, PySliceObject * slice)
        """
        return _fife.InstanceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(InstanceVector self, PySliceObject * slice) -> InstanceVector
        __getitem__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i) -> Instance
        """
        return _fife.InstanceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(InstanceVector self, PySliceObject * slice, InstanceVector v)
        __setitem__(InstanceVector self, PySliceObject * slice)
        __setitem__(InstanceVector self, std::vector< FIFE::Instance * >::difference_type i, Instance x)
        """
        return _fife.InstanceVector___setitem__(self, *args)

    def append(self, *args):
        """append(InstanceVector self, Instance x)"""
        return _fife.InstanceVector_append(self, *args)

    def empty(self):
        """empty(InstanceVector self) -> bool"""
        return _fife.InstanceVector_empty(self)

    def size(self):
        """size(InstanceVector self) -> std::vector< FIFE::Instance * >::size_type"""
        return _fife.InstanceVector_size(self)

    def clear(self):
        """clear(InstanceVector self)"""
        return _fife.InstanceVector_clear(self)

    def swap(self, *args):
        """swap(InstanceVector self, InstanceVector v)"""
        return _fife.InstanceVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(InstanceVector self) -> std::vector< FIFE::Instance * >::allocator_type"""
        return _fife.InstanceVector_get_allocator(self)

    def begin(self):
        """begin(InstanceVector self) -> std::vector< FIFE::Instance * >::iterator"""
        return _fife.InstanceVector_begin(self)

    def end(self):
        """end(InstanceVector self) -> std::vector< FIFE::Instance * >::iterator"""
        return _fife.InstanceVector_end(self)

    def rbegin(self):
        """rbegin(InstanceVector self) -> std::vector< FIFE::Instance * >::reverse_iterator"""
        return _fife.InstanceVector_rbegin(self)

    def rend(self):
        """rend(InstanceVector self) -> std::vector< FIFE::Instance * >::reverse_iterator"""
        return _fife.InstanceVector_rend(self)

    def pop_back(self):
        """pop_back(InstanceVector self)"""
        return _fife.InstanceVector_pop_back(self)

    def erase(self, *args):
        """
        erase(InstanceVector self, std::vector< FIFE::Instance * >::iterator pos) -> std::vector< FIFE::Instance * >::iterator
        erase(InstanceVector self, std::vector< FIFE::Instance * >::iterator first, std::vector< FIFE::Instance * >::iterator last) -> std::vector< FIFE::Instance * >::iterator
        """
        return _fife.InstanceVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.FIFE::Instance)> self) -> InstanceVector
        __init__(std::vector<(p.FIFE::Instance)> self, InstanceVector arg2) -> InstanceVector
        __init__(std::vector<(p.FIFE::Instance)> self, std::vector< FIFE::Instance * >::size_type size) -> InstanceVector
        __init__(std::vector<(p.FIFE::Instance)> self, std::vector< FIFE::Instance * >::size_type size, Instance value) -> InstanceVector
        """
        this = _fife.new_InstanceVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(InstanceVector self, Instance x)"""
        return _fife.InstanceVector_push_back(self, *args)

    def front(self):
        """front(InstanceVector self) -> Instance"""
        return _fife.InstanceVector_front(self)

    def back(self):
        """back(InstanceVector self) -> Instance"""
        return _fife.InstanceVector_back(self)

    def assign(self, *args):
        """assign(InstanceVector self, std::vector< FIFE::Instance * >::size_type n, Instance x)"""
        return _fife.InstanceVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(InstanceVector self, std::vector< FIFE::Instance * >::size_type new_size)
        resize(InstanceVector self, std::vector< FIFE::Instance * >::size_type new_size, Instance x)
        """
        return _fife.InstanceVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(InstanceVector self, std::vector< FIFE::Instance * >::iterator pos, Instance x) -> std::vector< FIFE::Instance * >::iterator
        insert(InstanceVector self, std::vector< FIFE::Instance * >::iterator pos, std::vector< FIFE::Instance * >::size_type n, 
            Instance x)
        """
        return _fife.InstanceVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(InstanceVector self, std::vector< FIFE::Instance * >::size_type n)"""
        return _fife.InstanceVector_reserve(self, *args)

    def capacity(self):
        """capacity(InstanceVector self) -> std::vector< FIFE::Instance * >::size_type"""
        return _fife.InstanceVector_capacity(self)

    __swig_destroy__ = _fife.delete_InstanceVector
    __del__ = lambda self : None;
InstanceVector_swigregister = _fife.InstanceVector_swigregister
InstanceVector_swigregister(InstanceVector)

class InstanceList(_object):
    """Proxy of C++ std::list<(p.FIFE::Instance)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(InstanceList self) -> SwigPyIterator"""
        return _fife.InstanceList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(InstanceList self) -> bool"""
        return _fife.InstanceList___nonzero__(self)

    def __bool__(self):
        """__bool__(InstanceList self) -> bool"""
        return _fife.InstanceList___bool__(self)

    def __len__(self):
        """__len__(InstanceList self) -> std::list< FIFE::Instance * >::size_type"""
        return _fife.InstanceList___len__(self)

    def pop(self):
        """pop(InstanceList self) -> Instance"""
        return _fife.InstanceList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(InstanceList self, std::list< FIFE::Instance * >::difference_type i, std::list< FIFE::Instance * >::difference_type j) -> InstanceList"""
        return _fife.InstanceList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(InstanceList self, std::list< FIFE::Instance * >::difference_type i, std::list< FIFE::Instance * >::difference_type j, 
            InstanceList v=std::list< FIFE::Instance *,std::allocator< FIFE::Instance * > >())
        __setslice__(InstanceList self, std::list< FIFE::Instance * >::difference_type i, std::list< FIFE::Instance * >::difference_type j)
        """
        return _fife.InstanceList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(InstanceList self, std::list< FIFE::Instance * >::difference_type i, std::list< FIFE::Instance * >::difference_type j)"""
        return _fife.InstanceList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(InstanceList self, std::list< FIFE::Instance * >::difference_type i)
        __delitem__(InstanceList self, PySliceObject * slice)
        """
        return _fife.InstanceList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(InstanceList self, PySliceObject * slice) -> InstanceList
        __getitem__(InstanceList self, std::list< FIFE::Instance * >::difference_type i) -> Instance
        """
        return _fife.InstanceList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(InstanceList self, PySliceObject * slice, InstanceList v)
        __setitem__(InstanceList self, PySliceObject * slice)
        __setitem__(InstanceList self, std::list< FIFE::Instance * >::difference_type i, Instance x)
        """
        return _fife.InstanceList___setitem__(self, *args)

    def append(self, *args):
        """append(InstanceList self, Instance x)"""
        return _fife.InstanceList_append(self, *args)

    def empty(self):
        """empty(InstanceList self) -> bool"""
        return _fife.InstanceList_empty(self)

    def size(self):
        """size(InstanceList self) -> std::list< FIFE::Instance * >::size_type"""
        return _fife.InstanceList_size(self)

    def clear(self):
        """clear(InstanceList self)"""
        return _fife.InstanceList_clear(self)

    def swap(self, *args):
        """swap(InstanceList self, InstanceList v)"""
        return _fife.InstanceList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(InstanceList self) -> std::list< FIFE::Instance * >::allocator_type"""
        return _fife.InstanceList_get_allocator(self)

    def begin(self):
        """begin(InstanceList self) -> std::list< FIFE::Instance * >::iterator"""
        return _fife.InstanceList_begin(self)

    def end(self):
        """end(InstanceList self) -> std::list< FIFE::Instance * >::iterator"""
        return _fife.InstanceList_end(self)

    def rbegin(self):
        """rbegin(InstanceList self) -> std::list< FIFE::Instance * >::reverse_iterator"""
        return _fife.InstanceList_rbegin(self)

    def rend(self):
        """rend(InstanceList self) -> std::list< FIFE::Instance * >::reverse_iterator"""
        return _fife.InstanceList_rend(self)

    def pop_back(self):
        """pop_back(InstanceList self)"""
        return _fife.InstanceList_pop_back(self)

    def erase(self, *args):
        """
        erase(InstanceList self, std::list< FIFE::Instance * >::iterator pos) -> std::list< FIFE::Instance * >::iterator
        erase(InstanceList self, std::list< FIFE::Instance * >::iterator first, std::list< FIFE::Instance * >::iterator last) -> std::list< FIFE::Instance * >::iterator
        """
        return _fife.InstanceList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.FIFE::Instance)> self) -> InstanceList
        __init__(std::list<(p.FIFE::Instance)> self, InstanceList arg2) -> InstanceList
        __init__(std::list<(p.FIFE::Instance)> self, std::list< FIFE::Instance * >::size_type size) -> InstanceList
        __init__(std::list<(p.FIFE::Instance)> self, std::list< FIFE::Instance * >::size_type size, Instance value) -> InstanceList
        """
        this = _fife.new_InstanceList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(InstanceList self, Instance x)"""
        return _fife.InstanceList_push_back(self, *args)

    def front(self):
        """front(InstanceList self) -> Instance"""
        return _fife.InstanceList_front(self)

    def back(self):
        """back(InstanceList self) -> Instance"""
        return _fife.InstanceList_back(self)

    def assign(self, *args):
        """assign(InstanceList self, std::list< FIFE::Instance * >::size_type n, Instance x)"""
        return _fife.InstanceList_assign(self, *args)

    def resize(self, *args):
        """
        resize(InstanceList self, std::list< FIFE::Instance * >::size_type new_size)
        resize(InstanceList self, std::list< FIFE::Instance * >::size_type new_size, Instance x)
        """
        return _fife.InstanceList_resize(self, *args)

    def insert(self, *args):
        """
        insert(InstanceList self, std::list< FIFE::Instance * >::iterator pos, Instance x) -> std::list< FIFE::Instance * >::iterator
        insert(InstanceList self, std::list< FIFE::Instance * >::iterator pos, std::list< FIFE::Instance * >::size_type n, 
            Instance x)
        """
        return _fife.InstanceList_insert(self, *args)

    def pop_front(self):
        """pop_front(InstanceList self)"""
        return _fife.InstanceList_pop_front(self)

    def push_front(self, *args):
        """push_front(InstanceList self, Instance x)"""
        return _fife.InstanceList_push_front(self, *args)

    def remove(self, *args):
        """remove(InstanceList self, Instance x)"""
        return _fife.InstanceList_remove(self, *args)

    def unique(self):
        """unique(InstanceList self)"""
        return _fife.InstanceList_unique(self)

    def reverse(self):
        """reverse(InstanceList self)"""
        return _fife.InstanceList_reverse(self)

    def sort(self):
        """sort(InstanceList self)"""
        return _fife.InstanceList_sort(self)

    def merge(self, *args):
        """merge(InstanceList self, InstanceList x)"""
        return _fife.InstanceList_merge(self, *args)

    __swig_destroy__ = _fife.delete_InstanceList
    __del__ = lambda self : None;
InstanceList_swigregister = _fife.InstanceList_swigregister
InstanceList_swigregister(InstanceList)

class AnimationOverlayMap(_object):
    """Proxy of C++ std::map<(int32_t,FIFE::AnimationPtr)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationOverlayMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationOverlayMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(AnimationOverlayMap self) -> SwigPyIterator"""
        return _fife.AnimationOverlayMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(AnimationOverlayMap self) -> bool"""
        return _fife.AnimationOverlayMap___nonzero__(self)

    def __bool__(self):
        """__bool__(AnimationOverlayMap self) -> bool"""
        return _fife.AnimationOverlayMap___bool__(self)

    def __len__(self):
        """__len__(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::size_type"""
        return _fife.AnimationOverlayMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """__getitem__(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & key) -> SharedAnimationPointer"""
        return _fife.AnimationOverlayMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & key)"""
        return _fife.AnimationOverlayMap___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & key) -> bool"""
        return _fife.AnimationOverlayMap_has_key(self, *args)

    def keys(self):
        """keys(AnimationOverlayMap self) -> PyObject *"""
        return _fife.AnimationOverlayMap_keys(self)

    def values(self):
        """values(AnimationOverlayMap self) -> PyObject *"""
        return _fife.AnimationOverlayMap_values(self)

    def items(self):
        """items(AnimationOverlayMap self) -> PyObject *"""
        return _fife.AnimationOverlayMap_items(self)

    def __contains__(self, *args):
        """__contains__(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & key) -> bool"""
        return _fife.AnimationOverlayMap___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(AnimationOverlayMap self) -> SwigPyIterator"""
        return _fife.AnimationOverlayMap_key_iterator(self)

    def value_iterator(self):
        """value_iterator(AnimationOverlayMap self) -> SwigPyIterator"""
        return _fife.AnimationOverlayMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & key)
        __setitem__(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & key, SharedAnimationPointer x)
        """
        return _fife.AnimationOverlayMap___setitem__(self, *args)

    def asdict(self):
        """asdict(AnimationOverlayMap self) -> PyObject *"""
        return _fife.AnimationOverlayMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(std::map<(int32_t,FIFE::AnimationPtr)> self, std::less< int > const & arg2) -> AnimationOverlayMap
        __init__(std::map<(int32_t,FIFE::AnimationPtr)> self) -> AnimationOverlayMap
        __init__(std::map<(int32_t,FIFE::AnimationPtr)> self, AnimationOverlayMap arg2) -> AnimationOverlayMap
        """
        this = _fife.new_AnimationOverlayMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(AnimationOverlayMap self) -> bool"""
        return _fife.AnimationOverlayMap_empty(self)

    def size(self):
        """size(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::size_type"""
        return _fife.AnimationOverlayMap_size(self)

    def clear(self):
        """clear(AnimationOverlayMap self)"""
        return _fife.AnimationOverlayMap_clear(self)

    def swap(self, *args):
        """swap(AnimationOverlayMap self, AnimationOverlayMap v)"""
        return _fife.AnimationOverlayMap_swap(self, *args)

    def get_allocator(self):
        """get_allocator(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::allocator_type"""
        return _fife.AnimationOverlayMap_get_allocator(self)

    def begin(self):
        """begin(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator"""
        return _fife.AnimationOverlayMap_begin(self)

    def end(self):
        """end(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator"""
        return _fife.AnimationOverlayMap_end(self)

    def rbegin(self):
        """rbegin(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::reverse_iterator"""
        return _fife.AnimationOverlayMap_rbegin(self)

    def rend(self):
        """rend(AnimationOverlayMap self) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::reverse_iterator"""
        return _fife.AnimationOverlayMap_rend(self)

    def count(self, *args):
        """count(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & x) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::size_type"""
        return _fife.AnimationOverlayMap_count(self, *args)

    def erase(self, *args):
        """
        erase(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & x) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::size_type
        erase(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator position)
        erase(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator first, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator last)
        """
        return _fife.AnimationOverlayMap_erase(self, *args)

    def find(self, *args):
        """find(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & x) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator"""
        return _fife.AnimationOverlayMap_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & x) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator"""
        return _fife.AnimationOverlayMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(AnimationOverlayMap self, std::map< int,FIFE::SharedPtr< FIFE::Animation > >::key_type const & x) -> std::map< int,FIFE::SharedPtr< FIFE::Animation > >::iterator"""
        return _fife.AnimationOverlayMap_upper_bound(self, *args)

    __swig_destroy__ = _fife.delete_AnimationOverlayMap
    __del__ = lambda self : None;
AnimationOverlayMap_swigregister = _fife.AnimationOverlayMap_swigregister
AnimationOverlayMap_swigregister(AnimationOverlayMap)

ROUTE_CREATED = _fife.ROUTE_CREATED
ROUTE_SEARCHING = _fife.ROUTE_SEARCHING
ROUTE_SEARCHED = _fife.ROUTE_SEARCHED
ROUTE_SOLVED = _fife.ROUTE_SOLVED
ROUTE_FAILED = _fife.ROUTE_FAILED
class Route(FifeClass):
    """Proxy of C++ FIFE::Route class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Route, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Route, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Route self, Location start, Location end) -> Route"""
        this = _fife.new_Route(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Route
    __del__ = lambda self : None;
    def setRouteStatus(self, *args):
        """setRouteStatus(Route self, FIFE::RouteStatusInfo status)"""
        return _fife.Route_setRouteStatus(self, *args)

    def getRouteStatus(self):
        """getRouteStatus(Route self) -> FIFE::RouteStatusInfo"""
        return _fife.Route_getRouteStatus(self)

    def setStartNode(self, *args):
        """setStartNode(Route self, Location node)"""
        return _fife.Route_setStartNode(self, *args)

    def getStartNode(self):
        """getStartNode(Route self) -> Location"""
        return _fife.Route_getStartNode(self)

    def setEndNode(self, *args):
        """setEndNode(Route self, Location node)"""
        return _fife.Route_setEndNode(self, *args)

    def getEndNode(self):
        """getEndNode(Route self) -> Location"""
        return _fife.Route_getEndNode(self)

    def getCurrentNode(self):
        """getCurrentNode(Route self) -> Location"""
        return _fife.Route_getCurrentNode(self)

    def getPreviousNode(self):
        """getPreviousNode(Route self) -> Location"""
        return _fife.Route_getPreviousNode(self)

    def getNextNode(self):
        """getNextNode(Route self) -> Location"""
        return _fife.Route_getNextNode(self)

    def walkToNextNode(self, step=1):
        """
        walkToNextNode(Route self, int32_t step=1) -> bool
        walkToNextNode(Route self) -> bool
        """
        return _fife.Route_walkToNextNode(self, step)

    def reachedEnd(self):
        """reachedEnd(Route self) -> bool"""
        return _fife.Route_reachedEnd(self)

    def setPath(self, *args):
        """setPath(Route self, LocationList path)"""
        return _fife.Route_setPath(self, *args)

    def getPath(self):
        """getPath(Route self) -> LocationList"""
        return _fife.Route_getPath(self)

    def cutPath(self, length=1):
        """
        cutPath(Route self, uint32_t length=1)
        cutPath(Route self)
        """
        return _fife.Route_cutPath(self, length)

    def setReplanned(self, *args):
        """setReplanned(Route self, bool replanned)"""
        return _fife.Route_setReplanned(self, *args)

    def isReplanned(self):
        """isReplanned(Route self) -> bool"""
        return _fife.Route_isReplanned(self)

    def getPathLength(self):
        """getPathLength(Route self) -> uint32_t"""
        return _fife.Route_getPathLength(self)

    def getWalkedLength(self):
        """getWalkedLength(Route self) -> uint32_t"""
        return _fife.Route_getWalkedLength(self)

    def setSessionId(self, *args):
        """setSessionId(Route self, int32_t id)"""
        return _fife.Route_setSessionId(self, *args)

    def getSessionId(self):
        """getSessionId(Route self) -> int32_t"""
        return _fife.Route_getSessionId(self)

    def setRotation(self, *args):
        """setRotation(Route self, int32_t rotation)"""
        return _fife.Route_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Route self) -> int32_t"""
        return _fife.Route_getRotation(self)

    def setCostId(self, *args):
        """setCostId(Route self, std::string const & cost)"""
        return _fife.Route_setCostId(self, *args)

    def getCostId(self):
        """getCostId(Route self) -> std::string const &"""
        return _fife.Route_getCostId(self)

    def isMultiCell(self):
        """isMultiCell(Route self) -> bool"""
        return _fife.Route_isMultiCell(self)

    def setOccupiedArea(self, *args):
        """setOccupiedArea(Route self, std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > > const & area)"""
        return _fife.Route_setOccupiedArea(self, *args)

    def getOccupiedArea(self):
        """getOccupiedArea(Route self) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > > const &"""
        return _fife.Route_getOccupiedArea(self)

    def getOccupiedCells(self, *args):
        """getOccupiedCells(Route self, int32_t rotation) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > >"""
        return _fife.Route_getOccupiedCells(self, *args)

    def getZStepRange(self):
        """getZStepRange(Route self) -> int32_t"""
        return _fife.Route_getZStepRange(self)

    def isAreaLimited(self):
        """isAreaLimited(Route self) -> bool"""
        return _fife.Route_isAreaLimited(self)

    def getLimitedAreas(self):
        """getLimitedAreas(Route self) -> StringList"""
        return _fife.Route_getLimitedAreas(self)

    def setDynamicBlockerIgnored(self, *args):
        """setDynamicBlockerIgnored(Route self, bool ignore)"""
        return _fife.Route_setDynamicBlockerIgnored(self, *args)

    def isDynamicBlockerIgnored(self):
        """isDynamicBlockerIgnored(Route self) -> bool"""
        return _fife.Route_isDynamicBlockerIgnored(self)

    def getBlockingPathLocations(self):
        """getBlockingPathLocations(Route self) -> LocationList"""
        return _fife.Route_getBlockingPathLocations(self)

    def setObject(self, *args):
        """setObject(Route self, Object obj)"""
        return _fife.Route_setObject(self, *args)

    def getObject(self):
        """getObject(Route self) -> Object"""
        return _fife.Route_getObject(self)

Route_swigregister = _fife.Route_swigregister
Route_swigregister(Route)

HIGH_PRIORITY = _fife.HIGH_PRIORITY
MEDIUM_PRIORITY = _fife.MEDIUM_PRIORITY
LOW_PRIORITY = _fife.LOW_PRIORITY
class IPather(_object):
    """Proxy of C++ FIFE::IPather class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPather, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPather, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IPather
    __del__ = lambda self : None;
    def createRoute(self, *args):
        """
        createRoute(IPather self, Location start, Location end, bool immediate=False, std::string const & cost_id="") -> Route
        createRoute(IPather self, Location start, Location end, bool immediate=False) -> Route
        createRoute(IPather self, Location start, Location end) -> Route
        """
        return _fife.IPather_createRoute(self, *args)

    def solveRoute(self, *args):
        """
        solveRoute(IPather self, Route route, int32_t priority=MEDIUM_PRIORITY, bool immediate=False) -> bool
        solveRoute(IPather self, Route route, int32_t priority=MEDIUM_PRIORITY) -> bool
        solveRoute(IPather self, Route route) -> bool
        """
        return _fife.IPather_solveRoute(self, *args)

    def followRoute(self, *args):
        """followRoute(IPather self, Location current, Route route, double speed, Location nextLocation) -> bool"""
        return _fife.IPather_followRoute(self, *args)

    def update(self):
        """update(IPather self)"""
        return _fife.IPather_update(self)

    def cancelSession(self, *args):
        """cancelSession(IPather self, int32_t const sessionId) -> bool"""
        return _fife.IPather_cancelSession(self, *args)

    def setMaxTicks(self, *args):
        """setMaxTicks(IPather self, int32_t ticks)"""
        return _fife.IPather_setMaxTicks(self, *args)

    def getMaxTicks(self):
        """getMaxTicks(IPather self) -> int32_t"""
        return _fife.IPather_getMaxTicks(self)

    def getName(self):
        """getName(IPather self) -> std::string"""
        return _fife.IPather_getName(self)

    def __init__(self): 
        """__init__(FIFE::IPather self) -> IPather"""
        if self.__class__ == IPather:
            _self = None
        else:
            _self = self
        this = _fife.new_IPather(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IPather(self)
        return weakref_proxy(self)
IPather_swigregister = _fife.IPather_swigregister
IPather_swigregister(IPather)

class Object(_object):
    """Proxy of C++ FIFE::Object class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::Object self, std::string const & identifier, std::string const & name_space, Object inherited=None) -> Object
        __init__(FIFE::Object self, std::string const & identifier, std::string const & name_space) -> Object
        """
        this = _fife.new_Object(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Object
    __del__ = lambda self : None;
    def getId(self):
        """getId(Object self) -> std::string const &"""
        return _fife.Object_getId(self)

    def getNamespace(self):
        """getNamespace(Object self) -> std::string const &"""
        return _fife.Object_getNamespace(self)

    def setId(self, *args):
        """setId(Object self, std::string const & id)"""
        return _fife.Object_setId(self, *args)

    def createAction(self, *args):
        """
        createAction(Object self, std::string const & identifier, bool is_default=False) -> Action
        createAction(Object self, std::string const & identifier) -> Action
        """
        return _fife.Object_createAction(self, *args)

    def getAction(self, *args):
        """
        getAction(Object self, std::string const & identifier, bool deepsearch=True) -> Action
        getAction(Object self, std::string const & identifier) -> Action
        """
        return _fife.Object_getAction(self, *args)

    def getActionIds(self):
        """getActionIds(Object self) -> StringList"""
        return _fife.Object_getActionIds(self)

    def setDefaultAction(self, *args):
        """setDefaultAction(Object self, std::string const & identifier)"""
        return _fife.Object_setDefaultAction(self, *args)

    def getDefaultAction(self):
        """getDefaultAction(Object self) -> Action"""
        return _fife.Object_getDefaultAction(self)

    def setPather(self, *args):
        """setPather(Object self, IPather pather)"""
        return _fife.Object_setPather(self, *args)

    def getPather(self):
        """getPather(Object self) -> IPather"""
        return _fife.Object_getPather(self)

    def getInherited(self):
        """getInherited(Object self) -> Object"""
        return _fife.Object_getInherited(self)

    def adoptVisual(self, *args):
        """adoptVisual(Object self, IVisual visual)"""
        return _fife.Object_adoptVisual(self, *args)

    def setBlocking(self, *args):
        """setBlocking(Object self, bool blocking)"""
        return _fife.Object_setBlocking(self, *args)

    def isBlocking(self):
        """isBlocking(Object self) -> bool"""
        return _fife.Object_isBlocking(self)

    def setStatic(self, *args):
        """setStatic(Object self, bool stat)"""
        return _fife.Object_setStatic(self, *args)

    def isStatic(self):
        """isStatic(Object self) -> bool"""
        return _fife.Object_isStatic(self)

    def setFilename(self, *args):
        """setFilename(Object self, std::string const & file)"""
        return _fife.Object_setFilename(self, *args)

    def getFilename(self):
        """getFilename(Object self) -> std::string const &"""
        return _fife.Object_getFilename(self)

    def setCellStackPosition(self, *args):
        """setCellStackPosition(Object self, uint8_t position)"""
        return _fife.Object_setCellStackPosition(self, *args)

    def getCellStackPosition(self):
        """getCellStackPosition(Object self) -> uint8_t"""
        return _fife.Object_getCellStackPosition(self)

    def isSpecialCost(self):
        """isSpecialCost(Object self) -> bool"""
        return _fife.Object_isSpecialCost(self)

    def setCostId(self, *args):
        """setCostId(Object self, std::string const & cost)"""
        return _fife.Object_setCostId(self, *args)

    def getCostId(self):
        """getCostId(Object self) -> std::string"""
        return _fife.Object_getCostId(self)

    def setCost(self, *args):
        """setCost(Object self, double cost)"""
        return _fife.Object_setCost(self, *args)

    def getCost(self):
        """getCost(Object self) -> double"""
        return _fife.Object_getCost(self)

    def isSpecialSpeed(self):
        """isSpecialSpeed(Object self) -> bool"""
        return _fife.Object_isSpecialSpeed(self)

    def setSpeed(self, *args):
        """setSpeed(Object self, double cost)"""
        return _fife.Object_setSpeed(self, *args)

    def getSpeed(self):
        """getSpeed(Object self) -> double"""
        return _fife.Object_getSpeed(self)

    def isMultiObject(self):
        """isMultiObject(Object self) -> bool"""
        return _fife.Object_isMultiObject(self)

    def addMultiPartId(self, *args):
        """addMultiPartId(Object self, std::string const & partId)"""
        return _fife.Object_addMultiPartId(self, *args)

    def getMultiPartIds(self):
        """getMultiPartIds(Object self) -> StringList"""
        return _fife.Object_getMultiPartIds(self)

    def removeMultiPartId(self, *args):
        """removeMultiPartId(Object self, std::string const & partId)"""
        return _fife.Object_removeMultiPartId(self, *args)

    def removeAllMultiPartIds(self):
        """removeAllMultiPartIds(Object self)"""
        return _fife.Object_removeAllMultiPartIds(self)

    def isMultiPart(self):
        """isMultiPart(Object self) -> bool"""
        return _fife.Object_isMultiPart(self)

    def setMultiPart(self, *args):
        """setMultiPart(Object self, bool part)"""
        return _fife.Object_setMultiPart(self, *args)

    def addMultiPart(self, *args):
        """addMultiPart(Object self, Object obj)"""
        return _fife.Object_addMultiPart(self, *args)

    def getMultiParts(self):
        """getMultiParts(Object self) -> std::set< FIFE::Object *,std::less< FIFE::Object * >,std::allocator< FIFE::Object * > >"""
        return _fife.Object_getMultiParts(self)

    def removeMultiPart(self, *args):
        """removeMultiPart(Object self, Object obj)"""
        return _fife.Object_removeMultiPart(self, *args)

    def removeMultiParts(self):
        """removeMultiParts(Object self)"""
        return _fife.Object_removeMultiParts(self)

    def addMultiPartCoordinate(self, *args):
        """addMultiPartCoordinate(Object self, int32_t rotation, Point3D coord)"""
        return _fife.Object_addMultiPartCoordinate(self, *args)

    def getMultiPartCoordinates(self, *args):
        """
        getMultiPartCoordinates(Object self) -> std::multimap< int32_t,FIFE::ModelCoordinate >
        getMultiPartCoordinates(Object self, int32_t rotation) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > >
        """
        return _fife.Object_getMultiPartCoordinates(self, *args)

    def getMultiObjectCoordinates(self, *args):
        """getMultiObjectCoordinates(Object self, int32_t rotation) -> std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > >"""
        return _fife.Object_getMultiObjectCoordinates(self, *args)

    def setRotationAnchor(self, *args):
        """setRotationAnchor(Object self, DoublePoint3D anchor)"""
        return _fife.Object_setRotationAnchor(self, *args)

    def getRotationAnchor(self):
        """getRotationAnchor(Object self) -> DoublePoint3D"""
        return _fife.Object_getRotationAnchor(self)

    def setRestrictedRotation(self, *args):
        """setRestrictedRotation(Object self, bool restrict)"""
        return _fife.Object_setRestrictedRotation(self, *args)

    def isRestrictedRotation(self):
        """isRestrictedRotation(Object self) -> bool"""
        return _fife.Object_isRestrictedRotation(self)

    def getRestrictedRotation(self, *args):
        """getRestrictedRotation(Object self, int32_t rotation) -> int32_t"""
        return _fife.Object_getRestrictedRotation(self, *args)

    def setZStepRange(self, *args):
        """setZStepRange(Object self, int32_t zRange)"""
        return _fife.Object_setZStepRange(self, *args)

    def getZStepRange(self):
        """getZStepRange(Object self) -> int32_t"""
        return _fife.Object_getZStepRange(self)

    def setArea(self, *args):
        """setArea(Object self, std::string const & id)"""
        return _fife.Object_setArea(self, *args)

    def getArea(self):
        """getArea(Object self) -> std::string"""
        return _fife.Object_getArea(self)

    def addWalkableArea(self, *args):
        """addWalkableArea(Object self, std::string const & id)"""
        return _fife.Object_addWalkableArea(self, *args)

    def removeWalkableArea(self, *args):
        """removeWalkableArea(Object self, std::string const & id)"""
        return _fife.Object_removeWalkableArea(self, *args)

    def getWalkableAreas(self):
        """getWalkableAreas(Object self) -> StringList"""
        return _fife.Object_getWalkableAreas(self)

    def __eq__(self, *args):
        """__eq__(Object self, Object obj) -> bool"""
        return _fife.Object___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(Object self, Object obj) -> bool"""
        return _fife.Object___ne__(self, *args)

    def get2dGfxVisual(self):
        """get2dGfxVisual(Object self) -> ObjectVisual"""
        return _fife.Object_get2dGfxVisual(self)

Object_swigregister = _fife.Object_swigregister
Object_swigregister(Object)

class TimeProvider(_object):
    """Proxy of C++ FIFE::TimeProvider class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::TimeProvider self, TimeProvider master) -> TimeProvider"""
        this = _fife.new_TimeProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeProvider
    __del__ = lambda self : None;
    def setMultiplier(self, *args):
        """setMultiplier(TimeProvider self, float multiplier)"""
        return _fife.TimeProvider_setMultiplier(self, *args)

    def getMultiplier(self):
        """getMultiplier(TimeProvider self) -> float"""
        return _fife.TimeProvider_getMultiplier(self)

    def getTotalMultiplier(self):
        """getTotalMultiplier(TimeProvider self) -> float"""
        return _fife.TimeProvider_getTotalMultiplier(self)

    def getGameTime(self):
        """getGameTime(TimeProvider self) -> uint32_t"""
        return _fife.TimeProvider_getGameTime(self)

TimeProvider_swigregister = _fife.TimeProvider_swigregister
TimeProvider_swigregister(TimeProvider)

class StringList(_object):
    """Proxy of C++ std::list<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(StringList self) -> SwigPyIterator"""
        return _fife.StringList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(StringList self) -> bool"""
        return _fife.StringList___nonzero__(self)

    def __bool__(self):
        """__bool__(StringList self) -> bool"""
        return _fife.StringList___bool__(self)

    def __len__(self):
        """__len__(StringList self) -> std::list< std::string >::size_type"""
        return _fife.StringList___len__(self)

    def pop(self):
        """pop(StringList self) -> std::list< std::string >::value_type"""
        return _fife.StringList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(StringList self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j) -> StringList"""
        return _fife.StringList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(StringList self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j, 
            StringList v=std::list< std::string,std::allocator< std::string > >())
        __setslice__(StringList self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j)
        """
        return _fife.StringList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(StringList self, std::list< std::string >::difference_type i, std::list< std::string >::difference_type j)"""
        return _fife.StringList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(StringList self, std::list< std::string >::difference_type i)
        __delitem__(StringList self, PySliceObject * slice)
        """
        return _fife.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(StringList self, PySliceObject * slice) -> StringList
        __getitem__(StringList self, std::list< std::string >::difference_type i) -> std::list< std::string >::value_type const &
        """
        return _fife.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(StringList self, PySliceObject * slice, StringList v)
        __setitem__(StringList self, PySliceObject * slice)
        __setitem__(StringList self, std::list< std::string >::difference_type i, std::list< std::string >::value_type const & x)
        """
        return _fife.StringList___setitem__(self, *args)

    def append(self, *args):
        """append(StringList self, std::list< std::string >::value_type const & x)"""
        return _fife.StringList_append(self, *args)

    def empty(self):
        """empty(StringList self) -> bool"""
        return _fife.StringList_empty(self)

    def size(self):
        """size(StringList self) -> std::list< std::string >::size_type"""
        return _fife.StringList_size(self)

    def clear(self):
        """clear(StringList self)"""
        return _fife.StringList_clear(self)

    def swap(self, *args):
        """swap(StringList self, StringList v)"""
        return _fife.StringList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(StringList self) -> std::list< std::string >::allocator_type"""
        return _fife.StringList_get_allocator(self)

    def begin(self):
        """begin(StringList self) -> std::list< std::string >::iterator"""
        return _fife.StringList_begin(self)

    def end(self):
        """end(StringList self) -> std::list< std::string >::iterator"""
        return _fife.StringList_end(self)

    def rbegin(self):
        """rbegin(StringList self) -> std::list< std::string >::reverse_iterator"""
        return _fife.StringList_rbegin(self)

    def rend(self):
        """rend(StringList self) -> std::list< std::string >::reverse_iterator"""
        return _fife.StringList_rend(self)

    def pop_back(self):
        """pop_back(StringList self)"""
        return _fife.StringList_pop_back(self)

    def erase(self, *args):
        """
        erase(StringList self, std::list< std::string >::iterator pos) -> std::list< std::string >::iterator
        erase(StringList self, std::list< std::string >::iterator first, std::list< std::string >::iterator last) -> std::list< std::string >::iterator
        """
        return _fife.StringList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(std::string)> self) -> StringList
        __init__(std::list<(std::string)> self, StringList arg2) -> StringList
        __init__(std::list<(std::string)> self, std::list< std::string >::size_type size) -> StringList
        __init__(std::list<(std::string)> self, std::list< std::string >::size_type size, std::list< std::string >::value_type const & value) -> StringList
        """
        this = _fife.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(StringList self, std::list< std::string >::value_type const & x)"""
        return _fife.StringList_push_back(self, *args)

    def front(self):
        """front(StringList self) -> std::list< std::string >::value_type const &"""
        return _fife.StringList_front(self)

    def back(self):
        """back(StringList self) -> std::list< std::string >::value_type const &"""
        return _fife.StringList_back(self)

    def assign(self, *args):
        """assign(StringList self, std::list< std::string >::size_type n, std::list< std::string >::value_type const & x)"""
        return _fife.StringList_assign(self, *args)

    def resize(self, *args):
        """
        resize(StringList self, std::list< std::string >::size_type new_size)
        resize(StringList self, std::list< std::string >::size_type new_size, std::list< std::string >::value_type const & x)
        """
        return _fife.StringList_resize(self, *args)

    def insert(self, *args):
        """
        insert(StringList self, std::list< std::string >::iterator pos, std::list< std::string >::value_type const & x) -> std::list< std::string >::iterator
        insert(StringList self, std::list< std::string >::iterator pos, std::list< std::string >::size_type n, std::list< std::string >::value_type const & x)
        """
        return _fife.StringList_insert(self, *args)

    def pop_front(self):
        """pop_front(StringList self)"""
        return _fife.StringList_pop_front(self)

    def push_front(self, *args):
        """push_front(StringList self, std::list< std::string >::value_type const & x)"""
        return _fife.StringList_push_front(self, *args)

    def reverse(self):
        """reverse(StringList self)"""
        return _fife.StringList_reverse(self)

    __swig_destroy__ = _fife.delete_StringList
    __del__ = lambda self : None;
StringList_swigregister = _fife.StringList_swigregister
StringList_swigregister(StringList)

class ObjectList(_object):
    """Proxy of C++ std::list<(p.FIFE::Object)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(ObjectList self) -> SwigPyIterator"""
        return _fife.ObjectList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ObjectList self) -> bool"""
        return _fife.ObjectList___nonzero__(self)

    def __bool__(self):
        """__bool__(ObjectList self) -> bool"""
        return _fife.ObjectList___bool__(self)

    def __len__(self):
        """__len__(ObjectList self) -> std::list< FIFE::Object * >::size_type"""
        return _fife.ObjectList___len__(self)

    def pop(self):
        """pop(ObjectList self) -> Object"""
        return _fife.ObjectList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(ObjectList self, std::list< FIFE::Object * >::difference_type i, std::list< FIFE::Object * >::difference_type j) -> ObjectList"""
        return _fife.ObjectList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ObjectList self, std::list< FIFE::Object * >::difference_type i, std::list< FIFE::Object * >::difference_type j, 
            ObjectList v=std::list< FIFE::Object *,std::allocator< FIFE::Object * > >())
        __setslice__(ObjectList self, std::list< FIFE::Object * >::difference_type i, std::list< FIFE::Object * >::difference_type j)
        """
        return _fife.ObjectList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ObjectList self, std::list< FIFE::Object * >::difference_type i, std::list< FIFE::Object * >::difference_type j)"""
        return _fife.ObjectList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ObjectList self, std::list< FIFE::Object * >::difference_type i)
        __delitem__(ObjectList self, PySliceObject * slice)
        """
        return _fife.ObjectList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ObjectList self, PySliceObject * slice) -> ObjectList
        __getitem__(ObjectList self, std::list< FIFE::Object * >::difference_type i) -> Object
        """
        return _fife.ObjectList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ObjectList self, PySliceObject * slice, ObjectList v)
        __setitem__(ObjectList self, PySliceObject * slice)
        __setitem__(ObjectList self, std::list< FIFE::Object * >::difference_type i, Object x)
        """
        return _fife.ObjectList___setitem__(self, *args)

    def append(self, *args):
        """append(ObjectList self, Object x)"""
        return _fife.ObjectList_append(self, *args)

    def empty(self):
        """empty(ObjectList self) -> bool"""
        return _fife.ObjectList_empty(self)

    def size(self):
        """size(ObjectList self) -> std::list< FIFE::Object * >::size_type"""
        return _fife.ObjectList_size(self)

    def clear(self):
        """clear(ObjectList self)"""
        return _fife.ObjectList_clear(self)

    def swap(self, *args):
        """swap(ObjectList self, ObjectList v)"""
        return _fife.ObjectList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(ObjectList self) -> std::list< FIFE::Object * >::allocator_type"""
        return _fife.ObjectList_get_allocator(self)

    def begin(self):
        """begin(ObjectList self) -> std::list< FIFE::Object * >::iterator"""
        return _fife.ObjectList_begin(self)

    def end(self):
        """end(ObjectList self) -> std::list< FIFE::Object * >::iterator"""
        return _fife.ObjectList_end(self)

    def rbegin(self):
        """rbegin(ObjectList self) -> std::list< FIFE::Object * >::reverse_iterator"""
        return _fife.ObjectList_rbegin(self)

    def rend(self):
        """rend(ObjectList self) -> std::list< FIFE::Object * >::reverse_iterator"""
        return _fife.ObjectList_rend(self)

    def pop_back(self):
        """pop_back(ObjectList self)"""
        return _fife.ObjectList_pop_back(self)

    def erase(self, *args):
        """
        erase(ObjectList self, std::list< FIFE::Object * >::iterator pos) -> std::list< FIFE::Object * >::iterator
        erase(ObjectList self, std::list< FIFE::Object * >::iterator first, std::list< FIFE::Object * >::iterator last) -> std::list< FIFE::Object * >::iterator
        """
        return _fife.ObjectList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.FIFE::Object)> self) -> ObjectList
        __init__(std::list<(p.FIFE::Object)> self, ObjectList arg2) -> ObjectList
        __init__(std::list<(p.FIFE::Object)> self, std::list< FIFE::Object * >::size_type size) -> ObjectList
        __init__(std::list<(p.FIFE::Object)> self, std::list< FIFE::Object * >::size_type size, Object value) -> ObjectList
        """
        this = _fife.new_ObjectList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(ObjectList self, Object x)"""
        return _fife.ObjectList_push_back(self, *args)

    def front(self):
        """front(ObjectList self) -> Object"""
        return _fife.ObjectList_front(self)

    def back(self):
        """back(ObjectList self) -> Object"""
        return _fife.ObjectList_back(self)

    def assign(self, *args):
        """assign(ObjectList self, std::list< FIFE::Object * >::size_type n, Object x)"""
        return _fife.ObjectList_assign(self, *args)

    def resize(self, *args):
        """
        resize(ObjectList self, std::list< FIFE::Object * >::size_type new_size)
        resize(ObjectList self, std::list< FIFE::Object * >::size_type new_size, Object x)
        """
        return _fife.ObjectList_resize(self, *args)

    def insert(self, *args):
        """
        insert(ObjectList self, std::list< FIFE::Object * >::iterator pos, Object x) -> std::list< FIFE::Object * >::iterator
        insert(ObjectList self, std::list< FIFE::Object * >::iterator pos, std::list< FIFE::Object * >::size_type n, 
            Object x)
        """
        return _fife.ObjectList_insert(self, *args)

    def pop_front(self):
        """pop_front(ObjectList self)"""
        return _fife.ObjectList_pop_front(self)

    def push_front(self, *args):
        """push_front(ObjectList self, Object x)"""
        return _fife.ObjectList_push_front(self, *args)

    def remove(self, *args):
        """remove(ObjectList self, Object x)"""
        return _fife.ObjectList_remove(self, *args)

    def unique(self):
        """unique(ObjectList self)"""
        return _fife.ObjectList_unique(self)

    def reverse(self):
        """reverse(ObjectList self)"""
        return _fife.ObjectList_reverse(self)

    def sort(self):
        """sort(ObjectList self)"""
        return _fife.ObjectList_sort(self)

    def merge(self, *args):
        """merge(ObjectList self, ObjectList x)"""
        return _fife.ObjectList_merge(self, *args)

    __swig_destroy__ = _fife.delete_ObjectList
    __del__ = lambda self : None;
ObjectList_swigregister = _fife.ObjectList_swigregister
ObjectList_swigregister(ObjectList)

class MapList(_object):
    """Proxy of C++ std::list<(p.FIFE::Map)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(MapList self) -> SwigPyIterator"""
        return _fife.MapList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(MapList self) -> bool"""
        return _fife.MapList___nonzero__(self)

    def __bool__(self):
        """__bool__(MapList self) -> bool"""
        return _fife.MapList___bool__(self)

    def __len__(self):
        """__len__(MapList self) -> std::list< FIFE::Map * >::size_type"""
        return _fife.MapList___len__(self)

    def pop(self):
        """pop(MapList self) -> Map"""
        return _fife.MapList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(MapList self, std::list< FIFE::Map * >::difference_type i, std::list< FIFE::Map * >::difference_type j) -> MapList"""
        return _fife.MapList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(MapList self, std::list< FIFE::Map * >::difference_type i, std::list< FIFE::Map * >::difference_type j, 
            MapList v=std::list< FIFE::Map *,std::allocator< FIFE::Map * > >())
        __setslice__(MapList self, std::list< FIFE::Map * >::difference_type i, std::list< FIFE::Map * >::difference_type j)
        """
        return _fife.MapList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(MapList self, std::list< FIFE::Map * >::difference_type i, std::list< FIFE::Map * >::difference_type j)"""
        return _fife.MapList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(MapList self, std::list< FIFE::Map * >::difference_type i)
        __delitem__(MapList self, PySliceObject * slice)
        """
        return _fife.MapList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(MapList self, PySliceObject * slice) -> MapList
        __getitem__(MapList self, std::list< FIFE::Map * >::difference_type i) -> Map
        """
        return _fife.MapList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(MapList self, PySliceObject * slice, MapList v)
        __setitem__(MapList self, PySliceObject * slice)
        __setitem__(MapList self, std::list< FIFE::Map * >::difference_type i, Map x)
        """
        return _fife.MapList___setitem__(self, *args)

    def append(self, *args):
        """append(MapList self, Map x)"""
        return _fife.MapList_append(self, *args)

    def empty(self):
        """empty(MapList self) -> bool"""
        return _fife.MapList_empty(self)

    def size(self):
        """size(MapList self) -> std::list< FIFE::Map * >::size_type"""
        return _fife.MapList_size(self)

    def clear(self):
        """clear(MapList self)"""
        return _fife.MapList_clear(self)

    def swap(self, *args):
        """swap(MapList self, MapList v)"""
        return _fife.MapList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(MapList self) -> std::list< FIFE::Map * >::allocator_type"""
        return _fife.MapList_get_allocator(self)

    def begin(self):
        """begin(MapList self) -> std::list< FIFE::Map * >::iterator"""
        return _fife.MapList_begin(self)

    def end(self):
        """end(MapList self) -> std::list< FIFE::Map * >::iterator"""
        return _fife.MapList_end(self)

    def rbegin(self):
        """rbegin(MapList self) -> std::list< FIFE::Map * >::reverse_iterator"""
        return _fife.MapList_rbegin(self)

    def rend(self):
        """rend(MapList self) -> std::list< FIFE::Map * >::reverse_iterator"""
        return _fife.MapList_rend(self)

    def pop_back(self):
        """pop_back(MapList self)"""
        return _fife.MapList_pop_back(self)

    def erase(self, *args):
        """
        erase(MapList self, std::list< FIFE::Map * >::iterator pos) -> std::list< FIFE::Map * >::iterator
        erase(MapList self, std::list< FIFE::Map * >::iterator first, std::list< FIFE::Map * >::iterator last) -> std::list< FIFE::Map * >::iterator
        """
        return _fife.MapList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.FIFE::Map)> self) -> MapList
        __init__(std::list<(p.FIFE::Map)> self, MapList arg2) -> MapList
        __init__(std::list<(p.FIFE::Map)> self, std::list< FIFE::Map * >::size_type size) -> MapList
        __init__(std::list<(p.FIFE::Map)> self, std::list< FIFE::Map * >::size_type size, Map value) -> MapList
        """
        this = _fife.new_MapList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(MapList self, Map x)"""
        return _fife.MapList_push_back(self, *args)

    def front(self):
        """front(MapList self) -> Map"""
        return _fife.MapList_front(self)

    def back(self):
        """back(MapList self) -> Map"""
        return _fife.MapList_back(self)

    def assign(self, *args):
        """assign(MapList self, std::list< FIFE::Map * >::size_type n, Map x)"""
        return _fife.MapList_assign(self, *args)

    def resize(self, *args):
        """
        resize(MapList self, std::list< FIFE::Map * >::size_type new_size)
        resize(MapList self, std::list< FIFE::Map * >::size_type new_size, Map x)
        """
        return _fife.MapList_resize(self, *args)

    def insert(self, *args):
        """
        insert(MapList self, std::list< FIFE::Map * >::iterator pos, Map x) -> std::list< FIFE::Map * >::iterator
        insert(MapList self, std::list< FIFE::Map * >::iterator pos, std::list< FIFE::Map * >::size_type n, Map x)
        """
        return _fife.MapList_insert(self, *args)

    def pop_front(self):
        """pop_front(MapList self)"""
        return _fife.MapList_pop_front(self)

    def push_front(self, *args):
        """push_front(MapList self, Map x)"""
        return _fife.MapList_push_front(self, *args)

    def remove(self, *args):
        """remove(MapList self, Map x)"""
        return _fife.MapList_remove(self, *args)

    def unique(self):
        """unique(MapList self)"""
        return _fife.MapList_unique(self)

    def reverse(self):
        """reverse(MapList self)"""
        return _fife.MapList_reverse(self)

    def sort(self):
        """sort(MapList self)"""
        return _fife.MapList_sort(self)

    def merge(self, *args):
        """merge(MapList self, MapList x)"""
        return _fife.MapList_merge(self, *args)

    __swig_destroy__ = _fife.delete_MapList
    __del__ = lambda self : None;
MapList_swigregister = _fife.MapList_swigregister
MapList_swigregister(MapList)

class Model(FifeClass):
    """Proxy of C++ FIFE::Model class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Model self, RenderBackend renderbackend, std::vector< FIFE::RendererBase *,std::allocator< FIFE::RendererBase * > > const & renderers) -> Model"""
        this = _fife.new_Model(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Model
    __del__ = lambda self : None;
    def createMap(self, *args):
        """createMap(Model self, std::string const & identifier) -> Map"""
        return _fife.Model_createMap(self, *args)

    def deleteMap(self, *args):
        """deleteMap(Model self, Map arg2)"""
        return _fife.Model_deleteMap(self, *args)

    def getMaps(self):
        """getMaps(Model self) -> MapList"""
        return _fife.Model_getMaps(self)

    def getMap(self, *args):
        """getMap(Model self, std::string const & id) -> Map"""
        return _fife.Model_getMap(self, *args)

    def getNamespaces(self):
        """getNamespaces(Model self) -> StringList"""
        return _fife.Model_getNamespaces(self)

    def createObject(self, *args):
        """
        createObject(Model self, std::string const & identifier, std::string const & name_space, Object parent=None) -> Object
        createObject(Model self, std::string const & identifier, std::string const & name_space) -> Object
        """
        return _fife.Model_createObject(self, *args)

    def deleteObject(self, *args):
        """deleteObject(Model self, Object arg2) -> bool"""
        return _fife.Model_deleteObject(self, *args)

    def deleteObjects(self):
        """deleteObjects(Model self) -> bool"""
        return _fife.Model_deleteObjects(self)

    def getObject(self, *args):
        """getObject(Model self, std::string const & id, std::string const & name_space) -> Object"""
        return _fife.Model_getObject(self, *args)

    def getObjects(self, *args):
        """getObjects(Model self, std::string const & name_space) -> ObjectList"""
        return _fife.Model_getObjects(self, *args)

    def getMapCount(self):
        """getMapCount(Model self) -> uint32_t"""
        return _fife.Model_getMapCount(self)

    def deleteMaps(self):
        """deleteMaps(Model self)"""
        return _fife.Model_deleteMaps(self)

    def adoptPather(self, *args):
        """adoptPather(Model self, IPather pather)"""
        return _fife.Model_adoptPather(self, *args)

    def getPather(self, *args):
        """getPather(Model self, std::string const & pathername) -> IPather"""
        return _fife.Model_getPather(self, *args)

    def getCellGrid(self, *args):
        """getCellGrid(Model self, std::string const & gridtype) -> CellGrid"""
        return _fife.Model_getCellGrid(self, *args)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(Model self, float multip)"""
        return _fife.Model_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(Model self) -> double"""
        return _fife.Model_getTimeMultiplier(self)

Model_swigregister = _fife.Model_swigregister
Model_swigregister(Model)

CTYPE_NO_BLOCKER = _fife.CTYPE_NO_BLOCKER
CTYPE_STATIC_BLOCKER = _fife.CTYPE_STATIC_BLOCKER
CTYPE_DYNAMIC_BLOCKER = _fife.CTYPE_DYNAMIC_BLOCKER
CTYPE_CELL_NO_BLOCKER = _fife.CTYPE_CELL_NO_BLOCKER
CTYPE_CELL_BLOCKER = _fife.CTYPE_CELL_BLOCKER
CELLV_CONCEALED = _fife.CELLV_CONCEALED
CELLV_REVEALED = _fife.CELLV_REVEALED
CELLV_MASKED = _fife.CELLV_MASKED
class CellChangeListener(_object):
    """Proxy of C++ FIFE::CellChangeListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellChangeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellChangeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_CellChangeListener
    __del__ = lambda self : None;
    def onInstanceEnteredCell(self, *args):
        """onInstanceEnteredCell(CellChangeListener self, Cell cell, Instance instance)"""
        return _fife.CellChangeListener_onInstanceEnteredCell(self, *args)

    def onInstanceExitedCell(self, *args):
        """onInstanceExitedCell(CellChangeListener self, Cell cell, Instance instance)"""
        return _fife.CellChangeListener_onInstanceExitedCell(self, *args)

    def onBlockingChangedCell(self, *args):
        """onBlockingChangedCell(CellChangeListener self, Cell cell, FIFE::CellTypeInfo type, bool blocks)"""
        return _fife.CellChangeListener_onBlockingChangedCell(self, *args)

    def __init__(self): 
        """__init__(FIFE::CellChangeListener self) -> CellChangeListener"""
        if self.__class__ == CellChangeListener:
            _self = None
        else:
            _self = self
        this = _fife.new_CellChangeListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_CellChangeListener(self)
        return weakref_proxy(self)
CellChangeListener_swigregister = _fife.CellChangeListener_swigregister
CellChangeListener_swigregister(CellChangeListener)

class CellDeleteListener(_object):
    """Proxy of C++ FIFE::CellDeleteListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellDeleteListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellDeleteListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_CellDeleteListener
    __del__ = lambda self : None;
    def onCellDeleted(self, *args):
        """onCellDeleted(CellDeleteListener self, Cell cell)"""
        return _fife.CellDeleteListener_onCellDeleted(self, *args)

    def __init__(self): 
        """__init__(FIFE::CellDeleteListener self) -> CellDeleteListener"""
        if self.__class__ == CellDeleteListener:
            _self = None
        else:
            _self = self
        this = _fife.new_CellDeleteListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_CellDeleteListener(self)
        return weakref_proxy(self)
CellDeleteListener_swigregister = _fife.CellDeleteListener_swigregister
CellDeleteListener_swigregister(CellDeleteListener)

class Cell(FifeClass):
    """Proxy of C++ FIFE::Cell class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Cell self, int32_t coordint, Point3D coordinate, Layer layer) -> Cell"""
        this = _fife.new_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Cell
    __del__ = lambda self : None;
    def addInstances(self, *args):
        """addInstances(Cell self, InstanceList instances)"""
        return _fife.Cell_addInstances(self, *args)

    def addInstance(self, *args):
        """addInstance(Cell self, Instance instance)"""
        return _fife.Cell_addInstance(self, *args)

    def changeInstance(self, *args):
        """changeInstance(Cell self, Instance instance)"""
        return _fife.Cell_changeInstance(self, *args)

    def removeInstance(self, *args):
        """removeInstance(Cell self, Instance instance)"""
        return _fife.Cell_removeInstance(self, *args)

    def isNeighbor(self, *args):
        """isNeighbor(Cell self, Cell cell) -> bool"""
        return _fife.Cell_isNeighbor(self, *args)

    def getNeighbors(self):
        """getNeighbors(Cell self) -> CellVector"""
        return _fife.Cell_getNeighbors(self)

    def updateCellInfo(self):
        """updateCellInfo(Cell self)"""
        return _fife.Cell_updateCellInfo(self)

    def getCellId(self):
        """getCellId(Cell self) -> int32_t"""
        return _fife.Cell_getCellId(self)

    def getLayerCoordinates(self):
        """getLayerCoordinates(Cell self) -> Point3D"""
        return _fife.Cell_getLayerCoordinates(self)

    def defaultCost(self):
        """defaultCost(Cell self) -> bool"""
        return _fife.Cell_defaultCost(self)

    def setCostMultiplier(self, *args):
        """setCostMultiplier(Cell self, double multi)"""
        return _fife.Cell_setCostMultiplier(self, *args)

    def getCostMultiplier(self):
        """getCostMultiplier(Cell self) -> double"""
        return _fife.Cell_getCostMultiplier(self)

    def resetCostMultiplier(self):
        """resetCostMultiplier(Cell self)"""
        return _fife.Cell_resetCostMultiplier(self)

    def defaultSpeed(self):
        """defaultSpeed(Cell self) -> bool"""
        return _fife.Cell_defaultSpeed(self)

    def setSpeedMultiplier(self, *args):
        """setSpeedMultiplier(Cell self, double multi)"""
        return _fife.Cell_setSpeedMultiplier(self, *args)

    def getSpeedMultiplier(self):
        """getSpeedMultiplier(Cell self) -> double"""
        return _fife.Cell_getSpeedMultiplier(self)

    def resetSpeedMultiplier(self):
        """resetSpeedMultiplier(Cell self)"""
        return _fife.Cell_resetSpeedMultiplier(self)

    def getInstances(self):
        """getInstances(Cell self) -> InstanceSet"""
        return _fife.Cell_getInstances(self)

    def setCellType(self, *args):
        """setCellType(Cell self, FIFE::CellTypeInfo type)"""
        return _fife.Cell_setCellType(self, *args)

    def getCellType(self):
        """getCellType(Cell self) -> FIFE::CellTypeInfo"""
        return _fife.Cell_getCellType(self)

    def setFoWType(self, *args):
        """setFoWType(Cell self, FIFE::CellVisualEffect type)"""
        return _fife.Cell_setFoWType(self, *args)

    def getFoWType(self):
        """getFoWType(Cell self) -> FIFE::CellVisualEffect"""
        return _fife.Cell_getFoWType(self)

    def getLayer(self):
        """getLayer(Cell self) -> Layer"""
        return _fife.Cell_getLayer(self)

    def createTransition(self, *args):
        """createTransition(Cell self, Layer layer, Point3D mc)"""
        return _fife.Cell_createTransition(self, *args)

    def deleteTransition(self):
        """deleteTransition(Cell self)"""
        return _fife.Cell_deleteTransition(self)

    def addChangeListener(self, *args):
        """addChangeListener(Cell self, CellChangeListener listener)"""
        return _fife.Cell_addChangeListener(self, *args)

    def removeChangeListener(self, *args):
        """removeChangeListener(Cell self, CellChangeListener listener)"""
        return _fife.Cell_removeChangeListener(self, *args)

    def addDeleteListener(self, *args):
        """addDeleteListener(Cell self, CellDeleteListener listener)"""
        return _fife.Cell_addDeleteListener(self, *args)

    def removeDeleteListener(self, *args):
        """removeDeleteListener(Cell self, CellDeleteListener listener)"""
        return _fife.Cell_removeDeleteListener(self, *args)

Cell_swigregister = _fife.Cell_swigregister
Cell_swigregister(Cell)

class InstanceSet(_object):
    """Proxy of C++ std::set<(p.FIFE::Instance)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceSet, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(InstanceSet self) -> SwigPyIterator"""
        return _fife.InstanceSet_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(InstanceSet self) -> bool"""
        return _fife.InstanceSet___nonzero__(self)

    def __bool__(self):
        """__bool__(InstanceSet self) -> bool"""
        return _fife.InstanceSet___bool__(self)

    def __len__(self):
        """__len__(InstanceSet self) -> std::set< FIFE::Instance * >::size_type"""
        return _fife.InstanceSet___len__(self)

    def append(self, *args):
        """append(InstanceSet self, Instance x)"""
        return _fife.InstanceSet_append(self, *args)

    def __contains__(self, *args):
        """__contains__(InstanceSet self, Instance x) -> bool"""
        return _fife.InstanceSet___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(InstanceSet self, std::set< FIFE::Instance * >::difference_type i) -> Instance"""
        return _fife.InstanceSet___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::set<(p.FIFE::Instance)> self, std::less< FIFE::Instance * > const & arg2) -> InstanceSet
        __init__(std::set<(p.FIFE::Instance)> self) -> InstanceSet
        __init__(std::set<(p.FIFE::Instance)> self, InstanceSet arg2) -> InstanceSet
        """
        this = _fife.new_InstanceSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(InstanceSet self) -> bool"""
        return _fife.InstanceSet_empty(self)

    def size(self):
        """size(InstanceSet self) -> std::set< FIFE::Instance * >::size_type"""
        return _fife.InstanceSet_size(self)

    def clear(self):
        """clear(InstanceSet self)"""
        return _fife.InstanceSet_clear(self)

    def swap(self, *args):
        """swap(InstanceSet self, InstanceSet v)"""
        return _fife.InstanceSet_swap(self, *args)

    def count(self, *args):
        """count(InstanceSet self, Instance x) -> std::set< FIFE::Instance * >::size_type"""
        return _fife.InstanceSet_count(self, *args)

    def begin(self):
        """begin(InstanceSet self) -> std::set< FIFE::Instance * >::iterator"""
        return _fife.InstanceSet_begin(self)

    def end(self):
        """end(InstanceSet self) -> std::set< FIFE::Instance * >::iterator"""
        return _fife.InstanceSet_end(self)

    def rbegin(self):
        """rbegin(InstanceSet self) -> std::set< FIFE::Instance * >::reverse_iterator"""
        return _fife.InstanceSet_rbegin(self)

    def rend(self):
        """rend(InstanceSet self) -> std::set< FIFE::Instance * >::reverse_iterator"""
        return _fife.InstanceSet_rend(self)

    def erase(self, *args):
        """
        erase(InstanceSet self, Instance x) -> std::set< FIFE::Instance * >::size_type
        erase(InstanceSet self, std::set< FIFE::Instance * >::iterator pos)
        erase(InstanceSet self, std::set< FIFE::Instance * >::iterator first, std::set< FIFE::Instance * >::iterator last)
        """
        return _fife.InstanceSet_erase(self, *args)

    def find(self, *args):
        """find(InstanceSet self, Instance x) -> std::set< FIFE::Instance * >::iterator"""
        return _fife.InstanceSet_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(InstanceSet self, Instance x) -> std::set< FIFE::Instance * >::iterator"""
        return _fife.InstanceSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(InstanceSet self, Instance x) -> std::set< FIFE::Instance * >::iterator"""
        return _fife.InstanceSet_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(InstanceSet self, Instance x) -> std::pair< std::set< FIFE::Instance * >::iterator,std::set< FIFE::Instance * >::iterator >"""
        return _fife.InstanceSet_equal_range(self, *args)

    def insert(self, *args):
        """insert(InstanceSet self, Instance __x) -> std::pair< std::set< FIFE::Instance * >::iterator,bool >"""
        return _fife.InstanceSet_insert(self, *args)

    __swig_destroy__ = _fife.delete_InstanceSet
    __del__ = lambda self : None;
InstanceSet_swigregister = _fife.InstanceSet_swigregister
InstanceSet_swigregister(InstanceSet)

class CellSet(_object):
    """Proxy of C++ std::set<(p.FIFE::Cell)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellSet, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(CellSet self) -> SwigPyIterator"""
        return _fife.CellSet_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(CellSet self) -> bool"""
        return _fife.CellSet___nonzero__(self)

    def __bool__(self):
        """__bool__(CellSet self) -> bool"""
        return _fife.CellSet___bool__(self)

    def __len__(self):
        """__len__(CellSet self) -> std::set< FIFE::Cell * >::size_type"""
        return _fife.CellSet___len__(self)

    def append(self, *args):
        """append(CellSet self, Cell x)"""
        return _fife.CellSet_append(self, *args)

    def __contains__(self, *args):
        """__contains__(CellSet self, Cell x) -> bool"""
        return _fife.CellSet___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(CellSet self, std::set< FIFE::Cell * >::difference_type i) -> Cell"""
        return _fife.CellSet___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::set<(p.FIFE::Cell)> self, std::less< FIFE::Cell * > const & arg2) -> CellSet
        __init__(std::set<(p.FIFE::Cell)> self) -> CellSet
        __init__(std::set<(p.FIFE::Cell)> self, CellSet arg2) -> CellSet
        """
        this = _fife.new_CellSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(CellSet self) -> bool"""
        return _fife.CellSet_empty(self)

    def size(self):
        """size(CellSet self) -> std::set< FIFE::Cell * >::size_type"""
        return _fife.CellSet_size(self)

    def clear(self):
        """clear(CellSet self)"""
        return _fife.CellSet_clear(self)

    def swap(self, *args):
        """swap(CellSet self, CellSet v)"""
        return _fife.CellSet_swap(self, *args)

    def count(self, *args):
        """count(CellSet self, Cell x) -> std::set< FIFE::Cell * >::size_type"""
        return _fife.CellSet_count(self, *args)

    def begin(self):
        """begin(CellSet self) -> std::set< FIFE::Cell * >::iterator"""
        return _fife.CellSet_begin(self)

    def end(self):
        """end(CellSet self) -> std::set< FIFE::Cell * >::iterator"""
        return _fife.CellSet_end(self)

    def rbegin(self):
        """rbegin(CellSet self) -> std::set< FIFE::Cell * >::reverse_iterator"""
        return _fife.CellSet_rbegin(self)

    def rend(self):
        """rend(CellSet self) -> std::set< FIFE::Cell * >::reverse_iterator"""
        return _fife.CellSet_rend(self)

    def erase(self, *args):
        """
        erase(CellSet self, Cell x) -> std::set< FIFE::Cell * >::size_type
        erase(CellSet self, std::set< FIFE::Cell * >::iterator pos)
        erase(CellSet self, std::set< FIFE::Cell * >::iterator first, std::set< FIFE::Cell * >::iterator last)
        """
        return _fife.CellSet_erase(self, *args)

    def find(self, *args):
        """find(CellSet self, Cell x) -> std::set< FIFE::Cell * >::iterator"""
        return _fife.CellSet_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(CellSet self, Cell x) -> std::set< FIFE::Cell * >::iterator"""
        return _fife.CellSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(CellSet self, Cell x) -> std::set< FIFE::Cell * >::iterator"""
        return _fife.CellSet_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(CellSet self, Cell x) -> std::pair< std::set< FIFE::Cell * >::iterator,std::set< FIFE::Cell * >::iterator >"""
        return _fife.CellSet_equal_range(self, *args)

    def insert(self, *args):
        """insert(CellSet self, Cell __x) -> std::pair< std::set< FIFE::Cell * >::iterator,bool >"""
        return _fife.CellSet_insert(self, *args)

    __swig_destroy__ = _fife.delete_CellSet
    __del__ = lambda self : None;
CellSet_swigregister = _fife.CellSet_swigregister
CellSet_swigregister(CellSet)

class CellVector(_object):
    """Proxy of C++ std::vector<(p.FIFE::Cell)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(CellVector self) -> SwigPyIterator"""
        return _fife.CellVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(CellVector self) -> bool"""
        return _fife.CellVector___nonzero__(self)

    def __bool__(self):
        """__bool__(CellVector self) -> bool"""
        return _fife.CellVector___bool__(self)

    def __len__(self):
        """__len__(CellVector self) -> std::vector< FIFE::Cell * >::size_type"""
        return _fife.CellVector___len__(self)

    def pop(self):
        """pop(CellVector self) -> Cell"""
        return _fife.CellVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(CellVector self, std::vector< FIFE::Cell * >::difference_type i, std::vector< FIFE::Cell * >::difference_type j) -> CellVector"""
        return _fife.CellVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(CellVector self, std::vector< FIFE::Cell * >::difference_type i, std::vector< FIFE::Cell * >::difference_type j, 
            CellVector v=std::vector< FIFE::Cell *,std::allocator< FIFE::Cell * > >())
        __setslice__(CellVector self, std::vector< FIFE::Cell * >::difference_type i, std::vector< FIFE::Cell * >::difference_type j)
        """
        return _fife.CellVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(CellVector self, std::vector< FIFE::Cell * >::difference_type i, std::vector< FIFE::Cell * >::difference_type j)"""
        return _fife.CellVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(CellVector self, std::vector< FIFE::Cell * >::difference_type i)
        __delitem__(CellVector self, PySliceObject * slice)
        """
        return _fife.CellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(CellVector self, PySliceObject * slice) -> CellVector
        __getitem__(CellVector self, std::vector< FIFE::Cell * >::difference_type i) -> Cell
        """
        return _fife.CellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(CellVector self, PySliceObject * slice, CellVector v)
        __setitem__(CellVector self, PySliceObject * slice)
        __setitem__(CellVector self, std::vector< FIFE::Cell * >::difference_type i, Cell x)
        """
        return _fife.CellVector___setitem__(self, *args)

    def append(self, *args):
        """append(CellVector self, Cell x)"""
        return _fife.CellVector_append(self, *args)

    def empty(self):
        """empty(CellVector self) -> bool"""
        return _fife.CellVector_empty(self)

    def size(self):
        """size(CellVector self) -> std::vector< FIFE::Cell * >::size_type"""
        return _fife.CellVector_size(self)

    def clear(self):
        """clear(CellVector self)"""
        return _fife.CellVector_clear(self)

    def swap(self, *args):
        """swap(CellVector self, CellVector v)"""
        return _fife.CellVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(CellVector self) -> std::vector< FIFE::Cell * >::allocator_type"""
        return _fife.CellVector_get_allocator(self)

    def begin(self):
        """begin(CellVector self) -> std::vector< FIFE::Cell * >::iterator"""
        return _fife.CellVector_begin(self)

    def end(self):
        """end(CellVector self) -> std::vector< FIFE::Cell * >::iterator"""
        return _fife.CellVector_end(self)

    def rbegin(self):
        """rbegin(CellVector self) -> std::vector< FIFE::Cell * >::reverse_iterator"""
        return _fife.CellVector_rbegin(self)

    def rend(self):
        """rend(CellVector self) -> std::vector< FIFE::Cell * >::reverse_iterator"""
        return _fife.CellVector_rend(self)

    def pop_back(self):
        """pop_back(CellVector self)"""
        return _fife.CellVector_pop_back(self)

    def erase(self, *args):
        """
        erase(CellVector self, std::vector< FIFE::Cell * >::iterator pos) -> std::vector< FIFE::Cell * >::iterator
        erase(CellVector self, std::vector< FIFE::Cell * >::iterator first, std::vector< FIFE::Cell * >::iterator last) -> std::vector< FIFE::Cell * >::iterator
        """
        return _fife.CellVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.FIFE::Cell)> self) -> CellVector
        __init__(std::vector<(p.FIFE::Cell)> self, CellVector arg2) -> CellVector
        __init__(std::vector<(p.FIFE::Cell)> self, std::vector< FIFE::Cell * >::size_type size) -> CellVector
        __init__(std::vector<(p.FIFE::Cell)> self, std::vector< FIFE::Cell * >::size_type size, Cell value) -> CellVector
        """
        this = _fife.new_CellVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(CellVector self, Cell x)"""
        return _fife.CellVector_push_back(self, *args)

    def front(self):
        """front(CellVector self) -> Cell"""
        return _fife.CellVector_front(self)

    def back(self):
        """back(CellVector self) -> Cell"""
        return _fife.CellVector_back(self)

    def assign(self, *args):
        """assign(CellVector self, std::vector< FIFE::Cell * >::size_type n, Cell x)"""
        return _fife.CellVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(CellVector self, std::vector< FIFE::Cell * >::size_type new_size)
        resize(CellVector self, std::vector< FIFE::Cell * >::size_type new_size, Cell x)
        """
        return _fife.CellVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(CellVector self, std::vector< FIFE::Cell * >::iterator pos, Cell x) -> std::vector< FIFE::Cell * >::iterator
        insert(CellVector self, std::vector< FIFE::Cell * >::iterator pos, std::vector< FIFE::Cell * >::size_type n, 
            Cell x)
        """
        return _fife.CellVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(CellVector self, std::vector< FIFE::Cell * >::size_type n)"""
        return _fife.CellVector_reserve(self, *args)

    def capacity(self):
        """capacity(CellVector self) -> std::vector< FIFE::Cell * >::size_type"""
        return _fife.CellVector_capacity(self)

    __swig_destroy__ = _fife.delete_CellVector
    __del__ = lambda self : None;
CellVector_swigregister = _fife.CellVector_swigregister
CellVector_swigregister(CellVector)

class CellCache(FifeClass):
    """Proxy of C++ FIFE::CellCache class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellCache, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellCache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::CellCache self, Layer layer) -> CellCache"""
        this = _fife.new_CellCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_CellCache
    __del__ = lambda self : None;
    def createCells(self):
        """createCells(CellCache self)"""
        return _fife.CellCache_createCells(self)

    def forceUpdate(self):
        """forceUpdate(CellCache self)"""
        return _fife.CellCache_forceUpdate(self)

    def addCell(self, *args):
        """addCell(CellCache self, Cell cell)"""
        return _fife.CellCache_addCell(self, *args)

    def createCell(self, *args):
        """createCell(CellCache self, Point3D mc) -> Cell"""
        return _fife.CellCache_createCell(self, *args)

    def getCell(self, *args):
        """getCell(CellCache self, Point3D mc) -> Cell"""
        return _fife.CellCache_getCell(self, *args)

    def addInteractOnRuntime(self, *args):
        """addInteractOnRuntime(CellCache self, Layer interact)"""
        return _fife.CellCache_addInteractOnRuntime(self, *args)

    def removeInteractOnRuntime(self, *args):
        """removeInteractOnRuntime(CellCache self, Layer interact)"""
        return _fife.CellCache_removeInteractOnRuntime(self, *args)

    def getSize(self):
        """getSize(CellCache self) -> Rect"""
        return _fife.CellCache_getSize(self)

    def setSize(self, *args):
        """setSize(CellCache self, Rect rec)"""
        return _fife.CellCache_setSize(self, *args)

    def getWidth(self):
        """getWidth(CellCache self) -> uint32_t"""
        return _fife.CellCache_getWidth(self)

    def getHeight(self):
        """getHeight(CellCache self) -> uint32_t"""
        return _fife.CellCache_getHeight(self)

    def getMaxIndex(self):
        """getMaxIndex(CellCache self) -> int32_t"""
        return _fife.CellCache_getMaxIndex(self)

    def setMaxNeighborZ(self, *args):
        """setMaxNeighborZ(CellCache self, int32_t z)"""
        return _fife.CellCache_setMaxNeighborZ(self, *args)

    def getMaxNeighborZ(self):
        """getMaxNeighborZ(CellCache self) -> int32_t"""
        return _fife.CellCache_getMaxNeighborZ(self)

    def isInCellCache(self, *args):
        """isInCellCache(CellCache self, Location location) -> bool"""
        return _fife.CellCache_isInCellCache(self, *args)

    def getCellsInLine(self, *args):
        """
        getCellsInLine(CellCache self, Point3D pt1, Point3D pt2, bool blocker=False) -> CellVector
        getCellsInLine(CellCache self, Point3D pt1, Point3D pt2) -> CellVector
        """
        return _fife.CellCache_getCellsInLine(self, *args)

    def getCellsInRect(self, *args):
        """getCellsInRect(CellCache self, Rect rec) -> CellVector"""
        return _fife.CellCache_getCellsInRect(self, *args)

    def getCellsInCircle(self, *args):
        """getCellsInCircle(CellCache self, Point3D center, uint16_t radius) -> CellVector"""
        return _fife.CellCache_getCellsInCircle(self, *args)

    def getCellsInCircleSegment(self, *args):
        """getCellsInCircleSegment(CellCache self, Point3D center, uint16_t radius, int32_t sangle, int32_t eangle) -> CellVector"""
        return _fife.CellCache_getCellsInCircleSegment(self, *args)

    def registerCost(self, *args):
        """registerCost(CellCache self, std::string const & costId, double cost)"""
        return _fife.CellCache_registerCost(self, *args)

    def unregisterCost(self, *args):
        """unregisterCost(CellCache self, std::string const & costId)"""
        return _fife.CellCache_unregisterCost(self, *args)

    def getCost(self, *args):
        """getCost(CellCache self, std::string const & costId) -> double"""
        return _fife.CellCache_getCost(self, *args)

    def existsCost(self, *args):
        """existsCost(CellCache self, std::string const & costId) -> bool"""
        return _fife.CellCache_existsCost(self, *args)

    def getCosts(self):
        """getCosts(CellCache self) -> StringList"""
        return _fife.CellCache_getCosts(self)

    def unregisterAllCosts(self):
        """unregisterAllCosts(CellCache self)"""
        return _fife.CellCache_unregisterAllCosts(self)

    def addCellToCost(self, *args):
        """addCellToCost(CellCache self, std::string const & costId, Cell cell)"""
        return _fife.CellCache_addCellToCost(self, *args)

    def addCellsToCost(self, *args):
        """addCellsToCost(CellCache self, std::string const & costId, CellVector cells)"""
        return _fife.CellCache_addCellsToCost(self, *args)

    def removeCellFromCost(self, *args):
        """
        removeCellFromCost(CellCache self, Cell cell)
        removeCellFromCost(CellCache self, std::string const & costId, Cell cell)
        """
        return _fife.CellCache_removeCellFromCost(self, *args)

    def removeCellsFromCost(self, *args):
        """removeCellsFromCost(CellCache self, std::string const & costId, CellVector cells)"""
        return _fife.CellCache_removeCellsFromCost(self, *args)

    def getCostCells(self, *args):
        """getCostCells(CellCache self, std::string const & costId) -> CellVector"""
        return _fife.CellCache_getCostCells(self, *args)

    def getCellCosts(self, *args):
        """getCellCosts(CellCache self, Cell cell) -> StringVector"""
        return _fife.CellCache_getCellCosts(self, *args)

    def existsCostForCell(self, *args):
        """existsCostForCell(CellCache self, std::string const & costId, Cell cell) -> bool"""
        return _fife.CellCache_existsCostForCell(self, *args)

    def setDefaultCostMultiplier(self, *args):
        """setDefaultCostMultiplier(CellCache self, double multi)"""
        return _fife.CellCache_setDefaultCostMultiplier(self, *args)

    def getDefaultCostMultiplier(self):
        """getDefaultCostMultiplier(CellCache self) -> double"""
        return _fife.CellCache_getDefaultCostMultiplier(self)

    def setDefaultSpeedMultiplier(self, *args):
        """setDefaultSpeedMultiplier(CellCache self, double multi)"""
        return _fife.CellCache_setDefaultSpeedMultiplier(self, *args)

    def getDefaultSpeedMultiplier(self):
        """getDefaultSpeedMultiplier(CellCache self) -> double"""
        return _fife.CellCache_getDefaultSpeedMultiplier(self)

    def addCellToArea(self, *args):
        """addCellToArea(CellCache self, std::string const & id, Cell cell)"""
        return _fife.CellCache_addCellToArea(self, *args)

    def addCellsToArea(self, *args):
        """addCellsToArea(CellCache self, std::string const & id, CellVector cells)"""
        return _fife.CellCache_addCellsToArea(self, *args)

    def removeCellFromArea(self, *args):
        """removeCellFromArea(CellCache self, std::string const & id, Cell cell)"""
        return _fife.CellCache_removeCellFromArea(self, *args)

    def removeCellsFromArea(self, *args):
        """removeCellsFromArea(CellCache self, std::string const & id, CellVector cells)"""
        return _fife.CellCache_removeCellsFromArea(self, *args)

    def removeArea(self, *args):
        """removeArea(CellCache self, std::string const & id)"""
        return _fife.CellCache_removeArea(self, *args)

    def existsArea(self, *args):
        """existsArea(CellCache self, std::string const & id) -> bool"""
        return _fife.CellCache_existsArea(self, *args)

    def getAreas(self):
        """getAreas(CellCache self) -> StringVector"""
        return _fife.CellCache_getAreas(self)

    def getCellAreas(self, *args):
        """getCellAreas(CellCache self, Cell cell) -> StringVector"""
        return _fife.CellCache_getCellAreas(self, *args)

    def getAreaCells(self, *args):
        """getAreaCells(CellCache self, std::string const & id) -> CellVector"""
        return _fife.CellCache_getAreaCells(self, *args)

    def isCellInArea(self, *args):
        """isCellInArea(CellCache self, std::string const & id, Cell cell) -> bool"""
        return _fife.CellCache_isCellInArea(self, *args)

    def setStaticSize(self, *args):
        """setStaticSize(CellCache self, bool staticSize)"""
        return _fife.CellCache_setStaticSize(self, *args)

    def isStaticSize(self):
        """isStaticSize(CellCache self) -> bool"""
        return _fife.CellCache_isStaticSize(self)

CellCache_swigregister = _fife.CellCache_swigregister
CellCache_swigregister(CellCache)

CELL_EDGES_ONLY = _fife.CELL_EDGES_ONLY
CELL_EDGES_AND_DIAGONALS = _fife.CELL_EDGES_AND_DIAGONALS
SORTING_CAMERA = _fife.SORTING_CAMERA
SORTING_LOCATION = _fife.SORTING_LOCATION
SORTING_CAMERA_AND_LOCATION = _fife.SORTING_CAMERA_AND_LOCATION
class LayerChangeListener(_object):
    """Proxy of C++ FIFE::LayerChangeListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerChangeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerChangeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_LayerChangeListener
    __del__ = lambda self : None;
    def onLayerChanged(self, *args):
        """onLayerChanged(LayerChangeListener self, Layer layer, InstanceVector changedInstances)"""
        return _fife.LayerChangeListener_onLayerChanged(self, *args)

    def onInstanceCreate(self, *args):
        """onInstanceCreate(LayerChangeListener self, Layer layer, Instance instance)"""
        return _fife.LayerChangeListener_onInstanceCreate(self, *args)

    def onInstanceDelete(self, *args):
        """onInstanceDelete(LayerChangeListener self, Layer layer, Instance instance)"""
        return _fife.LayerChangeListener_onInstanceDelete(self, *args)

    def __init__(self): 
        """__init__(FIFE::LayerChangeListener self) -> LayerChangeListener"""
        if self.__class__ == LayerChangeListener:
            _self = None
        else:
            _self = self
        this = _fife.new_LayerChangeListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_LayerChangeListener(self)
        return weakref_proxy(self)
LayerChangeListener_swigregister = _fife.LayerChangeListener_swigregister
LayerChangeListener_swigregister(LayerChangeListener)

class Layer(FifeClass):
    """Proxy of C++ FIFE::Layer class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Layer self, std::string const & identifier, Map map, CellGrid geometry) -> Layer"""
        this = _fife.new_Layer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Layer
    __del__ = lambda self : None;
    def getId(self):
        """getId(Layer self) -> std::string const &"""
        return _fife.Layer_getId(self)

    def setId(self, *args):
        """setId(Layer self, std::string const & id)"""
        return _fife.Layer_setId(self, *args)

    def getCellGrid(self):
        """getCellGrid(Layer self) -> CellGrid"""
        return _fife.Layer_getCellGrid(self)

    def setCellGrid(self, *args):
        """setCellGrid(Layer self, CellGrid grid)"""
        return _fife.Layer_setCellGrid(self, *args)

    def getMap(self):
        """getMap(Layer self) -> Map"""
        return _fife.Layer_getMap(self)

    def hasInstances(self):
        """hasInstances(Layer self) -> bool"""
        return _fife.Layer_hasInstances(self)

    def createInstance(self, *args):
        """
        createInstance(Layer self, Object object, Point3D p, std::string const & id="") -> Instance
        createInstance(Layer self, Object object, Point3D p) -> Instance
        createInstance(Layer self, Object object, DoublePoint3D p, std::string const & id="") -> Instance
        createInstance(Layer self, Object object, DoublePoint3D p) -> Instance
        """
        return _fife.Layer_createInstance(self, *args)

    def addInstance(self, *args):
        """addInstance(Layer self, Instance instance, DoublePoint3D p) -> bool"""
        return _fife.Layer_addInstance(self, *args)

    def deleteInstance(self, *args):
        """deleteInstance(Layer self, Instance object)"""
        return _fife.Layer_deleteInstance(self, *args)

    def getInstances(self, *args):
        """
        getInstances(Layer self) -> InstanceVector
        getInstances(Layer self, std::string const & identifier) -> InstanceVector
        """
        return _fife.Layer_getInstances(self, *args)

    def getInstancesAt(self, *args):
        """
        getInstancesAt(Layer self, Location loc, bool use_exactcoordinates=False) -> InstanceVector
        getInstancesAt(Layer self, Location loc) -> InstanceVector
        """
        return _fife.Layer_getInstancesAt(self, *args)

    def getInstancesIn(self, *args):
        """getInstancesIn(Layer self, Rect rec) -> InstanceList"""
        return _fife.Layer_getInstancesIn(self, *args)

    def getInstancesInLine(self, *args):
        """getInstancesInLine(Layer self, Point3D pt1, Point3D pt2) -> InstanceVector"""
        return _fife.Layer_getInstancesInLine(self, *args)

    def getInstancesInCircle(self, *args):
        """getInstancesInCircle(Layer self, Point3D center, uint16_t radius) -> InstanceVector"""
        return _fife.Layer_getInstancesInCircle(self, *args)

    def getInstancesInCircleSegment(self, *args):
        """getInstancesInCircleSegment(Layer self, Point3D center, uint16_t radius, int32_t sangle, int32_t eangle) -> InstanceVector"""
        return _fife.Layer_getInstancesInCircleSegment(self, *args)

    def getInstance(self, *args):
        """getInstance(Layer self, std::string const & id) -> Instance"""
        return _fife.Layer_getInstance(self, *args)

    def setInstancesVisible(self, *args):
        """setInstancesVisible(Layer self, bool vis)"""
        return _fife.Layer_setInstancesVisible(self, *args)

    def setLayerTransparency(self, *args):
        """setLayerTransparency(Layer self, uint8_t transparency)"""
        return _fife.Layer_setLayerTransparency(self, *args)

    def getLayerTransparency(self):
        """getLayerTransparency(Layer self) -> uint8_t"""
        return _fife.Layer_getLayerTransparency(self)

    def getMinMaxCoordinates(self, *args):
        """
        getMinMaxCoordinates(Layer self, Point3D min, Point3D max, Layer layer=None)
        getMinMaxCoordinates(Layer self, Point3D min, Point3D max)
        """
        return _fife.Layer_getMinMaxCoordinates(self, *args)

    def cellContainsBlockingInstance(self, *args):
        """cellContainsBlockingInstance(Layer self, Point3D cellCoordinate) -> bool"""
        return _fife.Layer_cellContainsBlockingInstance(self, *args)

    def getBlockingInstances(self, *args):
        """getBlockingInstances(Layer self, Point3D cellCoordinate) -> InstanceVector"""
        return _fife.Layer_getBlockingInstances(self, *args)

    def toggleInstancesVisible(self):
        """toggleInstancesVisible(Layer self)"""
        return _fife.Layer_toggleInstancesVisible(self)

    def areInstancesVisible(self):
        """areInstancesVisible(Layer self) -> bool"""
        return _fife.Layer_areInstancesVisible(self)

    def setPathingStrategy(self, *args):
        """setPathingStrategy(Layer self, FIFE::PathingStrategy strategy)"""
        return _fife.Layer_setPathingStrategy(self, *args)

    def getPathingStrategy(self):
        """getPathingStrategy(Layer self) -> FIFE::PathingStrategy"""
        return _fife.Layer_getPathingStrategy(self)

    def setSortingStrategy(self, *args):
        """setSortingStrategy(Layer self, FIFE::SortingStrategy strategy)"""
        return _fife.Layer_setSortingStrategy(self, *args)

    def getSortingStrategy(self):
        """getSortingStrategy(Layer self) -> FIFE::SortingStrategy"""
        return _fife.Layer_getSortingStrategy(self)

    def setWalkable(self, *args):
        """setWalkable(Layer self, bool walkable)"""
        return _fife.Layer_setWalkable(self, *args)

    def isWalkable(self):
        """isWalkable(Layer self) -> bool"""
        return _fife.Layer_isWalkable(self)

    def setInteract(self, *args):
        """setInteract(Layer self, bool interact, std::string const & id)"""
        return _fife.Layer_setInteract(self, *args)

    def isInteract(self):
        """isInteract(Layer self) -> bool"""
        return _fife.Layer_isInteract(self)

    def getWalkableId(self):
        """getWalkableId(Layer self) -> std::string const &"""
        return _fife.Layer_getWalkableId(self)

    def addInteractLayer(self, *args):
        """addInteractLayer(Layer self, Layer layer)"""
        return _fife.Layer_addInteractLayer(self, *args)

    def getInteractLayers(self):
        """getInteractLayers(Layer self) -> LayerVector"""
        return _fife.Layer_getInteractLayers(self)

    def removeInteractLayer(self, *args):
        """removeInteractLayer(Layer self, Layer layer)"""
        return _fife.Layer_removeInteractLayer(self, *args)

    def createCellCache(self):
        """createCellCache(Layer self)"""
        return _fife.Layer_createCellCache(self)

    def getCellCache(self):
        """getCellCache(Layer self) -> CellCache"""
        return _fife.Layer_getCellCache(self)

    def destroyCellCache(self):
        """destroyCellCache(Layer self)"""
        return _fife.Layer_destroyCellCache(self)

    def addChangeListener(self, *args):
        """addChangeListener(Layer self, LayerChangeListener listener)"""
        return _fife.Layer_addChangeListener(self, *args)

    def removeChangeListener(self, *args):
        """removeChangeListener(Layer self, LayerChangeListener listener)"""
        return _fife.Layer_removeChangeListener(self, *args)

    def isChanged(self):
        """isChanged(Layer self) -> bool"""
        return _fife.Layer_isChanged(self)

    def getChangedInstances(self):
        """getChangedInstances(Layer self) -> InstanceVector"""
        return _fife.Layer_getChangedInstances(self)

    def setStatic(self, *args):
        """setStatic(Layer self, bool stati)"""
        return _fife.Layer_setStatic(self, *args)

    def isStatic(self):
        """isStatic(Layer self) -> bool"""
        return _fife.Layer_isStatic(self)

Layer_swigregister = _fife.Layer_swigregister
Layer_swigregister(Layer)

class LayerList(_object):
    """Proxy of C++ std::list<(p.FIFE::Layer)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(LayerList self) -> SwigPyIterator"""
        return _fife.LayerList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(LayerList self) -> bool"""
        return _fife.LayerList___nonzero__(self)

    def __bool__(self):
        """__bool__(LayerList self) -> bool"""
        return _fife.LayerList___bool__(self)

    def __len__(self):
        """__len__(LayerList self) -> std::list< FIFE::Layer * >::size_type"""
        return _fife.LayerList___len__(self)

    def pop(self):
        """pop(LayerList self) -> Layer"""
        return _fife.LayerList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(LayerList self, std::list< FIFE::Layer * >::difference_type i, std::list< FIFE::Layer * >::difference_type j) -> LayerList"""
        return _fife.LayerList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(LayerList self, std::list< FIFE::Layer * >::difference_type i, std::list< FIFE::Layer * >::difference_type j, 
            LayerList v=std::list< FIFE::Layer *,std::allocator< FIFE::Layer * > >())
        __setslice__(LayerList self, std::list< FIFE::Layer * >::difference_type i, std::list< FIFE::Layer * >::difference_type j)
        """
        return _fife.LayerList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(LayerList self, std::list< FIFE::Layer * >::difference_type i, std::list< FIFE::Layer * >::difference_type j)"""
        return _fife.LayerList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(LayerList self, std::list< FIFE::Layer * >::difference_type i)
        __delitem__(LayerList self, PySliceObject * slice)
        """
        return _fife.LayerList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(LayerList self, PySliceObject * slice) -> LayerList
        __getitem__(LayerList self, std::list< FIFE::Layer * >::difference_type i) -> Layer
        """
        return _fife.LayerList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(LayerList self, PySliceObject * slice, LayerList v)
        __setitem__(LayerList self, PySliceObject * slice)
        __setitem__(LayerList self, std::list< FIFE::Layer * >::difference_type i, Layer x)
        """
        return _fife.LayerList___setitem__(self, *args)

    def append(self, *args):
        """append(LayerList self, Layer x)"""
        return _fife.LayerList_append(self, *args)

    def empty(self):
        """empty(LayerList self) -> bool"""
        return _fife.LayerList_empty(self)

    def size(self):
        """size(LayerList self) -> std::list< FIFE::Layer * >::size_type"""
        return _fife.LayerList_size(self)

    def clear(self):
        """clear(LayerList self)"""
        return _fife.LayerList_clear(self)

    def swap(self, *args):
        """swap(LayerList self, LayerList v)"""
        return _fife.LayerList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(LayerList self) -> std::list< FIFE::Layer * >::allocator_type"""
        return _fife.LayerList_get_allocator(self)

    def begin(self):
        """begin(LayerList self) -> std::list< FIFE::Layer * >::iterator"""
        return _fife.LayerList_begin(self)

    def end(self):
        """end(LayerList self) -> std::list< FIFE::Layer * >::iterator"""
        return _fife.LayerList_end(self)

    def rbegin(self):
        """rbegin(LayerList self) -> std::list< FIFE::Layer * >::reverse_iterator"""
        return _fife.LayerList_rbegin(self)

    def rend(self):
        """rend(LayerList self) -> std::list< FIFE::Layer * >::reverse_iterator"""
        return _fife.LayerList_rend(self)

    def pop_back(self):
        """pop_back(LayerList self)"""
        return _fife.LayerList_pop_back(self)

    def erase(self, *args):
        """
        erase(LayerList self, std::list< FIFE::Layer * >::iterator pos) -> std::list< FIFE::Layer * >::iterator
        erase(LayerList self, std::list< FIFE::Layer * >::iterator first, std::list< FIFE::Layer * >::iterator last) -> std::list< FIFE::Layer * >::iterator
        """
        return _fife.LayerList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(p.FIFE::Layer)> self) -> LayerList
        __init__(std::list<(p.FIFE::Layer)> self, LayerList arg2) -> LayerList
        __init__(std::list<(p.FIFE::Layer)> self, std::list< FIFE::Layer * >::size_type size) -> LayerList
        __init__(std::list<(p.FIFE::Layer)> self, std::list< FIFE::Layer * >::size_type size, Layer value) -> LayerList
        """
        this = _fife.new_LayerList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(LayerList self, Layer x)"""
        return _fife.LayerList_push_back(self, *args)

    def front(self):
        """front(LayerList self) -> Layer"""
        return _fife.LayerList_front(self)

    def back(self):
        """back(LayerList self) -> Layer"""
        return _fife.LayerList_back(self)

    def assign(self, *args):
        """assign(LayerList self, std::list< FIFE::Layer * >::size_type n, Layer x)"""
        return _fife.LayerList_assign(self, *args)

    def resize(self, *args):
        """
        resize(LayerList self, std::list< FIFE::Layer * >::size_type new_size)
        resize(LayerList self, std::list< FIFE::Layer * >::size_type new_size, Layer x)
        """
        return _fife.LayerList_resize(self, *args)

    def insert(self, *args):
        """
        insert(LayerList self, std::list< FIFE::Layer * >::iterator pos, Layer x) -> std::list< FIFE::Layer * >::iterator
        insert(LayerList self, std::list< FIFE::Layer * >::iterator pos, std::list< FIFE::Layer * >::size_type n, 
            Layer x)
        """
        return _fife.LayerList_insert(self, *args)

    def pop_front(self):
        """pop_front(LayerList self)"""
        return _fife.LayerList_pop_front(self)

    def push_front(self, *args):
        """push_front(LayerList self, Layer x)"""
        return _fife.LayerList_push_front(self, *args)

    def remove(self, *args):
        """remove(LayerList self, Layer x)"""
        return _fife.LayerList_remove(self, *args)

    def unique(self):
        """unique(LayerList self)"""
        return _fife.LayerList_unique(self)

    def reverse(self):
        """reverse(LayerList self)"""
        return _fife.LayerList_reverse(self)

    def sort(self):
        """sort(LayerList self)"""
        return _fife.LayerList_sort(self)

    def merge(self, *args):
        """merge(LayerList self, LayerList x)"""
        return _fife.LayerList_merge(self, *args)

    __swig_destroy__ = _fife.delete_LayerList
    __del__ = lambda self : None;
LayerList_swigregister = _fife.LayerList_swigregister
LayerList_swigregister(LayerList)

class LayerVector(_object):
    """Proxy of C++ std::vector<(p.FIFE::Layer)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(LayerVector self) -> SwigPyIterator"""
        return _fife.LayerVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(LayerVector self) -> bool"""
        return _fife.LayerVector___nonzero__(self)

    def __bool__(self):
        """__bool__(LayerVector self) -> bool"""
        return _fife.LayerVector___bool__(self)

    def __len__(self):
        """__len__(LayerVector self) -> std::vector< FIFE::Layer * >::size_type"""
        return _fife.LayerVector___len__(self)

    def pop(self):
        """pop(LayerVector self) -> Layer"""
        return _fife.LayerVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i, std::vector< FIFE::Layer * >::difference_type j) -> LayerVector"""
        return _fife.LayerVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i, std::vector< FIFE::Layer * >::difference_type j, 
            LayerVector v=std::vector< FIFE::Layer *,std::allocator< FIFE::Layer * > >())
        __setslice__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i, std::vector< FIFE::Layer * >::difference_type j)
        """
        return _fife.LayerVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i, std::vector< FIFE::Layer * >::difference_type j)"""
        return _fife.LayerVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i)
        __delitem__(LayerVector self, PySliceObject * slice)
        """
        return _fife.LayerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(LayerVector self, PySliceObject * slice) -> LayerVector
        __getitem__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i) -> Layer
        """
        return _fife.LayerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(LayerVector self, PySliceObject * slice, LayerVector v)
        __setitem__(LayerVector self, PySliceObject * slice)
        __setitem__(LayerVector self, std::vector< FIFE::Layer * >::difference_type i, Layer x)
        """
        return _fife.LayerVector___setitem__(self, *args)

    def append(self, *args):
        """append(LayerVector self, Layer x)"""
        return _fife.LayerVector_append(self, *args)

    def empty(self):
        """empty(LayerVector self) -> bool"""
        return _fife.LayerVector_empty(self)

    def size(self):
        """size(LayerVector self) -> std::vector< FIFE::Layer * >::size_type"""
        return _fife.LayerVector_size(self)

    def clear(self):
        """clear(LayerVector self)"""
        return _fife.LayerVector_clear(self)

    def swap(self, *args):
        """swap(LayerVector self, LayerVector v)"""
        return _fife.LayerVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(LayerVector self) -> std::vector< FIFE::Layer * >::allocator_type"""
        return _fife.LayerVector_get_allocator(self)

    def begin(self):
        """begin(LayerVector self) -> std::vector< FIFE::Layer * >::iterator"""
        return _fife.LayerVector_begin(self)

    def end(self):
        """end(LayerVector self) -> std::vector< FIFE::Layer * >::iterator"""
        return _fife.LayerVector_end(self)

    def rbegin(self):
        """rbegin(LayerVector self) -> std::vector< FIFE::Layer * >::reverse_iterator"""
        return _fife.LayerVector_rbegin(self)

    def rend(self):
        """rend(LayerVector self) -> std::vector< FIFE::Layer * >::reverse_iterator"""
        return _fife.LayerVector_rend(self)

    def pop_back(self):
        """pop_back(LayerVector self)"""
        return _fife.LayerVector_pop_back(self)

    def erase(self, *args):
        """
        erase(LayerVector self, std::vector< FIFE::Layer * >::iterator pos) -> std::vector< FIFE::Layer * >::iterator
        erase(LayerVector self, std::vector< FIFE::Layer * >::iterator first, std::vector< FIFE::Layer * >::iterator last) -> std::vector< FIFE::Layer * >::iterator
        """
        return _fife.LayerVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.FIFE::Layer)> self) -> LayerVector
        __init__(std::vector<(p.FIFE::Layer)> self, LayerVector arg2) -> LayerVector
        __init__(std::vector<(p.FIFE::Layer)> self, std::vector< FIFE::Layer * >::size_type size) -> LayerVector
        __init__(std::vector<(p.FIFE::Layer)> self, std::vector< FIFE::Layer * >::size_type size, Layer value) -> LayerVector
        """
        this = _fife.new_LayerVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(LayerVector self, Layer x)"""
        return _fife.LayerVector_push_back(self, *args)

    def front(self):
        """front(LayerVector self) -> Layer"""
        return _fife.LayerVector_front(self)

    def back(self):
        """back(LayerVector self) -> Layer"""
        return _fife.LayerVector_back(self)

    def assign(self, *args):
        """assign(LayerVector self, std::vector< FIFE::Layer * >::size_type n, Layer x)"""
        return _fife.LayerVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(LayerVector self, std::vector< FIFE::Layer * >::size_type new_size)
        resize(LayerVector self, std::vector< FIFE::Layer * >::size_type new_size, Layer x)
        """
        return _fife.LayerVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(LayerVector self, std::vector< FIFE::Layer * >::iterator pos, Layer x) -> std::vector< FIFE::Layer * >::iterator
        insert(LayerVector self, std::vector< FIFE::Layer * >::iterator pos, std::vector< FIFE::Layer * >::size_type n, 
            Layer x)
        """
        return _fife.LayerVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(LayerVector self, std::vector< FIFE::Layer * >::size_type n)"""
        return _fife.LayerVector_reserve(self, *args)

    def capacity(self):
        """capacity(LayerVector self) -> std::vector< FIFE::Layer * >::size_type"""
        return _fife.LayerVector_capacity(self)

    __swig_destroy__ = _fife.delete_LayerVector
    __del__ = lambda self : None;
LayerVector_swigregister = _fife.LayerVector_swigregister
LayerVector_swigregister(LayerVector)

class CameraVector(_object):
    """Proxy of C++ std::vector<(p.FIFE::Camera)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(CameraVector self) -> SwigPyIterator"""
        return _fife.CameraVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(CameraVector self) -> bool"""
        return _fife.CameraVector___nonzero__(self)

    def __bool__(self):
        """__bool__(CameraVector self) -> bool"""
        return _fife.CameraVector___bool__(self)

    def __len__(self):
        """__len__(CameraVector self) -> std::vector< FIFE::Camera * >::size_type"""
        return _fife.CameraVector___len__(self)

    def pop(self):
        """pop(CameraVector self) -> Camera"""
        return _fife.CameraVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i, std::vector< FIFE::Camera * >::difference_type j) -> CameraVector"""
        return _fife.CameraVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i, std::vector< FIFE::Camera * >::difference_type j, 
            CameraVector v=std::vector< FIFE::Camera *,std::allocator< FIFE::Camera * > >())
        __setslice__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i, std::vector< FIFE::Camera * >::difference_type j)
        """
        return _fife.CameraVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i, std::vector< FIFE::Camera * >::difference_type j)"""
        return _fife.CameraVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i)
        __delitem__(CameraVector self, PySliceObject * slice)
        """
        return _fife.CameraVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(CameraVector self, PySliceObject * slice) -> CameraVector
        __getitem__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i) -> Camera
        """
        return _fife.CameraVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(CameraVector self, PySliceObject * slice, CameraVector v)
        __setitem__(CameraVector self, PySliceObject * slice)
        __setitem__(CameraVector self, std::vector< FIFE::Camera * >::difference_type i, Camera x)
        """
        return _fife.CameraVector___setitem__(self, *args)

    def append(self, *args):
        """append(CameraVector self, Camera x)"""
        return _fife.CameraVector_append(self, *args)

    def empty(self):
        """empty(CameraVector self) -> bool"""
        return _fife.CameraVector_empty(self)

    def size(self):
        """size(CameraVector self) -> std::vector< FIFE::Camera * >::size_type"""
        return _fife.CameraVector_size(self)

    def clear(self):
        """clear(CameraVector self)"""
        return _fife.CameraVector_clear(self)

    def swap(self, *args):
        """swap(CameraVector self, CameraVector v)"""
        return _fife.CameraVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(CameraVector self) -> std::vector< FIFE::Camera * >::allocator_type"""
        return _fife.CameraVector_get_allocator(self)

    def begin(self):
        """begin(CameraVector self) -> std::vector< FIFE::Camera * >::iterator"""
        return _fife.CameraVector_begin(self)

    def end(self):
        """end(CameraVector self) -> std::vector< FIFE::Camera * >::iterator"""
        return _fife.CameraVector_end(self)

    def rbegin(self):
        """rbegin(CameraVector self) -> std::vector< FIFE::Camera * >::reverse_iterator"""
        return _fife.CameraVector_rbegin(self)

    def rend(self):
        """rend(CameraVector self) -> std::vector< FIFE::Camera * >::reverse_iterator"""
        return _fife.CameraVector_rend(self)

    def pop_back(self):
        """pop_back(CameraVector self)"""
        return _fife.CameraVector_pop_back(self)

    def erase(self, *args):
        """
        erase(CameraVector self, std::vector< FIFE::Camera * >::iterator pos) -> std::vector< FIFE::Camera * >::iterator
        erase(CameraVector self, std::vector< FIFE::Camera * >::iterator first, std::vector< FIFE::Camera * >::iterator last) -> std::vector< FIFE::Camera * >::iterator
        """
        return _fife.CameraVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.FIFE::Camera)> self) -> CameraVector
        __init__(std::vector<(p.FIFE::Camera)> self, CameraVector arg2) -> CameraVector
        __init__(std::vector<(p.FIFE::Camera)> self, std::vector< FIFE::Camera * >::size_type size) -> CameraVector
        __init__(std::vector<(p.FIFE::Camera)> self, std::vector< FIFE::Camera * >::size_type size, Camera value) -> CameraVector
        """
        this = _fife.new_CameraVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(CameraVector self, Camera x)"""
        return _fife.CameraVector_push_back(self, *args)

    def front(self):
        """front(CameraVector self) -> Camera"""
        return _fife.CameraVector_front(self)

    def back(self):
        """back(CameraVector self) -> Camera"""
        return _fife.CameraVector_back(self)

    def assign(self, *args):
        """assign(CameraVector self, std::vector< FIFE::Camera * >::size_type n, Camera x)"""
        return _fife.CameraVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(CameraVector self, std::vector< FIFE::Camera * >::size_type new_size)
        resize(CameraVector self, std::vector< FIFE::Camera * >::size_type new_size, Camera x)
        """
        return _fife.CameraVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(CameraVector self, std::vector< FIFE::Camera * >::iterator pos, Camera x) -> std::vector< FIFE::Camera * >::iterator
        insert(CameraVector self, std::vector< FIFE::Camera * >::iterator pos, std::vector< FIFE::Camera * >::size_type n, 
            Camera x)
        """
        return _fife.CameraVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(CameraVector self, std::vector< FIFE::Camera * >::size_type n)"""
        return _fife.CameraVector_reserve(self, *args)

    def capacity(self):
        """capacity(CameraVector self) -> std::vector< FIFE::Camera * >::size_type"""
        return _fife.CameraVector_capacity(self)

    __swig_destroy__ = _fife.delete_CameraVector
    __del__ = lambda self : None;
CameraVector_swigregister = _fife.CameraVector_swigregister
CameraVector_swigregister(CameraVector)

class MapChangeListener(_object):
    """Proxy of C++ FIFE::MapChangeListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapChangeListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapChangeListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_MapChangeListener
    __del__ = lambda self : None;
    def onMapChanged(self, *args):
        """onMapChanged(MapChangeListener self, Map map, LayerVector changedLayers)"""
        return _fife.MapChangeListener_onMapChanged(self, *args)

    def onLayerCreate(self, *args):
        """onLayerCreate(MapChangeListener self, Map map, Layer layer)"""
        return _fife.MapChangeListener_onLayerCreate(self, *args)

    def onLayerDelete(self, *args):
        """onLayerDelete(MapChangeListener self, Map map, Layer layer)"""
        return _fife.MapChangeListener_onLayerDelete(self, *args)

    def __init__(self): 
        """__init__(FIFE::MapChangeListener self) -> MapChangeListener"""
        if self.__class__ == MapChangeListener:
            _self = None
        else:
            _self = self
        this = _fife.new_MapChangeListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_MapChangeListener(self)
        return weakref_proxy(self)
MapChangeListener_swigregister = _fife.MapChangeListener_swigregister
MapChangeListener_swigregister(MapChangeListener)

class Map(FifeClass):
    """Proxy of C++ FIFE::Map class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Map, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Map, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::Map self, std::string const & identifier, RenderBackend renderbackend, std::vector< FIFE::RendererBase *,std::allocator< FIFE::RendererBase * > > const & renderers, 
            TimeProvider tp_master=None) -> Map
        __init__(FIFE::Map self, std::string const & identifier, RenderBackend renderbackend, std::vector< FIFE::RendererBase *,std::allocator< FIFE::RendererBase * > > const & renderers) -> Map
        """
        this = _fife.new_Map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Map
    __del__ = lambda self : None;
    def getId(self):
        """getId(Map self) -> std::string const &"""
        return _fife.Map_getId(self)

    def setId(self, *args):
        """setId(Map self, std::string const & id)"""
        return _fife.Map_setId(self, *args)

    def createLayer(self, *args):
        """createLayer(Map self, std::string const & identifier, CellGrid grid) -> Layer"""
        return _fife.Map_createLayer(self, *args)

    def deleteLayer(self, *args):
        """deleteLayer(Map self, Layer index)"""
        return _fife.Map_deleteLayer(self, *args)

    def getLayers(self):
        """getLayers(Map self) -> LayerList"""
        return _fife.Map_getLayers(self)

    def getLayer(self, *args):
        """getLayer(Map self, std::string const & id) -> Layer"""
        return _fife.Map_getLayer(self, *args)

    def getLayerCount(self):
        """getLayerCount(Map self) -> uint32_t"""
        return _fife.Map_getLayerCount(self)

    def deleteLayers(self):
        """deleteLayers(Map self)"""
        return _fife.Map_deleteLayers(self)

    def getMinMaxCoordinates(self, *args):
        """getMinMaxCoordinates(Map self, DoublePoint3D min, DoublePoint3D max)"""
        return _fife.Map_getMinMaxCoordinates(self, *args)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(Map self, float multip)"""
        return _fife.Map_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(Map self) -> double"""
        return _fife.Map_getTimeMultiplier(self)

    def addChangeListener(self, *args):
        """addChangeListener(Map self, MapChangeListener listener)"""
        return _fife.Map_addChangeListener(self, *args)

    def removeChangeListener(self, *args):
        """removeChangeListener(Map self, MapChangeListener listener)"""
        return _fife.Map_removeChangeListener(self, *args)

    def isChanged(self):
        """isChanged(Map self) -> bool"""
        return _fife.Map_isChanged(self)

    def getChangedLayers(self):
        """getChangedLayers(Map self) -> LayerVector"""
        return _fife.Map_getChangedLayers(self)

    def addCamera(self, *args):
        """addCamera(Map self, std::string const & id, Layer layer, Rect viewport) -> Camera"""
        return _fife.Map_addCamera(self, *args)

    def removeCamera(self, *args):
        """removeCamera(Map self, std::string const & id)"""
        return _fife.Map_removeCamera(self, *args)

    def getCamera(self, *args):
        """getCamera(Map self, std::string const & id) -> Camera"""
        return _fife.Map_getCamera(self, *args)

    def getCameras(self):
        """getCameras(Map self) -> CameraVector"""
        return _fife.Map_getCameras(self)

    def setFilename(self, *args):
        """setFilename(Map self, std::string const & file)"""
        return _fife.Map_setFilename(self, *args)

    def getFilename(self):
        """getFilename(Map self) -> std::string const &"""
        return _fife.Map_getFilename(self)

    def initializeCellCaches(self):
        """initializeCellCaches(Map self)"""
        return _fife.Map_initializeCellCaches(self)

    def finalizeCellCaches(self):
        """finalizeCellCaches(Map self)"""
        return _fife.Map_finalizeCellCaches(self)

    def getTriggerController(self):
        """getTriggerController(Map self) -> TriggerController"""
        return _fife.Map_getTriggerController(self)

Map_swigregister = _fife.Map_swigregister
Map_swigregister(Map)

class RendererNode(_object):
    """Proxy of C++ FIFE::RendererNode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RendererNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RendererNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::RendererNode self, Instance attached_instance, Location relative_location, Layer relative_layer, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance, Location relative_location, Layer relative_layer) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance, Location relative_location, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance, Location relative_location) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance, Layer relative_layer, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance, Layer relative_layer) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Instance attached_instance) -> RendererNode
        __init__(FIFE::RendererNode self, Location attached_location, Layer relative_layer, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Location attached_location, Layer relative_layer) -> RendererNode
        __init__(FIFE::RendererNode self, Location attached_location, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Location attached_location) -> RendererNode
        __init__(FIFE::RendererNode self, Layer attached_layer, Point relative_point=FIFE::Point(0,0)) -> RendererNode
        __init__(FIFE::RendererNode self, Layer attached_layer) -> RendererNode
        __init__(FIFE::RendererNode self, Point attached_point) -> RendererNode
        __init__(FIFE::RendererNode self, RendererNode old) -> RendererNode
        """
        this = _fife.new_RendererNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_RendererNode
    __del__ = lambda self : None;
    def setAttached(self, *args):
        """
        setAttached(RendererNode self, Instance attached_instance, Location relative_location, Point relative_point)
        setAttached(RendererNode self, Instance attached_instance, Location relative_location)
        setAttached(RendererNode self, Instance attached_instance, Point relative_point)
        setAttached(RendererNode self, Instance attached_instance)
        setAttached(RendererNode self, Location attached_location, Point relative_point)
        setAttached(RendererNode self, Location attached_location)
        setAttached(RendererNode self, Layer attached_layer)
        setAttached(RendererNode self, Point attached_point)
        """
        return _fife.RendererNode_setAttached(self, *args)

    def setRelative(self, *args):
        """
        setRelative(RendererNode self, Location relative_location)
        setRelative(RendererNode self, Location relative_location, Point relative_point)
        setRelative(RendererNode self, Point relative_point)
        """
        return _fife.RendererNode_setRelative(self, *args)

    def getAttachedInstance(self):
        """getAttachedInstance(RendererNode self) -> Instance"""
        return _fife.RendererNode_getAttachedInstance(self)

    def getAttachedLocation(self):
        """getAttachedLocation(RendererNode self) -> Location"""
        return _fife.RendererNode_getAttachedLocation(self)

    def getAttachedLayer(self):
        """getAttachedLayer(RendererNode self) -> Layer"""
        return _fife.RendererNode_getAttachedLayer(self)

    def getAttachedPoint(self):
        """getAttachedPoint(RendererNode self) -> Point"""
        return _fife.RendererNode_getAttachedPoint(self)

    def getOffsetLocation(self):
        """getOffsetLocation(RendererNode self) -> Location"""
        return _fife.RendererNode_getOffsetLocation(self)

    def getOffsetPoint(self):
        """getOffsetPoint(RendererNode self) -> Point"""
        return _fife.RendererNode_getOffsetPoint(self)

    def getInstance(self):
        """getInstance(RendererNode self) -> Instance"""
        return _fife.RendererNode_getInstance(self)

    def getLocation(self):
        """getLocation(RendererNode self) -> Location"""
        return _fife.RendererNode_getLocation(self)

    def getLocationRef(self):
        """getLocationRef(RendererNode self) -> Location"""
        return _fife.RendererNode_getLocationRef(self)

    def getLayer(self):
        """getLayer(RendererNode self) -> Layer"""
        return _fife.RendererNode_getLayer(self)

    def getPoint(self):
        """getPoint(RendererNode self) -> Point"""
        return _fife.RendererNode_getPoint(self)

    def getPointRef(self):
        """getPointRef(RendererNode self) -> Point"""
        return _fife.RendererNode_getPointRef(self)

    def getCalculatedPoint(self, *args):
        """getCalculatedPoint(RendererNode self, Camera cam, Layer layer, bool const zoomed) -> Point"""
        return _fife.RendererNode_getCalculatedPoint(self, *args)

RendererNode_swigregister = _fife.RendererNode_swigregister
RendererNode_swigregister(RendererNode)

CELL_TRIGGER_ENTER = _fife.CELL_TRIGGER_ENTER
CELL_TRIGGER_EXIT = _fife.CELL_TRIGGER_EXIT
CELL_TRIGGER_BLOCKING_CHANGE = _fife.CELL_TRIGGER_BLOCKING_CHANGE
INSTANCE_TRIGGER_LOCATION = _fife.INSTANCE_TRIGGER_LOCATION
INSTANCE_TRIGGER_ROTATION = _fife.INSTANCE_TRIGGER_ROTATION
INSTANCE_TRIGGER_SPEED = _fife.INSTANCE_TRIGGER_SPEED
INSTANCE_TRIGGER_ACTION = _fife.INSTANCE_TRIGGER_ACTION
INSTANCE_TRIGGER_TIME_MULTIPLIER = _fife.INSTANCE_TRIGGER_TIME_MULTIPLIER
INSTANCE_TRIGGER_SAYTEXT = _fife.INSTANCE_TRIGGER_SAYTEXT
INSTANCE_TRIGGER_BLOCK = _fife.INSTANCE_TRIGGER_BLOCK
INSTANCE_TRIGGER_CELL = _fife.INSTANCE_TRIGGER_CELL
INSTANCE_TRIGGER_TRANSPARENCY = _fife.INSTANCE_TRIGGER_TRANSPARENCY
INSTANCE_TRIGGER_VISIBLE = _fife.INSTANCE_TRIGGER_VISIBLE
INSTANCE_TRIGGER_STACKPOS = _fife.INSTANCE_TRIGGER_STACKPOS
INSTANCE_TRIGGER_VISUAL = _fife.INSTANCE_TRIGGER_VISUAL
INSTANCE_TRIGGER_DELETE = _fife.INSTANCE_TRIGGER_DELETE
class ITriggerListener(_object):
    """Proxy of C++ FIFE::ITriggerListener class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ITriggerListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ITriggerListener, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_ITriggerListener
    __del__ = lambda self : None;
    def onTriggered(self):
        """onTriggered(ITriggerListener self)"""
        return _fife.ITriggerListener_onTriggered(self)

    def __init__(self): 
        """__init__(FIFE::ITriggerListener self) -> ITriggerListener"""
        if self.__class__ == ITriggerListener:
            _self = None
        else:
            _self = self
        this = _fife.new_ITriggerListener(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_ITriggerListener(self)
        return weakref_proxy(self)
ITriggerListener_swigregister = _fife.ITriggerListener_swigregister
ITriggerListener_swigregister(ITriggerListener)

class Trigger(FifeClass):
    """Proxy of C++ FIFE::Trigger class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trigger, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Trigger, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_Trigger
    __del__ = lambda self : None;
    def addTriggerListener(self, *args):
        """addTriggerListener(Trigger self, ITriggerListener listener)"""
        return _fife.Trigger_addTriggerListener(self, *args)

    def removeTriggerListener(self, *args):
        """removeTriggerListener(Trigger self, ITriggerListener listener)"""
        return _fife.Trigger_removeTriggerListener(self, *args)

    def reset(self):
        """reset(Trigger self)"""
        return _fife.Trigger_reset(self)

    def getName(self):
        """getName(Trigger self) -> std::string const &"""
        return _fife.Trigger_getName(self)

    def isTriggered(self):
        """isTriggered(Trigger self) -> bool"""
        return _fife.Trigger_isTriggered(self)

    def setTriggered(self):
        """setTriggered(Trigger self)"""
        return _fife.Trigger_setTriggered(self)

    def addTriggerCondition(self, *args):
        """addTriggerCondition(Trigger self, FIFE::TriggerCondition type)"""
        return _fife.Trigger_addTriggerCondition(self, *args)

    def getTriggerConditions(self):
        """getTriggerConditions(Trigger self) -> TriggerConditionVector"""
        return _fife.Trigger_getTriggerConditions(self)

    def removeTriggerCondition(self, *args):
        """removeTriggerCondition(Trigger self, FIFE::TriggerCondition type)"""
        return _fife.Trigger_removeTriggerCondition(self, *args)

    def enableForInstance(self, *args):
        """enableForInstance(Trigger self, Instance instance)"""
        return _fife.Trigger_enableForInstance(self, *args)

    def getEnabledInstances(self):
        """getEnabledInstances(Trigger self) -> InstanceVector"""
        return _fife.Trigger_getEnabledInstances(self)

    def disableForInstance(self, *args):
        """disableForInstance(Trigger self, Instance instance)"""
        return _fife.Trigger_disableForInstance(self, *args)

    def enableForAllInstances(self):
        """enableForAllInstances(Trigger self)"""
        return _fife.Trigger_enableForAllInstances(self)

    def isEnabledForAllInstances(self):
        """isEnabledForAllInstances(Trigger self) -> bool"""
        return _fife.Trigger_isEnabledForAllInstances(self)

    def disableForAllInstances(self):
        """disableForAllInstances(Trigger self)"""
        return _fife.Trigger_disableForAllInstances(self)

    def assign(self, *args):
        """
        assign(Trigger self, Layer layer, Point3D pt)
        assign(Trigger self, Cell cell)
        """
        return _fife.Trigger_assign(self, *args)

    def remove(self, *args):
        """
        remove(Trigger self, Layer layer, Point3D pt)
        remove(Trigger self, Cell cell)
        """
        return _fife.Trigger_remove(self, *args)

    def attach(self, *args):
        """attach(Trigger self, Instance instance)"""
        return _fife.Trigger_attach(self, *args)

    def detach(self):
        """detach(Trigger self)"""
        return _fife.Trigger_detach(self)

    def getAttached(self):
        """getAttached(Trigger self) -> Instance"""
        return _fife.Trigger_getAttached(self)

    def moveTo(self, *args):
        """moveTo(Trigger self, Point3D newPos, Point3D oldPos)"""
        return _fife.Trigger_moveTo(self, *args)

    def getAssignedCells(self):
        """getAssignedCells(Trigger self) -> CellVector"""
        return _fife.Trigger_getAssignedCells(self)

Trigger_swigregister = _fife.Trigger_swigregister
Trigger_swigregister(Trigger)

class TriggerController(FifeClass):
    """Proxy of C++ FIFE::TriggerController class"""
    __swig_setmethods__ = {}
    for _s in [FifeClass]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerController, name, value)
    __swig_getmethods__ = {}
    for _s in [FifeClass]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerController, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_TriggerController
    __del__ = lambda self : None;
    def createTrigger(self, *args):
        """
        createTrigger(TriggerController self, std::string const & triggerName) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, Layer layer, Point3D pt) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, Layer layer, std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > > const & coords) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, Layer layer, Rect rec) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, Location loc) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, std::vector< FIFE::Location,std::allocator< FIFE::Location > > const & locs) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, Cell cell) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, CellVector cells) -> Trigger
        createTrigger(TriggerController self, std::string const & triggerName, Instance instance) -> Trigger
        """
        return _fife.TriggerController_createTrigger(self, *args)

    def getTrigger(self, *args):
        """getTrigger(TriggerController self, std::string const & triggerName) -> Trigger"""
        return _fife.TriggerController_getTrigger(self, *args)

    def deleteTrigger(self, *args):
        """deleteTrigger(TriggerController self, std::string const & triggerName)"""
        return _fife.TriggerController_deleteTrigger(self, *args)

    def removeTrigger(self, *args):
        """
        removeTrigger(TriggerController self, std::string const & triggerName, Layer layer, Point3D pt)
        removeTrigger(TriggerController self, std::string const & triggerName, Layer layer, std::vector< FIFE::ModelCoordinate,std::allocator< FIFE::ModelCoordinate > > const & coords)
        removeTrigger(TriggerController self, std::string const & triggerName, Layer layer, Rect rec)
        removeTrigger(TriggerController self, std::string const & triggerName, Location loc)
        removeTrigger(TriggerController self, std::string const & triggerName, std::vector< FIFE::Location,std::allocator< FIFE::Location > > const & locs)
        removeTrigger(TriggerController self, std::string const & triggerName, Cell cell)
        removeTrigger(TriggerController self, std::string const & triggerName, CellVector cells)
        removeTrigger(TriggerController self, std::string const & triggerName, Instance instance)
        """
        return _fife.TriggerController_removeTrigger(self, *args)

    def getAllTriggers(self):
        """getAllTriggers(TriggerController self) -> TriggerVector"""
        return _fife.TriggerController_getAllTriggers(self)

    def getAllTriggerNames(self):
        """getAllTriggerNames(TriggerController self) -> StringVector"""
        return _fife.TriggerController_getAllTriggerNames(self)

TriggerController_swigregister = _fife.TriggerController_swigregister
TriggerController_swigregister(TriggerController)

class TriggerConditionVector(_object):
    """Proxy of C++ std::vector<(FIFE::TriggerCondition)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerConditionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerConditionVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(TriggerConditionVector self) -> SwigPyIterator"""
        return _fife.TriggerConditionVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(TriggerConditionVector self) -> bool"""
        return _fife.TriggerConditionVector___nonzero__(self)

    def __bool__(self):
        """__bool__(TriggerConditionVector self) -> bool"""
        return _fife.TriggerConditionVector___bool__(self)

    def __len__(self):
        """__len__(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::size_type"""
        return _fife.TriggerConditionVector___len__(self)

    def pop(self):
        """pop(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::value_type"""
        return _fife.TriggerConditionVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i, std::vector< enum FIFE::TriggerCondition >::difference_type j) -> TriggerConditionVector"""
        return _fife.TriggerConditionVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i, std::vector< enum FIFE::TriggerCondition >::difference_type j, 
            TriggerConditionVector v=std::vector< FIFE::TriggerCondition,std::allocator< FIFE::TriggerCondition > >())
        __setslice__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i, std::vector< enum FIFE::TriggerCondition >::difference_type j)
        """
        return _fife.TriggerConditionVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i, std::vector< enum FIFE::TriggerCondition >::difference_type j)"""
        return _fife.TriggerConditionVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i)
        __delitem__(TriggerConditionVector self, PySliceObject * slice)
        """
        return _fife.TriggerConditionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(TriggerConditionVector self, PySliceObject * slice) -> TriggerConditionVector
        __getitem__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i) -> std::vector< enum FIFE::TriggerCondition >::value_type const &
        """
        return _fife.TriggerConditionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(TriggerConditionVector self, PySliceObject * slice, TriggerConditionVector v)
        __setitem__(TriggerConditionVector self, PySliceObject * slice)
        __setitem__(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::difference_type i, std::vector< enum FIFE::TriggerCondition >::value_type const & x)
        """
        return _fife.TriggerConditionVector___setitem__(self, *args)

    def append(self, *args):
        """append(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::value_type const & x)"""
        return _fife.TriggerConditionVector_append(self, *args)

    def empty(self):
        """empty(TriggerConditionVector self) -> bool"""
        return _fife.TriggerConditionVector_empty(self)

    def size(self):
        """size(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::size_type"""
        return _fife.TriggerConditionVector_size(self)

    def clear(self):
        """clear(TriggerConditionVector self)"""
        return _fife.TriggerConditionVector_clear(self)

    def swap(self, *args):
        """swap(TriggerConditionVector self, TriggerConditionVector v)"""
        return _fife.TriggerConditionVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::allocator_type"""
        return _fife.TriggerConditionVector_get_allocator(self)

    def begin(self):
        """begin(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::iterator"""
        return _fife.TriggerConditionVector_begin(self)

    def end(self):
        """end(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::iterator"""
        return _fife.TriggerConditionVector_end(self)

    def rbegin(self):
        """rbegin(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::reverse_iterator"""
        return _fife.TriggerConditionVector_rbegin(self)

    def rend(self):
        """rend(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::reverse_iterator"""
        return _fife.TriggerConditionVector_rend(self)

    def pop_back(self):
        """pop_back(TriggerConditionVector self)"""
        return _fife.TriggerConditionVector_pop_back(self)

    def erase(self, *args):
        """
        erase(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::iterator pos) -> std::vector< enum FIFE::TriggerCondition >::iterator
        erase(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::iterator first, std::vector< enum FIFE::TriggerCondition >::iterator last) -> std::vector< enum FIFE::TriggerCondition >::iterator
        """
        return _fife.TriggerConditionVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(FIFE::TriggerCondition)> self) -> TriggerConditionVector
        __init__(std::vector<(FIFE::TriggerCondition)> self, TriggerConditionVector arg2) -> TriggerConditionVector
        __init__(std::vector<(FIFE::TriggerCondition)> self, std::vector< enum FIFE::TriggerCondition >::size_type size) -> TriggerConditionVector
        __init__(std::vector<(FIFE::TriggerCondition)> self, std::vector< enum FIFE::TriggerCondition >::size_type size, std::vector< enum FIFE::TriggerCondition >::value_type const & value) -> TriggerConditionVector
        """
        this = _fife.new_TriggerConditionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::value_type const & x)"""
        return _fife.TriggerConditionVector_push_back(self, *args)

    def front(self):
        """front(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::value_type const &"""
        return _fife.TriggerConditionVector_front(self)

    def back(self):
        """back(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::value_type const &"""
        return _fife.TriggerConditionVector_back(self)

    def assign(self, *args):
        """assign(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::size_type n, std::vector< enum FIFE::TriggerCondition >::value_type const & x)"""
        return _fife.TriggerConditionVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::size_type new_size)
        resize(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::size_type new_size, std::vector< enum FIFE::TriggerCondition >::value_type const & x)
        """
        return _fife.TriggerConditionVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::iterator pos, std::vector< enum FIFE::TriggerCondition >::value_type const & x) -> std::vector< enum FIFE::TriggerCondition >::iterator
        insert(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::iterator pos, std::vector< enum FIFE::TriggerCondition >::size_type n, 
            std::vector< enum FIFE::TriggerCondition >::value_type const & x)
        """
        return _fife.TriggerConditionVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(TriggerConditionVector self, std::vector< enum FIFE::TriggerCondition >::size_type n)"""
        return _fife.TriggerConditionVector_reserve(self, *args)

    def capacity(self):
        """capacity(TriggerConditionVector self) -> std::vector< enum FIFE::TriggerCondition >::size_type"""
        return _fife.TriggerConditionVector_capacity(self)

    __swig_destroy__ = _fife.delete_TriggerConditionVector
    __del__ = lambda self : None;
TriggerConditionVector_swigregister = _fife.TriggerConditionVector_swigregister
TriggerConditionVector_swigregister(TriggerConditionVector)

class TriggerVector(_object):
    """Proxy of C++ std::vector<(p.FIFE::Trigger)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(TriggerVector self) -> SwigPyIterator"""
        return _fife.TriggerVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(TriggerVector self) -> bool"""
        return _fife.TriggerVector___nonzero__(self)

    def __bool__(self):
        """__bool__(TriggerVector self) -> bool"""
        return _fife.TriggerVector___bool__(self)

    def __len__(self):
        """__len__(TriggerVector self) -> std::vector< FIFE::Trigger * >::size_type"""
        return _fife.TriggerVector___len__(self)

    def pop(self):
        """pop(TriggerVector self) -> Trigger"""
        return _fife.TriggerVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i, std::vector< FIFE::Trigger * >::difference_type j) -> TriggerVector"""
        return _fife.TriggerVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i, std::vector< FIFE::Trigger * >::difference_type j, 
            TriggerVector v=std::vector< FIFE::Trigger *,std::allocator< FIFE::Trigger * > >())
        __setslice__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i, std::vector< FIFE::Trigger * >::difference_type j)
        """
        return _fife.TriggerVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i, std::vector< FIFE::Trigger * >::difference_type j)"""
        return _fife.TriggerVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i)
        __delitem__(TriggerVector self, PySliceObject * slice)
        """
        return _fife.TriggerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(TriggerVector self, PySliceObject * slice) -> TriggerVector
        __getitem__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i) -> Trigger
        """
        return _fife.TriggerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(TriggerVector self, PySliceObject * slice, TriggerVector v)
        __setitem__(TriggerVector self, PySliceObject * slice)
        __setitem__(TriggerVector self, std::vector< FIFE::Trigger * >::difference_type i, Trigger x)
        """
        return _fife.TriggerVector___setitem__(self, *args)

    def append(self, *args):
        """append(TriggerVector self, Trigger x)"""
        return _fife.TriggerVector_append(self, *args)

    def empty(self):
        """empty(TriggerVector self) -> bool"""
        return _fife.TriggerVector_empty(self)

    def size(self):
        """size(TriggerVector self) -> std::vector< FIFE::Trigger * >::size_type"""
        return _fife.TriggerVector_size(self)

    def clear(self):
        """clear(TriggerVector self)"""
        return _fife.TriggerVector_clear(self)

    def swap(self, *args):
        """swap(TriggerVector self, TriggerVector v)"""
        return _fife.TriggerVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(TriggerVector self) -> std::vector< FIFE::Trigger * >::allocator_type"""
        return _fife.TriggerVector_get_allocator(self)

    def begin(self):
        """begin(TriggerVector self) -> std::vector< FIFE::Trigger * >::iterator"""
        return _fife.TriggerVector_begin(self)

    def end(self):
        """end(TriggerVector self) -> std::vector< FIFE::Trigger * >::iterator"""
        return _fife.TriggerVector_end(self)

    def rbegin(self):
        """rbegin(TriggerVector self) -> std::vector< FIFE::Trigger * >::reverse_iterator"""
        return _fife.TriggerVector_rbegin(self)

    def rend(self):
        """rend(TriggerVector self) -> std::vector< FIFE::Trigger * >::reverse_iterator"""
        return _fife.TriggerVector_rend(self)

    def pop_back(self):
        """pop_back(TriggerVector self)"""
        return _fife.TriggerVector_pop_back(self)

    def erase(self, *args):
        """
        erase(TriggerVector self, std::vector< FIFE::Trigger * >::iterator pos) -> std::vector< FIFE::Trigger * >::iterator
        erase(TriggerVector self, std::vector< FIFE::Trigger * >::iterator first, std::vector< FIFE::Trigger * >::iterator last) -> std::vector< FIFE::Trigger * >::iterator
        """
        return _fife.TriggerVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.FIFE::Trigger)> self) -> TriggerVector
        __init__(std::vector<(p.FIFE::Trigger)> self, TriggerVector arg2) -> TriggerVector
        __init__(std::vector<(p.FIFE::Trigger)> self, std::vector< FIFE::Trigger * >::size_type size) -> TriggerVector
        __init__(std::vector<(p.FIFE::Trigger)> self, std::vector< FIFE::Trigger * >::size_type size, Trigger value) -> TriggerVector
        """
        this = _fife.new_TriggerVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(TriggerVector self, Trigger x)"""
        return _fife.TriggerVector_push_back(self, *args)

    def front(self):
        """front(TriggerVector self) -> Trigger"""
        return _fife.TriggerVector_front(self)

    def back(self):
        """back(TriggerVector self) -> Trigger"""
        return _fife.TriggerVector_back(self)

    def assign(self, *args):
        """assign(TriggerVector self, std::vector< FIFE::Trigger * >::size_type n, Trigger x)"""
        return _fife.TriggerVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(TriggerVector self, std::vector< FIFE::Trigger * >::size_type new_size)
        resize(TriggerVector self, std::vector< FIFE::Trigger * >::size_type new_size, Trigger x)
        """
        return _fife.TriggerVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(TriggerVector self, std::vector< FIFE::Trigger * >::iterator pos, Trigger x) -> std::vector< FIFE::Trigger * >::iterator
        insert(TriggerVector self, std::vector< FIFE::Trigger * >::iterator pos, std::vector< FIFE::Trigger * >::size_type n, 
            Trigger x)
        """
        return _fife.TriggerVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(TriggerVector self, std::vector< FIFE::Trigger * >::size_type n)"""
        return _fife.TriggerVector_reserve(self, *args)

    def capacity(self):
        """capacity(TriggerVector self) -> std::vector< FIFE::Trigger * >::size_type"""
        return _fife.TriggerVector_capacity(self)

    __swig_destroy__ = _fife.delete_TriggerVector
    __del__ = lambda self : None;
TriggerVector_swigregister = _fife.TriggerVector_swigregister
TriggerVector_swigregister(TriggerVector)

class LocationList(_object):
    """Proxy of C++ std::list<(FIFE::Location)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocationList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocationList, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(LocationList self) -> SwigPyIterator"""
        return _fife.LocationList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(LocationList self) -> bool"""
        return _fife.LocationList___nonzero__(self)

    def __bool__(self):
        """__bool__(LocationList self) -> bool"""
        return _fife.LocationList___bool__(self)

    def __len__(self):
        """__len__(LocationList self) -> std::list< FIFE::Location >::size_type"""
        return _fife.LocationList___len__(self)

    def pop(self):
        """pop(LocationList self) -> Location"""
        return _fife.LocationList_pop(self)

    def __getslice__(self, *args):
        """__getslice__(LocationList self, std::list< FIFE::Location >::difference_type i, std::list< FIFE::Location >::difference_type j) -> LocationList"""
        return _fife.LocationList___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(LocationList self, std::list< FIFE::Location >::difference_type i, std::list< FIFE::Location >::difference_type j, 
            LocationList v=std::list< FIFE::Location,std::allocator< FIFE::Location > >())
        __setslice__(LocationList self, std::list< FIFE::Location >::difference_type i, std::list< FIFE::Location >::difference_type j)
        """
        return _fife.LocationList___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(LocationList self, std::list< FIFE::Location >::difference_type i, std::list< FIFE::Location >::difference_type j)"""
        return _fife.LocationList___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(LocationList self, std::list< FIFE::Location >::difference_type i)
        __delitem__(LocationList self, PySliceObject * slice)
        """
        return _fife.LocationList___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(LocationList self, PySliceObject * slice) -> LocationList
        __getitem__(LocationList self, std::list< FIFE::Location >::difference_type i) -> Location
        """
        return _fife.LocationList___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(LocationList self, PySliceObject * slice, LocationList v)
        __setitem__(LocationList self, PySliceObject * slice)
        __setitem__(LocationList self, std::list< FIFE::Location >::difference_type i, Location x)
        """
        return _fife.LocationList___setitem__(self, *args)

    def append(self, *args):
        """append(LocationList self, Location x)"""
        return _fife.LocationList_append(self, *args)

    def empty(self):
        """empty(LocationList self) -> bool"""
        return _fife.LocationList_empty(self)

    def size(self):
        """size(LocationList self) -> std::list< FIFE::Location >::size_type"""
        return _fife.LocationList_size(self)

    def clear(self):
        """clear(LocationList self)"""
        return _fife.LocationList_clear(self)

    def swap(self, *args):
        """swap(LocationList self, LocationList v)"""
        return _fife.LocationList_swap(self, *args)

    def get_allocator(self):
        """get_allocator(LocationList self) -> std::list< FIFE::Location >::allocator_type"""
        return _fife.LocationList_get_allocator(self)

    def begin(self):
        """begin(LocationList self) -> std::list< FIFE::Location >::iterator"""
        return _fife.LocationList_begin(self)

    def end(self):
        """end(LocationList self) -> std::list< FIFE::Location >::iterator"""
        return _fife.LocationList_end(self)

    def rbegin(self):
        """rbegin(LocationList self) -> std::list< FIFE::Location >::reverse_iterator"""
        return _fife.LocationList_rbegin(self)

    def rend(self):
        """rend(LocationList self) -> std::list< FIFE::Location >::reverse_iterator"""
        return _fife.LocationList_rend(self)

    def pop_back(self):
        """pop_back(LocationList self)"""
        return _fife.LocationList_pop_back(self)

    def erase(self, *args):
        """
        erase(LocationList self, std::list< FIFE::Location >::iterator pos) -> std::list< FIFE::Location >::iterator
        erase(LocationList self, std::list< FIFE::Location >::iterator first, std::list< FIFE::Location >::iterator last) -> std::list< FIFE::Location >::iterator
        """
        return _fife.LocationList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(FIFE::Location)> self) -> LocationList
        __init__(std::list<(FIFE::Location)> self, LocationList arg2) -> LocationList
        __init__(std::list<(FIFE::Location)> self, std::list< FIFE::Location >::size_type size) -> LocationList
        __init__(std::list<(FIFE::Location)> self, std::list< FIFE::Location >::size_type size, Location value) -> LocationList
        """
        this = _fife.new_LocationList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(LocationList self, Location x)"""
        return _fife.LocationList_push_back(self, *args)

    def front(self):
        """front(LocationList self) -> Location"""
        return _fife.LocationList_front(self)

    def back(self):
        """back(LocationList self) -> Location"""
        return _fife.LocationList_back(self)

    def assign(self, *args):
        """assign(LocationList self, std::list< FIFE::Location >::size_type n, Location x)"""
        return _fife.LocationList_assign(self, *args)

    def resize(self, *args):
        """
        resize(LocationList self, std::list< FIFE::Location >::size_type new_size)
        resize(LocationList self, std::list< FIFE::Location >::size_type new_size, Location x)
        """
        return _fife.LocationList_resize(self, *args)

    def insert(self, *args):
        """
        insert(LocationList self, std::list< FIFE::Location >::iterator pos, Location x) -> std::list< FIFE::Location >::iterator
        insert(LocationList self, std::list< FIFE::Location >::iterator pos, std::list< FIFE::Location >::size_type n, 
            Location x)
        """
        return _fife.LocationList_insert(self, *args)

    def pop_front(self):
        """pop_front(LocationList self)"""
        return _fife.LocationList_pop_front(self)

    def push_front(self, *args):
        """push_front(LocationList self, Location x)"""
        return _fife.LocationList_push_front(self, *args)

    def reverse(self):
        """reverse(LocationList self)"""
        return _fife.LocationList_reverse(self)

    __swig_destroy__ = _fife.delete_LocationList
    __del__ = lambda self : None;
LocationList_swigregister = _fife.LocationList_swigregister
LocationList_swigregister(LocationList)

class RoutePather(IPather):
    """Proxy of C++ FIFE::RoutePather class"""
    __swig_setmethods__ = {}
    for _s in [IPather]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutePather, name, value)
    __swig_getmethods__ = {}
    for _s in [IPather]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutePather, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::RoutePather self) -> RoutePather"""
        this = _fife.new_RoutePather()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_RoutePather
    __del__ = lambda self : None;
    def getName(self):
        """getName(RoutePather self) -> std::string"""
        return _fife.RoutePather_getName(self)

RoutePather_swigregister = _fife.RoutePather_swigregister
RoutePather_swigregister(RoutePather)

class IAnimationSaver(_object):
    """Proxy of C++ FIFE::IAnimationSaver class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAnimationSaver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAnimationSaver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IAnimationSaver
    __del__ = lambda self : None;
    def save(self, *args):
        """save(IAnimationSaver self, std::string const & filename)"""
        return _fife.IAnimationSaver_save(self, *args)

    def __init__(self): 
        """__init__(FIFE::IAnimationSaver self) -> IAnimationSaver"""
        if self.__class__ == IAnimationSaver:
            _self = None
        else:
            _self = self
        this = _fife.new_IAnimationSaver(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IAnimationSaver(self)
        return weakref_proxy(self)
IAnimationSaver_swigregister = _fife.IAnimationSaver_swigregister
IAnimationSaver_swigregister(IAnimationSaver)

class IAtlasSaver(_object):
    """Proxy of C++ FIFE::IAtlasSaver class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAtlasSaver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAtlasSaver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IAtlasSaver
    __del__ = lambda self : None;
    def save(self, *args):
        """save(IAtlasSaver self, std::string const & filename)"""
        return _fife.IAtlasSaver_save(self, *args)

    def __init__(self): 
        """__init__(FIFE::IAtlasSaver self) -> IAtlasSaver"""
        if self.__class__ == IAtlasSaver:
            _self = None
        else:
            _self = self
        this = _fife.new_IAtlasSaver(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IAtlasSaver(self)
        return weakref_proxy(self)
IAtlasSaver_swigregister = _fife.IAtlasSaver_swigregister
IAtlasSaver_swigregister(IAtlasSaver)

class IMapSaver(_object):
    """Proxy of C++ FIFE::IMapSaver class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMapSaver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMapSaver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IMapSaver
    __del__ = lambda self : None;
    def setObjectSaver(self, *args):
        """setObjectSaver(IMapSaver self, FIFE::ObjectSaverPtr const & objectSaver)"""
        return _fife.IMapSaver_setObjectSaver(self, *args)

    def setAnimationSaver(self, *args):
        """setAnimationSaver(IMapSaver self, FIFE::AnimationSaverPtr const & animationSaver)"""
        return _fife.IMapSaver_setAnimationSaver(self, *args)

    def setAtlasSaver(self, *args):
        """setAtlasSaver(IMapSaver self, FIFE::AtlasSaverPtr const & atlasSaver)"""
        return _fife.IMapSaver_setAtlasSaver(self, *args)

    def save(self, *args):
        """save(IMapSaver self, Map map, std::string const & filename, StringVector importFiles)"""
        return _fife.IMapSaver_save(self, *args)

    def __init__(self): 
        """__init__(FIFE::IMapSaver self) -> IMapSaver"""
        if self.__class__ == IMapSaver:
            _self = None
        else:
            _self = self
        this = _fife.new_IMapSaver(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IMapSaver(self)
        return weakref_proxy(self)
IMapSaver_swigregister = _fife.IMapSaver_swigregister
IMapSaver_swigregister(IMapSaver)

class IObjectSaver(_object):
    """Proxy of C++ FIFE::IObjectSaver class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IObjectSaver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IObjectSaver, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IObjectSaver
    __del__ = lambda self : None;
    def setAnimationSaver(self, *args):
        """setAnimationSaver(IObjectSaver self, FIFE::AnimationSaverPtr const & animationSaver)"""
        return _fife.IObjectSaver_setAnimationSaver(self, *args)

    def save(self, *args):
        """save(IObjectSaver self, std::string const & filename)"""
        return _fife.IObjectSaver_save(self, *args)

    def __init__(self): 
        """__init__(FIFE::IObjectSaver self) -> IObjectSaver"""
        if self.__class__ == IObjectSaver:
            _self = None
        else:
            _self = self
        this = _fife.new_IObjectSaver(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IObjectSaver(self)
        return weakref_proxy(self)
IObjectSaver_swigregister = _fife.IObjectSaver_swigregister
IObjectSaver_swigregister(IObjectSaver)

class MapSaver(IMapSaver):
    """Proxy of C++ FIFE::MapSaver class"""
    __swig_setmethods__ = {}
    for _s in [IMapSaver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapSaver, name, value)
    __swig_getmethods__ = {}
    for _s in [IMapSaver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapSaver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::MapSaver self) -> MapSaver"""
        this = _fife.new_MapSaver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_MapSaver
    __del__ = lambda self : None;
    def setObjectSaver(self, *args):
        """setObjectSaver(MapSaver self, FIFE::ObjectSaverPtr const & objectSaver)"""
        return _fife.MapSaver_setObjectSaver(self, *args)

    def setAnimationSaver(self, *args):
        """setAnimationSaver(MapSaver self, FIFE::AnimationSaverPtr const & animationSaver)"""
        return _fife.MapSaver_setAnimationSaver(self, *args)

    def setAtlasSaver(self, *args):
        """setAtlasSaver(MapSaver self, FIFE::AtlasSaverPtr const & atlasSaver)"""
        return _fife.MapSaver_setAtlasSaver(self, *args)

    def save(self, *args):
        """save(MapSaver self, Map map, std::string const & filename, StringVector importFiles)"""
        return _fife.MapSaver_save(self, *args)

MapSaver_swigregister = _fife.MapSaver_swigregister
MapSaver_swigregister(MapSaver)

LM_CORE = _fife.LM_CORE
LM_AUDIO = _fife.LM_AUDIO
LM_CONTROLLER = _fife.LM_CONTROLLER
LM_EVTCHANNEL = _fife.LM_EVTCHANNEL
LM_GUI = _fife.LM_GUI
LM_CONSOLE = _fife.LM_CONSOLE
LM_LOADERS = _fife.LM_LOADERS
LM_NATIVE_LOADERS = _fife.LM_NATIVE_LOADERS
LM_FO_LOADERS = _fife.LM_FO_LOADERS
LM_SAVERS = _fife.LM_SAVERS
LM_NATIVE_SAVERS = _fife.LM_NATIVE_SAVERS
LM_MODEL = _fife.LM_MODEL
LM_STRUCTURES = _fife.LM_STRUCTURES
LM_INSTANCE = _fife.LM_INSTANCE
LM_LOCATION = _fife.LM_LOCATION
LM_METAMODEL = _fife.LM_METAMODEL
LM_CELLGRID = _fife.LM_CELLGRID
LM_SQUAREGRID = _fife.LM_SQUAREGRID
LM_HEXGRID = _fife.LM_HEXGRID
LM_PATHFINDER = _fife.LM_PATHFINDER
LM_UTIL = _fife.LM_UTIL
LM_RESMGR = _fife.LM_RESMGR
LM_VFS = _fife.LM_VFS
LM_VIDEO = _fife.LM_VIDEO
LM_VIEW = _fife.LM_VIEW
LM_CAMERA = _fife.LM_CAMERA
LM_VIEWVIEW = _fife.LM_VIEWVIEW
LM_XML = _fife.LM_XML
LM_EXCEPTION = _fife.LM_EXCEPTION
LM_SCRIPT = _fife.LM_SCRIPT
LM_MODULE_MAX = _fife.LM_MODULE_MAX
class moduleVector(_object):
    """Proxy of C++ std::vector<(logmodule_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, moduleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, moduleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(moduleVector self) -> SwigPyIterator"""
        return _fife.moduleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(moduleVector self) -> bool"""
        return _fife.moduleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(moduleVector self) -> bool"""
        return _fife.moduleVector___bool__(self)

    def __len__(self):
        """__len__(moduleVector self) -> std::vector< enum logmodule_t >::size_type"""
        return _fife.moduleVector___len__(self)

    def pop(self):
        """pop(moduleVector self) -> std::vector< enum logmodule_t >::value_type"""
        return _fife.moduleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(moduleVector self, std::vector< enum logmodule_t >::difference_type i, std::vector< enum logmodule_t >::difference_type j) -> moduleVector"""
        return _fife.moduleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(moduleVector self, std::vector< enum logmodule_t >::difference_type i, std::vector< enum logmodule_t >::difference_type j, 
            moduleVector v=std::vector< logmodule_t,std::allocator< logmodule_t > >())
        __setslice__(moduleVector self, std::vector< enum logmodule_t >::difference_type i, std::vector< enum logmodule_t >::difference_type j)
        """
        return _fife.moduleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(moduleVector self, std::vector< enum logmodule_t >::difference_type i, std::vector< enum logmodule_t >::difference_type j)"""
        return _fife.moduleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(moduleVector self, std::vector< enum logmodule_t >::difference_type i)
        __delitem__(moduleVector self, PySliceObject * slice)
        """
        return _fife.moduleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(moduleVector self, PySliceObject * slice) -> moduleVector
        __getitem__(moduleVector self, std::vector< enum logmodule_t >::difference_type i) -> std::vector< enum logmodule_t >::value_type const &
        """
        return _fife.moduleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(moduleVector self, PySliceObject * slice, moduleVector v)
        __setitem__(moduleVector self, PySliceObject * slice)
        __setitem__(moduleVector self, std::vector< enum logmodule_t >::difference_type i, std::vector< enum logmodule_t >::value_type const & x)
        """
        return _fife.moduleVector___setitem__(self, *args)

    def append(self, *args):
        """append(moduleVector self, std::vector< enum logmodule_t >::value_type const & x)"""
        return _fife.moduleVector_append(self, *args)

    def empty(self):
        """empty(moduleVector self) -> bool"""
        return _fife.moduleVector_empty(self)

    def size(self):
        """size(moduleVector self) -> std::vector< enum logmodule_t >::size_type"""
        return _fife.moduleVector_size(self)

    def clear(self):
        """clear(moduleVector self)"""
        return _fife.moduleVector_clear(self)

    def swap(self, *args):
        """swap(moduleVector self, moduleVector v)"""
        return _fife.moduleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(moduleVector self) -> std::vector< enum logmodule_t >::allocator_type"""
        return _fife.moduleVector_get_allocator(self)

    def begin(self):
        """begin(moduleVector self) -> std::vector< enum logmodule_t >::iterator"""
        return _fife.moduleVector_begin(self)

    def end(self):
        """end(moduleVector self) -> std::vector< enum logmodule_t >::iterator"""
        return _fife.moduleVector_end(self)

    def rbegin(self):
        """rbegin(moduleVector self) -> std::vector< enum logmodule_t >::reverse_iterator"""
        return _fife.moduleVector_rbegin(self)

    def rend(self):
        """rend(moduleVector self) -> std::vector< enum logmodule_t >::reverse_iterator"""
        return _fife.moduleVector_rend(self)

    def pop_back(self):
        """pop_back(moduleVector self)"""
        return _fife.moduleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(moduleVector self, std::vector< enum logmodule_t >::iterator pos) -> std::vector< enum logmodule_t >::iterator
        erase(moduleVector self, std::vector< enum logmodule_t >::iterator first, std::vector< enum logmodule_t >::iterator last) -> std::vector< enum logmodule_t >::iterator
        """
        return _fife.moduleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(logmodule_t)> self) -> moduleVector
        __init__(std::vector<(logmodule_t)> self, moduleVector arg2) -> moduleVector
        __init__(std::vector<(logmodule_t)> self, std::vector< enum logmodule_t >::size_type size) -> moduleVector
        __init__(std::vector<(logmodule_t)> self, std::vector< enum logmodule_t >::size_type size, std::vector< enum logmodule_t >::value_type const & value) -> moduleVector
        """
        this = _fife.new_moduleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(moduleVector self, std::vector< enum logmodule_t >::value_type const & x)"""
        return _fife.moduleVector_push_back(self, *args)

    def front(self):
        """front(moduleVector self) -> std::vector< enum logmodule_t >::value_type const &"""
        return _fife.moduleVector_front(self)

    def back(self):
        """back(moduleVector self) -> std::vector< enum logmodule_t >::value_type const &"""
        return _fife.moduleVector_back(self)

    def assign(self, *args):
        """assign(moduleVector self, std::vector< enum logmodule_t >::size_type n, std::vector< enum logmodule_t >::value_type const & x)"""
        return _fife.moduleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(moduleVector self, std::vector< enum logmodule_t >::size_type new_size)
        resize(moduleVector self, std::vector< enum logmodule_t >::size_type new_size, std::vector< enum logmodule_t >::value_type const & x)
        """
        return _fife.moduleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(moduleVector self, std::vector< enum logmodule_t >::iterator pos, std::vector< enum logmodule_t >::value_type const & x) -> std::vector< enum logmodule_t >::iterator
        insert(moduleVector self, std::vector< enum logmodule_t >::iterator pos, std::vector< enum logmodule_t >::size_type n, 
            std::vector< enum logmodule_t >::value_type const & x)
        """
        return _fife.moduleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(moduleVector self, std::vector< enum logmodule_t >::size_type n)"""
        return _fife.moduleVector_reserve(self, *args)

    def capacity(self):
        """capacity(moduleVector self) -> std::vector< enum logmodule_t >::size_type"""
        return _fife.moduleVector_capacity(self)

    __swig_destroy__ = _fife.delete_moduleVector
    __del__ = lambda self : None;
moduleVector_swigregister = _fife.moduleVector_swigregister
moduleVector_swigregister(moduleVector)

class LogManager(_object):
    """Proxy of C++ FIFE::LogManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LEVEL_DEBUG = _fife.LogManager_LEVEL_DEBUG
    LEVEL_LOG = _fife.LogManager_LEVEL_LOG
    LEVEL_WARN = _fife.LogManager_LEVEL_WARN
    LEVEL_ERROR = _fife.LogManager_LEVEL_ERROR
    __swig_destroy__ = _fife.delete_LogManager
    __del__ = lambda self : None;
    def log(self, *args):
        """log(LogManager self, FIFE::LogManager::LogLevel level, logmodule_t module, std::string const & msg)"""
        return _fife.LogManager_log(self, *args)

    def setLevelFilter(self, *args):
        """setLevelFilter(LogManager self, FIFE::LogManager::LogLevel level)"""
        return _fife.LogManager_setLevelFilter(self, *args)

    def getLevelFilter(self):
        """getLevelFilter(LogManager self) -> FIFE::LogManager::LogLevel"""
        return _fife.LogManager_getLevelFilter(self)

    def addVisibleModule(self, *args):
        """addVisibleModule(LogManager self, logmodule_t module)"""
        return _fife.LogManager_addVisibleModule(self, *args)

    def removeVisibleModule(self, *args):
        """removeVisibleModule(LogManager self, logmodule_t module)"""
        return _fife.LogManager_removeVisibleModule(self, *args)

    def clearVisibleModules(self):
        """clearVisibleModules(LogManager self)"""
        return _fife.LogManager_clearVisibleModules(self)

    def isVisible(self, *args):
        """isVisible(LogManager self, logmodule_t module) -> bool"""
        return _fife.LogManager_isVisible(self, *args)

    def setLogToPrompt(self, *args):
        """setLogToPrompt(LogManager self, bool logtoprompt)"""
        return _fife.LogManager_setLogToPrompt(self, *args)

    def isLogToPrompt(self):
        """isLogToPrompt(LogManager self) -> bool"""
        return _fife.LogManager_isLogToPrompt(self)

    def setLogToFile(self, *args):
        """setLogToFile(LogManager self, bool logtofile)"""
        return _fife.LogManager_setLogToFile(self, *args)

    def isLogToFile(self):
        """isLogToFile(LogManager self) -> bool"""
        return _fife.LogManager_isLogToFile(self)

    def getModuleName(self, *args):
        """getModuleName(LogManager self, logmodule_t module) -> std::string"""
        return _fife.LogManager_getModuleName(self, *args)

LogManager_swigregister = _fife.LogManager_swigregister
LogManager_swigregister(LogManager)

class Logger(_object):
    """Proxy of C++ FIFE::Logger class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::Logger self, logmodule_t module) -> Logger"""
        this = _fife.new_Logger(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Logger
    __del__ = lambda self : None;
    def log(self, *args):
        """log(Logger self, FIFE::LogManager::LogLevel level, std::string const & msg)"""
        return _fife.Logger_log(self, *args)

Logger_swigregister = _fife.Logger_swigregister
Logger_swigregister(Logger)


def getAngleBetween(*args):
  """
    getAngleBetween(Location loc1, Location loc2) -> int32_t
    getAngleBetween(DoublePoint3D emc1, DoublePoint3D emc2) -> int32_t
    """
  return _fife.getAngleBetween(*args)

def getFacing(*args):
  """
    getFacing(Location loc, int32_t const angle) -> Location
    getFacing(DoublePoint3D emc, int32_t const angle) -> DoublePoint3D
    """
  return _fife.getFacing(*args)
class Mathf(_object):
    """Proxy of C++ FIFE::Math<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mathf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mathf, name)
    __repr__ = _swig_repr
    def epsilon():
        """epsilon() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_epsilon()

    if _newclass:epsilon = staticmethod(epsilon)
    __swig_getmethods__["epsilon"] = lambda x: epsilon
    def zeroTolerance():
        """zeroTolerance() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_zeroTolerance()

    if _newclass:zeroTolerance = staticmethod(zeroTolerance)
    __swig_getmethods__["zeroTolerance"] = lambda x: zeroTolerance
    def max():
        """max() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_max()

    if _newclass:max = staticmethod(max)
    __swig_getmethods__["max"] = lambda x: max
    def pi():
        """pi() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_pi()

    if _newclass:pi = staticmethod(pi)
    __swig_getmethods__["pi"] = lambda x: pi
    def twoPi():
        """twoPi() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_twoPi()

    if _newclass:twoPi = staticmethod(twoPi)
    __swig_getmethods__["twoPi"] = lambda x: twoPi
    def halfPi():
        """halfPi() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_halfPi()

    if _newclass:halfPi = staticmethod(halfPi)
    __swig_getmethods__["halfPi"] = lambda x: halfPi
    def inversePi():
        """inversePi() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_inversePi()

    if _newclass:inversePi = staticmethod(inversePi)
    __swig_getmethods__["inversePi"] = lambda x: inversePi
    def inverseTwoPi():
        """inverseTwoPi() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_inverseTwoPi()

    if _newclass:inverseTwoPi = staticmethod(inverseTwoPi)
    __swig_getmethods__["inverseTwoPi"] = lambda x: inverseTwoPi
    def degToRad():
        """degToRad() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_degToRad()

    if _newclass:degToRad = staticmethod(degToRad)
    __swig_getmethods__["degToRad"] = lambda x: degToRad
    def radToDeg():
        """radToDeg() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_radToDeg()

    if _newclass:radToDeg = staticmethod(radToDeg)
    __swig_getmethods__["radToDeg"] = lambda x: radToDeg
    def log2():
        """log2() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_log2()

    if _newclass:log2 = staticmethod(log2)
    __swig_getmethods__["log2"] = lambda x: log2
    def log10():
        """log10() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_log10()

    if _newclass:log10 = staticmethod(log10)
    __swig_getmethods__["log10"] = lambda x: log10
    def invLog2():
        """invLog2() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_invLog2()

    if _newclass:invLog2 = staticmethod(invLog2)
    __swig_getmethods__["invLog2"] = lambda x: invLog2
    def invLog10():
        """invLog10() -> FIFE::Math< float >::num_type"""
        return _fife.Mathf_invLog10()

    if _newclass:invLog10 = staticmethod(invLog10)
    __swig_getmethods__["invLog10"] = lambda x: invLog10
    def ACos(*args):
        """ACos(float _val) -> float"""
        return _fife.Mathf_ACos(*args)

    if _newclass:ACos = staticmethod(ACos)
    __swig_getmethods__["ACos"] = lambda x: ACos
    def ASin(*args):
        """ASin(float _val) -> float"""
        return _fife.Mathf_ASin(*args)

    if _newclass:ASin = staticmethod(ASin)
    __swig_getmethods__["ASin"] = lambda x: ASin
    def ATan(*args):
        """ATan(float _val) -> float"""
        return _fife.Mathf_ATan(*args)

    if _newclass:ATan = staticmethod(ATan)
    __swig_getmethods__["ATan"] = lambda x: ATan
    def ATan2(*args):
        """ATan2(float _x, float _y) -> float"""
        return _fife.Mathf_ATan2(*args)

    if _newclass:ATan2 = staticmethod(ATan2)
    __swig_getmethods__["ATan2"] = lambda x: ATan2
    def Ceil(*args):
        """Ceil(float _val) -> float"""
        return _fife.Mathf_Ceil(*args)

    if _newclass:Ceil = staticmethod(Ceil)
    __swig_getmethods__["Ceil"] = lambda x: Ceil
    def Cos(*args):
        """Cos(float _val) -> float"""
        return _fife.Mathf_Cos(*args)

    if _newclass:Cos = staticmethod(Cos)
    __swig_getmethods__["Cos"] = lambda x: Cos
    def Exp(*args):
        """Exp(float _val) -> float"""
        return _fife.Mathf_Exp(*args)

    if _newclass:Exp = staticmethod(Exp)
    __swig_getmethods__["Exp"] = lambda x: Exp
    def FAbs(*args):
        """FAbs(float _val) -> float"""
        return _fife.Mathf_FAbs(*args)

    if _newclass:FAbs = staticmethod(FAbs)
    __swig_getmethods__["FAbs"] = lambda x: FAbs
    def Floor(*args):
        """Floor(float _val) -> float"""
        return _fife.Mathf_Floor(*args)

    if _newclass:Floor = staticmethod(Floor)
    __swig_getmethods__["Floor"] = lambda x: Floor
    def FMod(*args):
        """FMod(float _x, float _y) -> float"""
        return _fife.Mathf_FMod(*args)

    if _newclass:FMod = staticmethod(FMod)
    __swig_getmethods__["FMod"] = lambda x: FMod
    def InvSqrt(*args):
        """InvSqrt(float _val) -> float"""
        return _fife.Mathf_InvSqrt(*args)

    if _newclass:InvSqrt = staticmethod(InvSqrt)
    __swig_getmethods__["InvSqrt"] = lambda x: InvSqrt
    def Log(*args):
        """Log(float _val) -> float"""
        return _fife.Mathf_Log(*args)

    if _newclass:Log = staticmethod(Log)
    __swig_getmethods__["Log"] = lambda x: Log
    def Log2(*args):
        """Log2(float _val) -> float"""
        return _fife.Mathf_Log2(*args)

    if _newclass:Log2 = staticmethod(Log2)
    __swig_getmethods__["Log2"] = lambda x: Log2
    def Log10(*args):
        """Log10(float _val) -> float"""
        return _fife.Mathf_Log10(*args)

    if _newclass:Log10 = staticmethod(Log10)
    __swig_getmethods__["Log10"] = lambda x: Log10
    def Pow(*args):
        """Pow(float _base, float _exponent) -> float"""
        return _fife.Mathf_Pow(*args)

    if _newclass:Pow = staticmethod(Pow)
    __swig_getmethods__["Pow"] = lambda x: Pow
    def Sin(*args):
        """Sin(float _val) -> float"""
        return _fife.Mathf_Sin(*args)

    if _newclass:Sin = staticmethod(Sin)
    __swig_getmethods__["Sin"] = lambda x: Sin
    def Sqr(*args):
        """Sqr(float _val) -> float"""
        return _fife.Mathf_Sqr(*args)

    if _newclass:Sqr = staticmethod(Sqr)
    __swig_getmethods__["Sqr"] = lambda x: Sqr
    def Sqrt(*args):
        """Sqrt(float _val) -> float"""
        return _fife.Mathf_Sqrt(*args)

    if _newclass:Sqrt = staticmethod(Sqrt)
    __swig_getmethods__["Sqrt"] = lambda x: Sqrt
    def Tan(*args):
        """Tan(float _val) -> float"""
        return _fife.Mathf_Tan(*args)

    if _newclass:Tan = staticmethod(Tan)
    __swig_getmethods__["Tan"] = lambda x: Tan
    def __init__(self): 
        """__init__(FIFE::Math<(float)> self) -> Mathf"""
        this = _fife.new_Mathf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Mathf
    __del__ = lambda self : None;
Mathf_swigregister = _fife.Mathf_swigregister
Mathf_swigregister(Mathf)

def Mathf_epsilon():
  """Mathf_epsilon() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_epsilon()

def Mathf_zeroTolerance():
  """Mathf_zeroTolerance() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_zeroTolerance()

def Mathf_max():
  """Mathf_max() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_max()

def Mathf_pi():
  """Mathf_pi() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_pi()

def Mathf_twoPi():
  """Mathf_twoPi() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_twoPi()

def Mathf_halfPi():
  """Mathf_halfPi() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_halfPi()

def Mathf_inversePi():
  """Mathf_inversePi() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_inversePi()

def Mathf_inverseTwoPi():
  """Mathf_inverseTwoPi() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_inverseTwoPi()

def Mathf_degToRad():
  """Mathf_degToRad() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_degToRad()

def Mathf_radToDeg():
  """Mathf_radToDeg() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_radToDeg()

def Mathf_log2():
  """Mathf_log2() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_log2()

def Mathf_log10():
  """Mathf_log10() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_log10()

def Mathf_invLog2():
  """Mathf_invLog2() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_invLog2()

def Mathf_invLog10():
  """Mathf_invLog10() -> FIFE::Math< float >::num_type"""
  return _fife.Mathf_invLog10()

def Mathf_ACos(*args):
  """Mathf_ACos(float _val) -> float"""
  return _fife.Mathf_ACos(*args)

def Mathf_ASin(*args):
  """Mathf_ASin(float _val) -> float"""
  return _fife.Mathf_ASin(*args)

def Mathf_ATan(*args):
  """Mathf_ATan(float _val) -> float"""
  return _fife.Mathf_ATan(*args)

def Mathf_ATan2(*args):
  """Mathf_ATan2(float _x, float _y) -> float"""
  return _fife.Mathf_ATan2(*args)

def Mathf_Ceil(*args):
  """Mathf_Ceil(float _val) -> float"""
  return _fife.Mathf_Ceil(*args)

def Mathf_Cos(*args):
  """Mathf_Cos(float _val) -> float"""
  return _fife.Mathf_Cos(*args)

def Mathf_Exp(*args):
  """Mathf_Exp(float _val) -> float"""
  return _fife.Mathf_Exp(*args)

def Mathf_FAbs(*args):
  """Mathf_FAbs(float _val) -> float"""
  return _fife.Mathf_FAbs(*args)

def Mathf_Floor(*args):
  """Mathf_Floor(float _val) -> float"""
  return _fife.Mathf_Floor(*args)

def Mathf_FMod(*args):
  """Mathf_FMod(float _x, float _y) -> float"""
  return _fife.Mathf_FMod(*args)

def Mathf_InvSqrt(*args):
  """Mathf_InvSqrt(float _val) -> float"""
  return _fife.Mathf_InvSqrt(*args)

def Mathf_Log(*args):
  """Mathf_Log(float _val) -> float"""
  return _fife.Mathf_Log(*args)

def Mathf_Log2(*args):
  """Mathf_Log2(float _val) -> float"""
  return _fife.Mathf_Log2(*args)

def Mathf_Log10(*args):
  """Mathf_Log10(float _val) -> float"""
  return _fife.Mathf_Log10(*args)

def Mathf_Pow(*args):
  """Mathf_Pow(float _base, float _exponent) -> float"""
  return _fife.Mathf_Pow(*args)

def Mathf_Sin(*args):
  """Mathf_Sin(float _val) -> float"""
  return _fife.Mathf_Sin(*args)

def Mathf_Sqr(*args):
  """Mathf_Sqr(float _val) -> float"""
  return _fife.Mathf_Sqr(*args)

def Mathf_Sqrt(*args):
  """Mathf_Sqrt(float _val) -> float"""
  return _fife.Mathf_Sqrt(*args)

def Mathf_Tan(*args):
  """Mathf_Tan(float _val) -> float"""
  return _fife.Mathf_Tan(*args)

class Mathd(_object):
    """Proxy of C++ FIFE::Math<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mathd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mathd, name)
    __repr__ = _swig_repr
    def epsilon():
        """epsilon() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_epsilon()

    if _newclass:epsilon = staticmethod(epsilon)
    __swig_getmethods__["epsilon"] = lambda x: epsilon
    def zeroTolerance():
        """zeroTolerance() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_zeroTolerance()

    if _newclass:zeroTolerance = staticmethod(zeroTolerance)
    __swig_getmethods__["zeroTolerance"] = lambda x: zeroTolerance
    def max():
        """max() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_max()

    if _newclass:max = staticmethod(max)
    __swig_getmethods__["max"] = lambda x: max
    def pi():
        """pi() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_pi()

    if _newclass:pi = staticmethod(pi)
    __swig_getmethods__["pi"] = lambda x: pi
    def twoPi():
        """twoPi() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_twoPi()

    if _newclass:twoPi = staticmethod(twoPi)
    __swig_getmethods__["twoPi"] = lambda x: twoPi
    def halfPi():
        """halfPi() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_halfPi()

    if _newclass:halfPi = staticmethod(halfPi)
    __swig_getmethods__["halfPi"] = lambda x: halfPi
    def inversePi():
        """inversePi() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_inversePi()

    if _newclass:inversePi = staticmethod(inversePi)
    __swig_getmethods__["inversePi"] = lambda x: inversePi
    def inverseTwoPi():
        """inverseTwoPi() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_inverseTwoPi()

    if _newclass:inverseTwoPi = staticmethod(inverseTwoPi)
    __swig_getmethods__["inverseTwoPi"] = lambda x: inverseTwoPi
    def degToRad():
        """degToRad() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_degToRad()

    if _newclass:degToRad = staticmethod(degToRad)
    __swig_getmethods__["degToRad"] = lambda x: degToRad
    def radToDeg():
        """radToDeg() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_radToDeg()

    if _newclass:radToDeg = staticmethod(radToDeg)
    __swig_getmethods__["radToDeg"] = lambda x: radToDeg
    def log2():
        """log2() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_log2()

    if _newclass:log2 = staticmethod(log2)
    __swig_getmethods__["log2"] = lambda x: log2
    def log10():
        """log10() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_log10()

    if _newclass:log10 = staticmethod(log10)
    __swig_getmethods__["log10"] = lambda x: log10
    def invLog2():
        """invLog2() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_invLog2()

    if _newclass:invLog2 = staticmethod(invLog2)
    __swig_getmethods__["invLog2"] = lambda x: invLog2
    def invLog10():
        """invLog10() -> FIFE::Math< double >::num_type"""
        return _fife.Mathd_invLog10()

    if _newclass:invLog10 = staticmethod(invLog10)
    __swig_getmethods__["invLog10"] = lambda x: invLog10
    def ACos(*args):
        """ACos(double _val) -> double"""
        return _fife.Mathd_ACos(*args)

    if _newclass:ACos = staticmethod(ACos)
    __swig_getmethods__["ACos"] = lambda x: ACos
    def ASin(*args):
        """ASin(double _val) -> double"""
        return _fife.Mathd_ASin(*args)

    if _newclass:ASin = staticmethod(ASin)
    __swig_getmethods__["ASin"] = lambda x: ASin
    def ATan(*args):
        """ATan(double _val) -> double"""
        return _fife.Mathd_ATan(*args)

    if _newclass:ATan = staticmethod(ATan)
    __swig_getmethods__["ATan"] = lambda x: ATan
    def ATan2(*args):
        """ATan2(double _x, double _y) -> double"""
        return _fife.Mathd_ATan2(*args)

    if _newclass:ATan2 = staticmethod(ATan2)
    __swig_getmethods__["ATan2"] = lambda x: ATan2
    def Ceil(*args):
        """Ceil(double _val) -> double"""
        return _fife.Mathd_Ceil(*args)

    if _newclass:Ceil = staticmethod(Ceil)
    __swig_getmethods__["Ceil"] = lambda x: Ceil
    def Cos(*args):
        """Cos(double _val) -> double"""
        return _fife.Mathd_Cos(*args)

    if _newclass:Cos = staticmethod(Cos)
    __swig_getmethods__["Cos"] = lambda x: Cos
    def Exp(*args):
        """Exp(double _val) -> double"""
        return _fife.Mathd_Exp(*args)

    if _newclass:Exp = staticmethod(Exp)
    __swig_getmethods__["Exp"] = lambda x: Exp
    def FAbs(*args):
        """FAbs(double _val) -> double"""
        return _fife.Mathd_FAbs(*args)

    if _newclass:FAbs = staticmethod(FAbs)
    __swig_getmethods__["FAbs"] = lambda x: FAbs
    def Floor(*args):
        """Floor(double _val) -> double"""
        return _fife.Mathd_Floor(*args)

    if _newclass:Floor = staticmethod(Floor)
    __swig_getmethods__["Floor"] = lambda x: Floor
    def FMod(*args):
        """FMod(double _x, double _y) -> double"""
        return _fife.Mathd_FMod(*args)

    if _newclass:FMod = staticmethod(FMod)
    __swig_getmethods__["FMod"] = lambda x: FMod
    def InvSqrt(*args):
        """InvSqrt(double _val) -> double"""
        return _fife.Mathd_InvSqrt(*args)

    if _newclass:InvSqrt = staticmethod(InvSqrt)
    __swig_getmethods__["InvSqrt"] = lambda x: InvSqrt
    def Log(*args):
        """Log(double _val) -> double"""
        return _fife.Mathd_Log(*args)

    if _newclass:Log = staticmethod(Log)
    __swig_getmethods__["Log"] = lambda x: Log
    def Log2(*args):
        """Log2(double _val) -> double"""
        return _fife.Mathd_Log2(*args)

    if _newclass:Log2 = staticmethod(Log2)
    __swig_getmethods__["Log2"] = lambda x: Log2
    def Log10(*args):
        """Log10(double _val) -> double"""
        return _fife.Mathd_Log10(*args)

    if _newclass:Log10 = staticmethod(Log10)
    __swig_getmethods__["Log10"] = lambda x: Log10
    def Pow(*args):
        """Pow(double _base, double _exponent) -> double"""
        return _fife.Mathd_Pow(*args)

    if _newclass:Pow = staticmethod(Pow)
    __swig_getmethods__["Pow"] = lambda x: Pow
    def Sin(*args):
        """Sin(double _val) -> double"""
        return _fife.Mathd_Sin(*args)

    if _newclass:Sin = staticmethod(Sin)
    __swig_getmethods__["Sin"] = lambda x: Sin
    def Sqr(*args):
        """Sqr(double _val) -> double"""
        return _fife.Mathd_Sqr(*args)

    if _newclass:Sqr = staticmethod(Sqr)
    __swig_getmethods__["Sqr"] = lambda x: Sqr
    def Sqrt(*args):
        """Sqrt(double _val) -> double"""
        return _fife.Mathd_Sqrt(*args)

    if _newclass:Sqrt = staticmethod(Sqrt)
    __swig_getmethods__["Sqrt"] = lambda x: Sqrt
    def Tan(*args):
        """Tan(double _val) -> double"""
        return _fife.Mathd_Tan(*args)

    if _newclass:Tan = staticmethod(Tan)
    __swig_getmethods__["Tan"] = lambda x: Tan
    def __init__(self): 
        """__init__(FIFE::Math<(double)> self) -> Mathd"""
        this = _fife.new_Mathd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Mathd
    __del__ = lambda self : None;
Mathd_swigregister = _fife.Mathd_swigregister
Mathd_swigregister(Mathd)

def Mathd_epsilon():
  """Mathd_epsilon() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_epsilon()

def Mathd_zeroTolerance():
  """Mathd_zeroTolerance() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_zeroTolerance()

def Mathd_max():
  """Mathd_max() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_max()

def Mathd_pi():
  """Mathd_pi() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_pi()

def Mathd_twoPi():
  """Mathd_twoPi() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_twoPi()

def Mathd_halfPi():
  """Mathd_halfPi() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_halfPi()

def Mathd_inversePi():
  """Mathd_inversePi() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_inversePi()

def Mathd_inverseTwoPi():
  """Mathd_inverseTwoPi() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_inverseTwoPi()

def Mathd_degToRad():
  """Mathd_degToRad() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_degToRad()

def Mathd_radToDeg():
  """Mathd_radToDeg() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_radToDeg()

def Mathd_log2():
  """Mathd_log2() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_log2()

def Mathd_log10():
  """Mathd_log10() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_log10()

def Mathd_invLog2():
  """Mathd_invLog2() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_invLog2()

def Mathd_invLog10():
  """Mathd_invLog10() -> FIFE::Math< double >::num_type"""
  return _fife.Mathd_invLog10()

def Mathd_ACos(*args):
  """Mathd_ACos(double _val) -> double"""
  return _fife.Mathd_ACos(*args)

def Mathd_ASin(*args):
  """Mathd_ASin(double _val) -> double"""
  return _fife.Mathd_ASin(*args)

def Mathd_ATan(*args):
  """Mathd_ATan(double _val) -> double"""
  return _fife.Mathd_ATan(*args)

def Mathd_ATan2(*args):
  """Mathd_ATan2(double _x, double _y) -> double"""
  return _fife.Mathd_ATan2(*args)

def Mathd_Ceil(*args):
  """Mathd_Ceil(double _val) -> double"""
  return _fife.Mathd_Ceil(*args)

def Mathd_Cos(*args):
  """Mathd_Cos(double _val) -> double"""
  return _fife.Mathd_Cos(*args)

def Mathd_Exp(*args):
  """Mathd_Exp(double _val) -> double"""
  return _fife.Mathd_Exp(*args)

def Mathd_FAbs(*args):
  """Mathd_FAbs(double _val) -> double"""
  return _fife.Mathd_FAbs(*args)

def Mathd_Floor(*args):
  """Mathd_Floor(double _val) -> double"""
  return _fife.Mathd_Floor(*args)

def Mathd_FMod(*args):
  """Mathd_FMod(double _x, double _y) -> double"""
  return _fife.Mathd_FMod(*args)

def Mathd_InvSqrt(*args):
  """Mathd_InvSqrt(double _val) -> double"""
  return _fife.Mathd_InvSqrt(*args)

def Mathd_Log(*args):
  """Mathd_Log(double _val) -> double"""
  return _fife.Mathd_Log(*args)

def Mathd_Log2(*args):
  """Mathd_Log2(double _val) -> double"""
  return _fife.Mathd_Log2(*args)

def Mathd_Log10(*args):
  """Mathd_Log10(double _val) -> double"""
  return _fife.Mathd_Log10(*args)

def Mathd_Pow(*args):
  """Mathd_Pow(double _base, double _exponent) -> double"""
  return _fife.Mathd_Pow(*args)

def Mathd_Sin(*args):
  """Mathd_Sin(double _val) -> double"""
  return _fife.Mathd_Sin(*args)

def Mathd_Sqr(*args):
  """Mathd_Sqr(double _val) -> double"""
  return _fife.Mathd_Sqr(*args)

def Mathd_Sqrt(*args):
  """Mathd_Sqrt(double _val) -> double"""
  return _fife.Mathd_Sqrt(*args)

def Mathd_Tan(*args):
  """Mathd_Tan(double _val) -> double"""
  return _fife.Mathd_Tan(*args)

class TimeEvent(_object):
    """Proxy of C++ FIFE::TimeEvent class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::TimeEvent self, int32_t period=-1) -> TimeEvent
        __init__(FIFE::TimeEvent self) -> TimeEvent
        """
        if self.__class__ == TimeEvent:
            _self = None
        else:
            _self = self
        this = _fife.new_TimeEvent(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeEvent
    __del__ = lambda self : None;
    def updateEvent(self, *args):
        """updateEvent(TimeEvent self, uint32_t time)"""
        return _fife.TimeEvent_updateEvent(self, *args)

    def setPeriod(self, *args):
        """setPeriod(TimeEvent self, int32_t period)"""
        return _fife.TimeEvent_setPeriod(self, *args)

    def getPeriod(self):
        """getPeriod(TimeEvent self) -> int32_t"""
        return _fife.TimeEvent_getPeriod(self)

    def getLastUpdateTime(self):
        """getLastUpdateTime(TimeEvent self) -> uint32_t"""
        return _fife.TimeEvent_getLastUpdateTime(self)

    def setLastUpdateTime(self, *args):
        """setLastUpdateTime(TimeEvent self, uint32_t arg2)"""
        return _fife.TimeEvent_setLastUpdateTime(self, *args)

    def __disown__(self):
        self.this.disown()
        _fife.disown_TimeEvent(self)
        return weakref_proxy(self)
TimeEvent_swigregister = _fife.TimeEvent_swigregister
TimeEvent_swigregister(TimeEvent)

class TimeManager(_object):
    """Proxy of C++ FIFE::TimeManager class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::TimeManager self) -> TimeManager"""
        this = _fife.new_TimeManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeManager
    __del__ = lambda self : None;
    def update(self):
        """update(TimeManager self)"""
        return _fife.TimeManager_update(self)

    def getTime(self):
        """getTime(TimeManager self) -> uint32_t"""
        return _fife.TimeManager_getTime(self)

    def getTimeDelta(self):
        """getTimeDelta(TimeManager self) -> uint32_t"""
        return _fife.TimeManager_getTimeDelta(self)

    def getAverageFrameTime(self):
        """getAverageFrameTime(TimeManager self) -> double"""
        return _fife.TimeManager_getAverageFrameTime(self)

    def printStatistics(self):
        """printStatistics(TimeManager self)"""
        return _fife.TimeManager_printStatistics(self)

    def registerEvent(self, *args):
        """registerEvent(TimeManager self, TimeEvent event)"""
        return _fife.TimeManager_registerEvent(self, *args)

    def unregisterEvent(self, *args):
        """unregisterEvent(TimeManager self, TimeEvent event)"""
        return _fife.TimeManager_unregisterEvent(self, *args)

TimeManager_swigregister = _fife.TimeManager_swigregister
TimeManager_swigregister(TimeManager)


def getVersion():
  """getVersion() -> char const *"""
  return _fife.getVersion()

def getMajor():
  """getMajor() -> int"""
  return _fife.getMajor()

def getMinor():
  """getMinor() -> int"""
  return _fife.getMinor()

def getPatch():
  """getPatch() -> int"""
  return _fife.getPatch()

def getHash():
  """getHash() -> char const *"""
  return _fife.getHash()
class RawDataSource(_object):
    """Proxy of C++ FIFE::RawDataSource class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RawDataSource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_RawDataSource
    __del__ = lambda self : None;
    def getSize(self):
        """getSize(RawDataSource self) -> uint32_t"""
        return _fife.RawDataSource_getSize(self)

    def readInto(self, *args):
        """readInto(RawDataSource self, uint8_t * buffer, uint32_t start, uint32_t length)"""
        return _fife.RawDataSource_readInto(self, *args)

RawDataSource_swigregister = _fife.RawDataSource_swigregister
RawDataSource_swigregister(RawDataSource)

class RawData(_object):
    """Proxy of C++ FIFE::RawData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RawData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::RawData self, RawDataSource datasource) -> RawData"""
        this = _fife.new_RawData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_RawData
    __del__ = lambda self : None;
    def getDataInBytes(self):
        """getDataInBytes(RawData self) -> vectoru"""
        return _fife.RawData_getDataInBytes(self)

    def getDataInLines(self):
        """getDataInLines(RawData self) -> StringVector"""
        return _fife.RawData_getDataInLines(self)

    def getDataLength(self):
        """getDataLength(RawData self) -> uint32_t"""
        return _fife.RawData_getDataLength(self)

    def getCurrentIndex(self):
        """getCurrentIndex(RawData self) -> uint32_t"""
        return _fife.RawData_getCurrentIndex(self)

    def setIndex(self, *args):
        """setIndex(RawData self, uint32_t index)"""
        return _fife.RawData_setIndex(self, *args)

    def moveIndex(self, *args):
        """moveIndex(RawData self, int32_t offset)"""
        return _fife.RawData_moveIndex(self, *args)

    def readInto(self, *args):
        """readInto(RawData self, size_t len)"""
        return _fife.RawData_readInto(self, *args)

    def read8(self):
        """read8(RawData self) -> uint8_t"""
        return _fife.RawData_read8(self)

    def read16Little(self):
        """read16Little(RawData self) -> uint16_t"""
        return _fife.RawData_read16Little(self)

    def read32Little(self):
        """read32Little(RawData self) -> uint32_t"""
        return _fife.RawData_read32Little(self)

    def read16Big(self):
        """read16Big(RawData self) -> uint16_t"""
        return _fife.RawData_read16Big(self)

    def read32Big(self):
        """read32Big(RawData self) -> uint32_t"""
        return _fife.RawData_read32Big(self)

    def read(self, *args):
        """
        read(RawData self, int32_t size=-1)
        read(RawData self)
        """
        return _fife.RawData_read(self, *args)

    def readString(self, *args):
        """readString(RawData self, size_t len) -> std::string"""
        return _fife.RawData_readString(self, *args)

    def getLine(self, *args):
        """getLine(RawData self, std::string & buffer) -> bool"""
        return _fife.RawData_getLine(self, *args)

RawData_swigregister = _fife.RawData_swigregister
RawData_swigregister(RawData)

class StringSet(_object):
    """Proxy of C++ std::set<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(StringSet self) -> SwigPyIterator"""
        return _fife.StringSet_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(StringSet self) -> bool"""
        return _fife.StringSet___nonzero__(self)

    def __bool__(self):
        """__bool__(StringSet self) -> bool"""
        return _fife.StringSet___bool__(self)

    def __len__(self):
        """__len__(StringSet self) -> std::set< std::string >::size_type"""
        return _fife.StringSet___len__(self)

    def append(self, *args):
        """append(StringSet self, std::set< std::string >::value_type x)"""
        return _fife.StringSet_append(self, *args)

    def __contains__(self, *args):
        """__contains__(StringSet self, std::set< std::string >::value_type x) -> bool"""
        return _fife.StringSet___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(StringSet self, std::set< std::string >::difference_type i) -> std::set< std::string >::value_type"""
        return _fife.StringSet___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::set<(std::string)> self, std::less< std::string > const & arg2) -> StringSet
        __init__(std::set<(std::string)> self) -> StringSet
        __init__(std::set<(std::string)> self, StringSet arg2) -> StringSet
        """
        this = _fife.new_StringSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(StringSet self) -> bool"""
        return _fife.StringSet_empty(self)

    def size(self):
        """size(StringSet self) -> std::set< std::string >::size_type"""
        return _fife.StringSet_size(self)

    def clear(self):
        """clear(StringSet self)"""
        return _fife.StringSet_clear(self)

    def swap(self, *args):
        """swap(StringSet self, StringSet v)"""
        return _fife.StringSet_swap(self, *args)

    def count(self, *args):
        """count(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type"""
        return _fife.StringSet_count(self, *args)

    def begin(self):
        """begin(StringSet self) -> std::set< std::string >::iterator"""
        return _fife.StringSet_begin(self)

    def end(self):
        """end(StringSet self) -> std::set< std::string >::iterator"""
        return _fife.StringSet_end(self)

    def rbegin(self):
        """rbegin(StringSet self) -> std::set< std::string >::reverse_iterator"""
        return _fife.StringSet_rbegin(self)

    def rend(self):
        """rend(StringSet self) -> std::set< std::string >::reverse_iterator"""
        return _fife.StringSet_rend(self)

    def erase(self, *args):
        """
        erase(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type
        erase(StringSet self, std::set< std::string >::iterator pos)
        erase(StringSet self, std::set< std::string >::iterator first, std::set< std::string >::iterator last)
        """
        return _fife.StringSet_erase(self, *args)

    def find(self, *args):
        """find(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _fife.StringSet_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _fife.StringSet_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(StringSet self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _fife.StringSet_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(StringSet self, std::set< std::string >::key_type const & x) -> std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >"""
        return _fife.StringSet_equal_range(self, *args)

    def insert(self, *args):
        """insert(StringSet self, std::set< std::string >::value_type const & __x) -> std::pair< std::set< std::string >::iterator,bool >"""
        return _fife.StringSet_insert(self, *args)

    __swig_destroy__ = _fife.delete_StringSet
    __del__ = lambda self : None;
StringSet_swigregister = _fife.StringSet_swigregister
StringSet_swigregister(StringSet)

class vectoru(_object):
    """Proxy of C++ std::vector<(uint8_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectoru, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectoru, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectoru self) -> SwigPyIterator"""
        return _fife.vectoru_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(vectoru self) -> bool"""
        return _fife.vectoru___nonzero__(self)

    def __bool__(self):
        """__bool__(vectoru self) -> bool"""
        return _fife.vectoru___bool__(self)

    def __len__(self):
        """__len__(vectoru self) -> std::vector< unsigned char >::size_type"""
        return _fife.vectoru___len__(self)

    def pop(self):
        """pop(vectoru self) -> std::vector< unsigned char >::value_type"""
        return _fife.vectoru_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectoru self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> vectoru"""
        return _fife.vectoru___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectoru self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, 
            vectoru v=std::vector< unsigned char,std::allocator< unsigned char > >())
        __setslice__(vectoru self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)
        """
        return _fife.vectoru___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectoru self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)"""
        return _fife.vectoru___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectoru self, std::vector< unsigned char >::difference_type i)
        __delitem__(vectoru self, PySliceObject * slice)
        """
        return _fife.vectoru___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectoru self, PySliceObject * slice) -> vectoru
        __getitem__(vectoru self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &
        """
        return _fife.vectoru___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectoru self, PySliceObject * slice, vectoru v)
        __setitem__(vectoru self, PySliceObject * slice)
        __setitem__(vectoru self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)
        """
        return _fife.vectoru___setitem__(self, *args)

    def append(self, *args):
        """append(vectoru self, std::vector< unsigned char >::value_type const & x)"""
        return _fife.vectoru_append(self, *args)

    def empty(self):
        """empty(vectoru self) -> bool"""
        return _fife.vectoru_empty(self)

    def size(self):
        """size(vectoru self) -> std::vector< unsigned char >::size_type"""
        return _fife.vectoru_size(self)

    def clear(self):
        """clear(vectoru self)"""
        return _fife.vectoru_clear(self)

    def swap(self, *args):
        """swap(vectoru self, vectoru v)"""
        return _fife.vectoru_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectoru self) -> std::vector< unsigned char >::allocator_type"""
        return _fife.vectoru_get_allocator(self)

    def begin(self):
        """begin(vectoru self) -> std::vector< unsigned char >::iterator"""
        return _fife.vectoru_begin(self)

    def end(self):
        """end(vectoru self) -> std::vector< unsigned char >::iterator"""
        return _fife.vectoru_end(self)

    def rbegin(self):
        """rbegin(vectoru self) -> std::vector< unsigned char >::reverse_iterator"""
        return _fife.vectoru_rbegin(self)

    def rend(self):
        """rend(vectoru self) -> std::vector< unsigned char >::reverse_iterator"""
        return _fife.vectoru_rend(self)

    def pop_back(self):
        """pop_back(vectoru self)"""
        return _fife.vectoru_pop_back(self)

    def erase(self, *args):
        """
        erase(vectoru self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator
        erase(vectoru self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator
        """
        return _fife.vectoru_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(uint8_t)> self) -> vectoru
        __init__(std::vector<(uint8_t)> self, vectoru arg2) -> vectoru
        __init__(std::vector<(uint8_t)> self, std::vector< unsigned char >::size_type size) -> vectoru
        __init__(std::vector<(uint8_t)> self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> vectoru
        """
        this = _fife.new_vectoru(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectoru self, std::vector< unsigned char >::value_type const & x)"""
        return _fife.vectoru_push_back(self, *args)

    def front(self):
        """front(vectoru self) -> std::vector< unsigned char >::value_type const &"""
        return _fife.vectoru_front(self)

    def back(self):
        """back(vectoru self) -> std::vector< unsigned char >::value_type const &"""
        return _fife.vectoru_back(self)

    def assign(self, *args):
        """assign(vectoru self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)"""
        return _fife.vectoru_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectoru self, std::vector< unsigned char >::size_type new_size)
        resize(vectoru self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)
        """
        return _fife.vectoru_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectoru self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator
        insert(vectoru self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, 
            std::vector< unsigned char >::value_type const & x)
        """
        return _fife.vectoru_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectoru self, std::vector< unsigned char >::size_type n)"""
        return _fife.vectoru_reserve(self, *args)

    def capacity(self):
        """capacity(vectoru self) -> std::vector< unsigned char >::size_type"""
        return _fife.vectoru_capacity(self)

    __swig_destroy__ = _fife.delete_vectoru
    __del__ = lambda self : None;
vectoru_swigregister = _fife.vectoru_swigregister
vectoru_swigregister(vectoru)

class VFS(_object):
    """Proxy of C++ FIFE::VFS class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VFS, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FIFE::VFS self) -> VFS"""
        this = _fife.new_VFS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_VFS
    __del__ = lambda self : None;
    def cleanup(self):
        """cleanup(VFS self)"""
        return _fife.VFS_cleanup(self)

    def addNewSource(self, *args):
        """addNewSource(VFS self, std::string const & path)"""
        return _fife.VFS_addNewSource(self, *args)

    def exists(self, *args):
        """exists(VFS self, std::string const & file) -> bool"""
        return _fife.VFS_exists(self, *args)

    def open(self, *args):
        """open(VFS self, std::string const & path) -> RawData"""
        return _fife.VFS_open(self, *args)

    def listFiles(self, *args):
        """listFiles(VFS self, std::string const & path) -> StringSet"""
        return _fife.VFS_listFiles(self, *args)

    def listDirectories(self, *args):
        """listDirectories(VFS self, std::string const & path) -> StringSet"""
        return _fife.VFS_listDirectories(self, *args)

VFS_swigregister = _fife.VFS_swigregister
VFS_swigregister(VFS)

class RendererBase(_object):
    """Proxy of C++ FIFE::RendererBase class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RendererBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RendererBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_RendererBase
    __del__ = lambda self : None;
    def getName(self):
        """getName(RendererBase self) -> std::string"""
        return _fife.RendererBase_getName(self)

    def getPipelinePosition(self):
        """getPipelinePosition(RendererBase self) -> int32_t"""
        return _fife.RendererBase_getPipelinePosition(self)

    def setPipelinePosition(self, *args):
        """setPipelinePosition(RendererBase self, int32_t position)"""
        return _fife.RendererBase_setPipelinePosition(self, *args)

    def setEnabled(self, *args):
        """setEnabled(RendererBase self, bool enabled)"""
        return _fife.RendererBase_setEnabled(self, *args)

    def isEnabled(self):
        """isEnabled(RendererBase self) -> bool"""
        return _fife.RendererBase_isEnabled(self)

    def addActiveLayer(self, *args):
        """addActiveLayer(RendererBase self, Layer layer)"""
        return _fife.RendererBase_addActiveLayer(self, *args)

    def removeActiveLayer(self, *args):
        """removeActiveLayer(RendererBase self, Layer layer)"""
        return _fife.RendererBase_removeActiveLayer(self, *args)

    def clearActiveLayers(self):
        """clearActiveLayers(RendererBase self)"""
        return _fife.RendererBase_clearActiveLayers(self)

    def activateAllLayers(self, *args):
        """activateAllLayers(RendererBase self, Map map)"""
        return _fife.RendererBase_activateAllLayers(self, *args)

    def getActiveLayers(self):
        """getActiveLayers(RendererBase self) -> LayerList"""
        return _fife.RendererBase_getActiveLayers(self)

RendererBase_swigregister = _fife.RendererBase_swigregister
RendererBase_swigregister(RendererBase)

class IRendererContainer(_object):
    """Proxy of C++ FIFE::IRendererContainer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IRendererContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IRendererContainer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_IRendererContainer
    __del__ = lambda self : None;
    def getRenderer(self, *args):
        """getRenderer(IRendererContainer self, std::string const & renderername) -> RendererBase"""
        return _fife.IRendererContainer_getRenderer(self, *args)

IRendererContainer_swigregister = _fife.IRendererContainer_swigregister
IRendererContainer_swigregister(IRendererContainer)

class ScreenPoint(_object):
    """Proxy of C++ FIFE::PointType3D<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _fife.ScreenPoint_x_set
    __swig_getmethods__["x"] = _fife.ScreenPoint_x_get
    if _newclass:x = _swig_property(_fife.ScreenPoint_x_get, _fife.ScreenPoint_x_set)
    __swig_setmethods__["y"] = _fife.ScreenPoint_y_set
    __swig_getmethods__["y"] = _fife.ScreenPoint_y_get
    if _newclass:y = _swig_property(_fife.ScreenPoint_y_get, _fife.ScreenPoint_y_set)
    __swig_setmethods__["z"] = _fife.ScreenPoint_z_set
    __swig_getmethods__["z"] = _fife.ScreenPoint_z_get
    if _newclass:z = _swig_property(_fife.ScreenPoint_z_get, _fife.ScreenPoint_z_set)
    def __init__(self, *args): 
        """
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0, int _y=0, int _z=0) -> ScreenPoint
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0, int _y=0) -> ScreenPoint
        __init__(FIFE::PointType3D<(int32_t)> self, int _x=0) -> ScreenPoint
        __init__(FIFE::PointType3D<(int32_t)> self) -> ScreenPoint
        __init__(FIFE::PointType3D<(int32_t)> self, Point3D rhs) -> ScreenPoint
        """
        this = _fife.new_ScreenPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args):
        """__add__(ScreenPoint self, Point3D p) -> Point3D"""
        return _fife.ScreenPoint___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(ScreenPoint self, Point3D p) -> Point3D"""
        return _fife.ScreenPoint___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(ScreenPoint self, Point3D p) -> Point3D"""
        return _fife.ScreenPoint___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(ScreenPoint self, Point3D p) -> Point3D"""
        return _fife.ScreenPoint___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(ScreenPoint self, int const & i) -> Point3D"""
        return _fife.ScreenPoint___mul__(self, *args)

    def __div__(self, *args):
        """__div__(ScreenPoint self, int const & i) -> Point3D"""
        return _fife.ScreenPoint___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(ScreenPoint self, Point3D p) -> bool"""
        return _fife.ScreenPoint___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(ScreenPoint self, Point3D p) -> bool"""
        return _fife.ScreenPoint___ne__(self, *args)

    def length(self):
        """length(ScreenPoint self) -> int"""
        return _fife.ScreenPoint_length(self)

    def normalize(self):
        """normalize(ScreenPoint self)"""
        return _fife.ScreenPoint_normalize(self)

    def set(self, *args):
        """set(ScreenPoint self, int _x, int _y, int _z)"""
        return _fife.ScreenPoint_set(self, *args)

    def __str__(self):
        """__str__(ScreenPoint self) -> std::string"""
        return _fife.ScreenPoint___str__(self)

    __swig_destroy__ = _fife.delete_ScreenPoint
    __del__ = lambda self : None;
ScreenPoint_swigregister = _fife.ScreenPoint_swigregister
ScreenPoint_swigregister(ScreenPoint)

class Camera(IRendererContainer):
    """Proxy of C++ FIFE::Camera class"""
    __swig_setmethods__ = {}
    for _s in [IRendererContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [IRendererContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_Camera
    __del__ = lambda self : None;
    def getId(self):
        """getId(Camera self) -> std::string const &"""
        return _fife.Camera_getId(self)

    def setId(self, *args):
        """setId(Camera self, std::string const & id)"""
        return _fife.Camera_setId(self, *args)

    def setTilt(self, *args):
        """setTilt(Camera self, double tilt)"""
        return _fife.Camera_setTilt(self, *args)

    def getTilt(self):
        """getTilt(Camera self) -> double"""
        return _fife.Camera_getTilt(self)

    def setRotation(self, *args):
        """setRotation(Camera self, double rotation)"""
        return _fife.Camera_setRotation(self, *args)

    def getRotation(self):
        """getRotation(Camera self) -> double"""
        return _fife.Camera_getRotation(self)

    def setZoom(self, *args):
        """setZoom(Camera self, double zoom)"""
        return _fife.Camera_setZoom(self, *args)

    def getZoom(self):
        """getZoom(Camera self) -> double"""
        return _fife.Camera_getZoom(self)

    def getOriginalZToY(self):
        """getOriginalZToY(Camera self) -> double"""
        return _fife.Camera_getOriginalZToY(self)

    def setZToY(self, *args):
        """setZToY(Camera self, double zToY)"""
        return _fife.Camera_setZToY(self, *args)

    def getZToY(self):
        """getZToY(Camera self) -> double"""
        return _fife.Camera_getZToY(self)

    def setZToYEnabled(self, *args):
        """setZToYEnabled(Camera self, bool enabled)"""
        return _fife.Camera_setZToYEnabled(self, *args)

    def isZToYEnabled(self):
        """isZToYEnabled(Camera self) -> bool"""
        return _fife.Camera_isZToYEnabled(self)

    def setLocation(self, *args):
        """setLocation(Camera self, Location location)"""
        return _fife.Camera_setLocation(self, *args)

    def getLocation(self):
        """getLocation(Camera self) -> Location"""
        return _fife.Camera_getLocation(self)

    def getLocationRef(self):
        """getLocationRef(Camera self) -> Location"""
        return _fife.Camera_getLocationRef(self)

    def attach(self, *args):
        """attach(Camera self, Instance instance)"""
        return _fife.Camera_attach(self, *args)

    def detach(self):
        """detach(Camera self)"""
        return _fife.Camera_detach(self)

    def getAttached(self):
        """getAttached(Camera self) -> Instance"""
        return _fife.Camera_getAttached(self)

    def setViewPort(self, *args):
        """setViewPort(Camera self, Rect viewport)"""
        return _fife.Camera_setViewPort(self, *args)

    def getViewPort(self):
        """getViewPort(Camera self) -> Rect"""
        return _fife.Camera_getViewPort(self)

    def getMapViewPort(self):
        """getMapViewPort(Camera self) -> Rect"""
        return _fife.Camera_getMapViewPort(self)

    def getLayerViewPort(self, *args):
        """getLayerViewPort(Camera self, Layer layer) -> Rect"""
        return _fife.Camera_getLayerViewPort(self, *args)

    def setCellImageDimensions(self, *args):
        """setCellImageDimensions(Camera self, uint32_t width, uint32_t height)"""
        return _fife.Camera_setCellImageDimensions(self, *args)

    def getCellImageDimensions(self):
        """getCellImageDimensions(Camera self) -> Point"""
        return _fife.Camera_getCellImageDimensions(self)

    def getZOffset(self, *args):
        """getZOffset(Camera self, Layer layer) -> Point3D"""
        return _fife.Camera_getZOffset(self, *args)

    def toScreenCoordinates(self, *args):
        """toScreenCoordinates(Camera self, DoublePoint3D map_coords) -> Point3D"""
        return _fife.Camera_toScreenCoordinates(self, *args)

    def toMapCoordinates(self, *args):
        """
        toMapCoordinates(Camera self, Point3D screen_coords, bool z_calculated=True) -> DoublePoint3D
        toMapCoordinates(Camera self, Point3D screen_coords) -> DoublePoint3D
        """
        return _fife.Camera_toMapCoordinates(self, *args)

    def setEnabled(self, *args):
        """setEnabled(Camera self, bool enabled)"""
        return _fife.Camera_setEnabled(self, *args)

    def isEnabled(self):
        """isEnabled(Camera self) -> bool"""
        return _fife.Camera_isEnabled(self)

    def getMatchingInstances(self, *args):
        """
        getMatchingInstances(Camera self, Point3D screen_coords, Layer layer, uint8_t alpha=0)
        getMatchingInstances(Camera self, Point3D screen_coords, Layer layer)
        getMatchingInstances(Camera self, Rect screen_rect, Layer layer, uint8_t alpha=0)
        getMatchingInstances(Camera self, Rect screen_rect, Layer layer)
        getMatchingInstances(Camera self, Location loc, bool use_exactcoordinates=False)
        getMatchingInstances(Camera self, Location loc)
        """
        return _fife.Camera_getMatchingInstances(self, *args)

    def getRenderer(self, *args):
        """getRenderer(Camera self, std::string const & name) -> RendererBase"""
        return _fife.Camera_getRenderer(self, *args)

    def resetRenderers(self):
        """resetRenderers(Camera self)"""
        return _fife.Camera_resetRenderers(self)

    def setLightingColor(self, *args):
        """setLightingColor(Camera self, float red, float green, float blue)"""
        return _fife.Camera_setLightingColor(self, *args)

    def resetLightingColor(self):
        """resetLightingColor(Camera self)"""
        return _fife.Camera_resetLightingColor(self)

    def getLightingColor(self):
        """getLightingColor(Camera self) -> FloatVector"""
        return _fife.Camera_getLightingColor(self)

    def setOverlayColor(self, *args):
        """setOverlayColor(Camera self, uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha)"""
        return _fife.Camera_setOverlayColor(self, *args)

    def getOverlayColor(self):
        """getOverlayColor(Camera self) -> vectoru"""
        return _fife.Camera_getOverlayColor(self)

    def resetOverlayColor(self):
        """resetOverlayColor(Camera self)"""
        return _fife.Camera_resetOverlayColor(self)

    def setOverlayImage(self, *args):
        """
        setOverlayImage(Camera self, int32_t id, bool fill=False)
        setOverlayImage(Camera self, int32_t id)
        """
        return _fife.Camera_setOverlayImage(self, *args)

    def getOverlayImage(self):
        """getOverlayImage(Camera self) -> int32_t"""
        return _fife.Camera_getOverlayImage(self)

    def resetOverlayImage(self):
        """resetOverlayImage(Camera self)"""
        return _fife.Camera_resetOverlayImage(self)

    def setOverlayAnimation(self, *args):
        """
        setOverlayAnimation(Camera self, SharedAnimationPointer anim, bool fill=False)
        setOverlayAnimation(Camera self, SharedAnimationPointer anim)
        """
        return _fife.Camera_setOverlayAnimation(self, *args)

    def getOverlayAnimation(self):
        """getOverlayAnimation(Camera self) -> SharedAnimationPointer"""
        return _fife.Camera_getOverlayAnimation(self)

    def resetOverlayAnimation(self):
        """resetOverlayAnimation(Camera self)"""
        return _fife.Camera_resetOverlayAnimation(self)

    def refresh(self):
        """refresh(Camera self)"""
        return _fife.Camera_refresh(self)

Camera_swigregister = _fife.Camera_swigregister
Camera_swigregister(Camera)

class BlockingInfoRenderer(RendererBase):
    """Proxy of C++ FIFE::BlockingInfoRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockingInfoRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockingInfoRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_BlockingInfoRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(BlockingInfoRenderer self) -> std::string"""
        return _fife.BlockingInfoRenderer_getName(self)

    def setColor(self, *args):
        """setColor(BlockingInfoRenderer self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.BlockingInfoRenderer_setColor(self, *args)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> BlockingInfoRenderer"""
        return _fife.BlockingInfoRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
BlockingInfoRenderer_swigregister = _fife.BlockingInfoRenderer_swigregister
BlockingInfoRenderer_swigregister(BlockingInfoRenderer)

def BlockingInfoRenderer_getInstance(*args):
  """BlockingInfoRenderer_getInstance(IRendererContainer cnt) -> BlockingInfoRenderer"""
  return _fife.BlockingInfoRenderer_getInstance(*args)

class CellRenderer(RendererBase):
    """Proxy of C++ FIFE::CellRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_CellRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(CellRenderer self) -> std::string"""
        return _fife.CellRenderer_getName(self)

    def setBlockerColor(self, *args):
        """setBlockerColor(CellRenderer self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.CellRenderer_setBlockerColor(self, *args)

    def setPathColor(self, *args):
        """setPathColor(CellRenderer self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.CellRenderer_setPathColor(self, *args)

    def setEnabledBlocking(self, *args):
        """setEnabledBlocking(CellRenderer self, bool enabled)"""
        return _fife.CellRenderer_setEnabledBlocking(self, *args)

    def isEnabledBlocking(self):
        """isEnabledBlocking(CellRenderer self) -> bool"""
        return _fife.CellRenderer_isEnabledBlocking(self)

    def setEnabledFogOfWar(self, *args):
        """setEnabledFogOfWar(CellRenderer self, bool enabled)"""
        return _fife.CellRenderer_setEnabledFogOfWar(self, *args)

    def isEnabledFogOfWar(self):
        """isEnabledFogOfWar(CellRenderer self) -> bool"""
        return _fife.CellRenderer_isEnabledFogOfWar(self)

    def setEnabledPathVisual(self, *args):
        """setEnabledPathVisual(CellRenderer self, bool enabled)"""
        return _fife.CellRenderer_setEnabledPathVisual(self, *args)

    def isEnabledPathVisual(self):
        """isEnabledPathVisual(CellRenderer self) -> bool"""
        return _fife.CellRenderer_isEnabledPathVisual(self)

    def setFogOfWarLayer(self, *args):
        """setFogOfWarLayer(CellRenderer self, Layer layer)"""
        return _fife.CellRenderer_setFogOfWarLayer(self, *args)

    def setConcealImage(self, *args):
        """setConcealImage(CellRenderer self, SharedImagePointer image)"""
        return _fife.CellRenderer_setConcealImage(self, *args)

    def setMaskImage(self, *args):
        """setMaskImage(CellRenderer self, SharedImagePointer image)"""
        return _fife.CellRenderer_setMaskImage(self, *args)

    def addPathVisual(self, *args):
        """addPathVisual(CellRenderer self, Instance instance)"""
        return _fife.CellRenderer_addPathVisual(self, *args)

    def removePathVisual(self, *args):
        """removePathVisual(CellRenderer self, Instance instance)"""
        return _fife.CellRenderer_removePathVisual(self, *args)

    def setEnabledCost(self, *args):
        """setEnabledCost(CellRenderer self, std::string const & costId, bool enabled)"""
        return _fife.CellRenderer_setEnabledCost(self, *args)

    def isEnabledCost(self, *args):
        """isEnabledCost(CellRenderer self, std::string const & costId) -> bool"""
        return _fife.CellRenderer_isEnabledCost(self, *args)

    def setFont(self, *args):
        """setFont(CellRenderer self, IFont font)"""
        return _fife.CellRenderer_setFont(self, *args)

    def getFont(self):
        """getFont(CellRenderer self) -> IFont"""
        return _fife.CellRenderer_getFont(self)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> CellRenderer"""
        return _fife.CellRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
CellRenderer_swigregister = _fife.CellRenderer_swigregister
CellRenderer_swigregister(CellRenderer)

def CellRenderer_getInstance(*args):
  """CellRenderer_getInstance(IRendererContainer cnt) -> CellRenderer"""
  return _fife.CellRenderer_getInstance(*args)

class CellSelectionRenderer(RendererBase):
    """Proxy of C++ FIFE::CellSelectionRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellSelectionRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CellSelectionRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_CellSelectionRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(CellSelectionRenderer self) -> std::string"""
        return _fife.CellSelectionRenderer_getName(self)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> CellSelectionRenderer"""
        return _fife.CellSelectionRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def reset(self):
        """reset(CellSelectionRenderer self)"""
        return _fife.CellSelectionRenderer_reset(self)

    def selectLocation(self, *args):
        """selectLocation(CellSelectionRenderer self, Location loc)"""
        return _fife.CellSelectionRenderer_selectLocation(self, *args)

    def deselectLocation(self, *args):
        """deselectLocation(CellSelectionRenderer self, Location loc)"""
        return _fife.CellSelectionRenderer_deselectLocation(self, *args)

    def getLocations(self):
        """getLocations(CellSelectionRenderer self) -> std::vector< FIFE::Location,std::allocator< FIFE::Location > > const"""
        return _fife.CellSelectionRenderer_getLocations(self)

    def setColor(self, *args):
        """setColor(CellSelectionRenderer self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.CellSelectionRenderer_setColor(self, *args)

CellSelectionRenderer_swigregister = _fife.CellSelectionRenderer_swigregister
CellSelectionRenderer_swigregister(CellSelectionRenderer)

def CellSelectionRenderer_getInstance(*args):
  """CellSelectionRenderer_getInstance(IRendererContainer cnt) -> CellSelectionRenderer"""
  return _fife.CellSelectionRenderer_getInstance(*args)

class CoordinateRenderer(RendererBase):
    """Proxy of C++ FIFE::CoordinateRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_CoordinateRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(CoordinateRenderer self) -> std::string"""
        return _fife.CoordinateRenderer_getName(self)

    def setFont(self, *args):
        """setFont(CoordinateRenderer self, IFont font)"""
        return _fife.CoordinateRenderer_setFont(self, *args)

    def setColor(self, *args):
        """setColor(CoordinateRenderer self, uint8_t r, uint8_t g, uint8_t b)"""
        return _fife.CoordinateRenderer_setColor(self, *args)

    def setZoom(self, *args):
        """setZoom(CoordinateRenderer self, bool enable)"""
        return _fife.CoordinateRenderer_setZoom(self, *args)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> CoordinateRenderer"""
        return _fife.CoordinateRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
CoordinateRenderer_swigregister = _fife.CoordinateRenderer_swigregister
CoordinateRenderer_swigregister(CoordinateRenderer)

def CoordinateRenderer_getInstance(*args):
  """CoordinateRenderer_getInstance(IRendererContainer cnt) -> CoordinateRenderer"""
  return _fife.CoordinateRenderer_getInstance(*args)

class FloatingTextRenderer(RendererBase):
    """Proxy of C++ FIFE::FloatingTextRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatingTextRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatingTextRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_FloatingTextRenderer
    __del__ = lambda self : None;
    def setFont(self, *args):
        """setFont(FloatingTextRenderer self, IFont font)"""
        return _fife.FloatingTextRenderer_setFont(self, *args)

    def setColor(self, *args):
        """
        setColor(FloatingTextRenderer self, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        setColor(FloatingTextRenderer self, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.FloatingTextRenderer_setColor(self, *args)

    def setBackground(self, *args):
        """
        setBackground(FloatingTextRenderer self, uint8_t br, uint8_t bg, uint8_t bb, uint8_t ba=255)
        setBackground(FloatingTextRenderer self, uint8_t br, uint8_t bg, uint8_t bb)
        """
        return _fife.FloatingTextRenderer_setBackground(self, *args)

    def setBorder(self, *args):
        """
        setBorder(FloatingTextRenderer self, uint8_t bbr, uint8_t bbg, uint8_t bbb, uint8_t bba=255)
        setBorder(FloatingTextRenderer self, uint8_t bbr, uint8_t bbg, uint8_t bbb)
        """
        return _fife.FloatingTextRenderer_setBorder(self, *args)

    def resetBackground(self):
        """resetBackground(FloatingTextRenderer self)"""
        return _fife.FloatingTextRenderer_resetBackground(self)

    def resetBorder(self):
        """resetBorder(FloatingTextRenderer self)"""
        return _fife.FloatingTextRenderer_resetBorder(self)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> FloatingTextRenderer"""
        return _fife.FloatingTextRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
FloatingTextRenderer_swigregister = _fife.FloatingTextRenderer_swigregister
FloatingTextRenderer_swigregister(FloatingTextRenderer)

def FloatingTextRenderer_getInstance(*args):
  """FloatingTextRenderer_getInstance(IRendererContainer cnt) -> FloatingTextRenderer"""
  return _fife.FloatingTextRenderer_getInstance(*args)

class GenericRendererElementInfo(_object):
    """Proxy of C++ FIFE::GenericRendererElementInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererElementInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererElementInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_GenericRendererElementInfo
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::GenericRendererElementInfo self) -> GenericRendererElementInfo"""
        this = _fife.new_GenericRendererElementInfo()
        try: self.this.append(this)
        except: self.this = this
GenericRendererElementInfo_swigregister = _fife.GenericRendererElementInfo_swigregister
GenericRendererElementInfo_swigregister(GenericRendererElementInfo)

class GenericRendererLineInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererLineInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererLineInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererLineInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::GenericRendererLineInfo self, RendererNode n1, RendererNode n2, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> GenericRendererLineInfo"""
        this = _fife.new_GenericRendererLineInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererLineInfo
    __del__ = lambda self : None;
GenericRendererLineInfo_swigregister = _fife.GenericRendererLineInfo_swigregister
GenericRendererLineInfo_swigregister(GenericRendererLineInfo)

class GenericRendererPointInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererPointInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererPointInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererPointInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::GenericRendererPointInfo self, RendererNode n, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> GenericRendererPointInfo"""
        this = _fife.new_GenericRendererPointInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererPointInfo
    __del__ = lambda self : None;
GenericRendererPointInfo_swigregister = _fife.GenericRendererPointInfo_swigregister
GenericRendererPointInfo_swigregister(GenericRendererPointInfo)

class GenericRendererTriangleInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererTriangleInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererTriangleInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererTriangleInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GenericRendererTriangleInfo self, RendererNode n1, RendererNode n2, RendererNode n3, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a) -> GenericRendererTriangleInfo
        """
        this = _fife.new_GenericRendererTriangleInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererTriangleInfo
    __del__ = lambda self : None;
GenericRendererTriangleInfo_swigregister = _fife.GenericRendererTriangleInfo_swigregister
GenericRendererTriangleInfo_swigregister(GenericRendererTriangleInfo)

class GenericRendererQuadInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererQuadInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererQuadInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererQuadInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GenericRendererQuadInfo self, RendererNode n1, RendererNode n2, RendererNode n3, RendererNode n4, uint8_t r, uint8_t g, 
            uint8_t b, uint8_t a) -> GenericRendererQuadInfo
        """
        this = _fife.new_GenericRendererQuadInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererQuadInfo
    __del__ = lambda self : None;
GenericRendererQuadInfo_swigregister = _fife.GenericRendererQuadInfo_swigregister
GenericRendererQuadInfo_swigregister(GenericRendererQuadInfo)

class GenericRendererVertexInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererVertexInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererVertexInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererVertexInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::GenericRendererVertexInfo self, RendererNode center, int32_t size, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> GenericRendererVertexInfo"""
        this = _fife.new_GenericRendererVertexInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererVertexInfo
    __del__ = lambda self : None;
GenericRendererVertexInfo_swigregister = _fife.GenericRendererVertexInfo_swigregister
GenericRendererVertexInfo_swigregister(GenericRendererVertexInfo)

class GenericRendererImageInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererImageInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererImageInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererImageInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GenericRendererImageInfo self, RendererNode n, SharedImagePointer image, bool zoomed=True) -> GenericRendererImageInfo
        __init__(FIFE::GenericRendererImageInfo self, RendererNode n, SharedImagePointer image) -> GenericRendererImageInfo
        """
        this = _fife.new_GenericRendererImageInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererImageInfo
    __del__ = lambda self : None;
GenericRendererImageInfo_swigregister = _fife.GenericRendererImageInfo_swigregister
GenericRendererImageInfo_swigregister(GenericRendererImageInfo)

class GenericRendererAnimationInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererAnimationInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererAnimationInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererAnimationInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GenericRendererAnimationInfo self, RendererNode n, SharedAnimationPointer animation, bool zoomed=True) -> GenericRendererAnimationInfo
        __init__(FIFE::GenericRendererAnimationInfo self, RendererNode n, SharedAnimationPointer animation) -> GenericRendererAnimationInfo
        """
        this = _fife.new_GenericRendererAnimationInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererAnimationInfo
    __del__ = lambda self : None;
GenericRendererAnimationInfo_swigregister = _fife.GenericRendererAnimationInfo_swigregister
GenericRendererAnimationInfo_swigregister(GenericRendererAnimationInfo)

class GenericRendererTextInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererTextInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererTextInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererTextInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GenericRendererTextInfo self, RendererNode n, IFont font, std::string text, bool zoomed=True) -> GenericRendererTextInfo
        __init__(FIFE::GenericRendererTextInfo self, RendererNode n, IFont font, std::string text) -> GenericRendererTextInfo
        """
        this = _fife.new_GenericRendererTextInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererTextInfo
    __del__ = lambda self : None;
GenericRendererTextInfo_swigregister = _fife.GenericRendererTextInfo_swigregister
GenericRendererTextInfo_swigregister(GenericRendererTextInfo)

class GenericRendererResizeInfo(GenericRendererElementInfo):
    """Proxy of C++ FIFE::GenericRendererResizeInfo class"""
    __swig_setmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRendererResizeInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GenericRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRendererResizeInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::GenericRendererResizeInfo self, RendererNode n, SharedImagePointer image, int32_t width, int32_t height, bool zoomed=True) -> GenericRendererResizeInfo
        __init__(FIFE::GenericRendererResizeInfo self, RendererNode n, SharedImagePointer image, int32_t width, int32_t height) -> GenericRendererResizeInfo
        """
        this = _fife.new_GenericRendererResizeInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRendererResizeInfo
    __del__ = lambda self : None;
GenericRendererResizeInfo_swigregister = _fife.GenericRendererResizeInfo_swigregister
GenericRendererResizeInfo_swigregister(GenericRendererResizeInfo)

class GenericRenderer(RendererBase):
    """Proxy of C++ FIFE::GenericRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::GenericRenderer self, RenderBackend renderbackend, int32_t position) -> GenericRenderer"""
        this = _fife.new_GenericRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_GenericRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(GenericRenderer self) -> std::string"""
        return _fife.GenericRenderer_getName(self)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> GenericRenderer"""
        return _fife.GenericRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def addLine(self, *args):
        """
        addLine(GenericRenderer self, std::string const & group, RendererNode n1, RendererNode n2, uint8_t r, uint8_t g, 
            uint8_t b, uint8_t a=255)
        addLine(GenericRenderer self, std::string const & group, RendererNode n1, RendererNode n2, uint8_t r, uint8_t g, 
            uint8_t b)
        """
        return _fife.GenericRenderer_addLine(self, *args)

    def addPoint(self, *args):
        """
        addPoint(GenericRenderer self, std::string const & group, RendererNode n, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addPoint(GenericRenderer self, std::string const & group, RendererNode n, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.GenericRenderer_addPoint(self, *args)

    def addTriangle(self, *args):
        """
        addTriangle(GenericRenderer self, std::string const & group, RendererNode n1, RendererNode n2, RendererNode n3, uint8_t r, 
            uint8_t g, uint8_t b, uint8_t a=255)
        addTriangle(GenericRenderer self, std::string const & group, RendererNode n1, RendererNode n2, RendererNode n3, uint8_t r, 
            uint8_t g, uint8_t b)
        """
        return _fife.GenericRenderer_addTriangle(self, *args)

    def addQuad(self, *args):
        """
        addQuad(GenericRenderer self, std::string const & group, RendererNode n1, RendererNode n2, RendererNode n3, RendererNode n4, 
            uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addQuad(GenericRenderer self, std::string const & group, RendererNode n1, RendererNode n2, RendererNode n3, RendererNode n4, 
            uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.GenericRenderer_addQuad(self, *args)

    def addVertex(self, *args):
        """
        addVertex(GenericRenderer self, std::string const & group, RendererNode n, int32_t size, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addVertex(GenericRenderer self, std::string const & group, RendererNode n, int32_t size, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.GenericRenderer_addVertex(self, *args)

    def addText(self, *args):
        """
        addText(GenericRenderer self, std::string const & group, RendererNode n, IFont font, std::string const & text, 
            bool zoomed=True)
        addText(GenericRenderer self, std::string const & group, RendererNode n, IFont font, std::string const & text)
        """
        return _fife.GenericRenderer_addText(self, *args)

    def addImage(self, *args):
        """
        addImage(GenericRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, bool zoomed=True)
        addImage(GenericRenderer self, std::string const & group, RendererNode n, SharedImagePointer image)
        """
        return _fife.GenericRenderer_addImage(self, *args)

    def addAnimation(self, *args):
        """
        addAnimation(GenericRenderer self, std::string const & group, RendererNode n, SharedAnimationPointer animation, bool zoomed=True)
        addAnimation(GenericRenderer self, std::string const & group, RendererNode n, SharedAnimationPointer animation)
        """
        return _fife.GenericRenderer_addAnimation(self, *args)

    def resizeImage(self, *args):
        """
        resizeImage(GenericRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t width, 
            int32_t height, bool zoomed=True)
        resizeImage(GenericRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t width, 
            int32_t height)
        """
        return _fife.GenericRenderer_resizeImage(self, *args)

    def removeAll(self, *args):
        """
        removeAll(GenericRenderer self, std::string const & group)
        removeAll(GenericRenderer self)
        """
        return _fife.GenericRenderer_removeAll(self, *args)

GenericRenderer_swigregister = _fife.GenericRenderer_swigregister
GenericRenderer_swigregister(GenericRenderer)

def GenericRenderer_getInstance(*args):
  """GenericRenderer_getInstance(IRendererContainer cnt) -> GenericRenderer"""
  return _fife.GenericRenderer_getInstance(*args)

class GridRenderer(RendererBase):
    """Proxy of C++ FIFE::GridRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_GridRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(GridRenderer self) -> std::string"""
        return _fife.GridRenderer_getName(self)

    def setColor(self, *args):
        """setColor(GridRenderer self, Uint8 r, Uint8 g, Uint8 b)"""
        return _fife.GridRenderer_setColor(self, *args)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> GridRenderer"""
        return _fife.GridRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
GridRenderer_swigregister = _fife.GridRenderer_swigregister
GridRenderer_swigregister(GridRenderer)

def GridRenderer_getInstance(*args):
  """GridRenderer_getInstance(IRendererContainer cnt) -> GridRenderer"""
  return _fife.GridRenderer_getInstance(*args)

class InstanceRenderer(RendererBase):
    """Proxy of C++ FIFE::InstanceRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceRenderer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_InstanceRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(InstanceRenderer self) -> std::string"""
        return _fife.InstanceRenderer_getName(self)

    def addOutlined(self, *args):
        """
        addOutlined(InstanceRenderer self, Instance instance, int32_t r, int32_t g, int32_t b, int32_t width, int32_t threshold=1)
        addOutlined(InstanceRenderer self, Instance instance, int32_t r, int32_t g, int32_t b, int32_t width)
        """
        return _fife.InstanceRenderer_addOutlined(self, *args)

    def removeOutlined(self, *args):
        """removeOutlined(InstanceRenderer self, Instance instance)"""
        return _fife.InstanceRenderer_removeOutlined(self, *args)

    def removeAllOutlines(self):
        """removeAllOutlines(InstanceRenderer self)"""
        return _fife.InstanceRenderer_removeAllOutlines(self)

    def addColored(self, *args):
        """
        addColored(InstanceRenderer self, Instance instance, int32_t r, int32_t g, int32_t b, int32_t a=128)
        addColored(InstanceRenderer self, Instance instance, int32_t r, int32_t g, int32_t b)
        """
        return _fife.InstanceRenderer_addColored(self, *args)

    def removeColored(self, *args):
        """removeColored(InstanceRenderer self, Instance instance)"""
        return _fife.InstanceRenderer_removeColored(self, *args)

    def removeAllColored(self):
        """removeAllColored(InstanceRenderer self)"""
        return _fife.InstanceRenderer_removeAllColored(self)

    def addTransparentArea(self, *args):
        """
        addTransparentArea(InstanceRenderer self, Instance instance, StringList groups, uint32_t w, uint32_t h, uint8_t trans, bool front=True)
        addTransparentArea(InstanceRenderer self, Instance instance, StringList groups, uint32_t w, uint32_t h, uint8_t trans)
        """
        return _fife.InstanceRenderer_addTransparentArea(self, *args)

    def removeTransparentArea(self, *args):
        """removeTransparentArea(InstanceRenderer self, Instance instance)"""
        return _fife.InstanceRenderer_removeTransparentArea(self, *args)

    def removeAllTransparentAreas(self):
        """removeAllTransparentAreas(InstanceRenderer self)"""
        return _fife.InstanceRenderer_removeAllTransparentAreas(self)

    def addIgnoreLight(self, *args):
        """addIgnoreLight(InstanceRenderer self, StringList groups)"""
        return _fife.InstanceRenderer_addIgnoreLight(self, *args)

    def removeIgnoreLight(self, *args):
        """removeIgnoreLight(InstanceRenderer self, StringList groups)"""
        return _fife.InstanceRenderer_removeIgnoreLight(self, *args)

    def removeAllIgnoreLight(self):
        """removeAllIgnoreLight(InstanceRenderer self)"""
        return _fife.InstanceRenderer_removeAllIgnoreLight(self)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> InstanceRenderer"""
        return _fife.InstanceRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def setRemoveInterval(self, *args):
        """setRemoveInterval(InstanceRenderer self, uint32_t interval)"""
        return _fife.InstanceRenderer_setRemoveInterval(self, *args)

    def getRemoveInterval(self):
        """getRemoveInterval(InstanceRenderer self) -> uint32_t"""
        return _fife.InstanceRenderer_getRemoveInterval(self)

InstanceRenderer_swigregister = _fife.InstanceRenderer_swigregister
InstanceRenderer_swigregister(InstanceRenderer)

def InstanceRenderer_getInstance(*args):
  """InstanceRenderer_getInstance(IRendererContainer cnt) -> InstanceRenderer"""
  return _fife.InstanceRenderer_getInstance(*args)

class LightRendererElementInfo(_object):
    """Proxy of C++ FIFE::LightRendererElementInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRendererElementInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightRendererElementInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_LightRendererElementInfo
    __del__ = lambda self : None;
    def getName(self):
        """getName(LightRendererElementInfo self) -> std::string"""
        return _fife.LightRendererElementInfo_getName(self)

    def getNode(self):
        """getNode(LightRendererElementInfo self) -> RendererNode"""
        return _fife.LightRendererElementInfo_getNode(self)

    def getSrcBlend(self):
        """getSrcBlend(LightRendererElementInfo self) -> int32_t"""
        return _fife.LightRendererElementInfo_getSrcBlend(self)

    def getDstBlend(self):
        """getDstBlend(LightRendererElementInfo self) -> int32_t"""
        return _fife.LightRendererElementInfo_getDstBlend(self)

    def setStencil(self, *args):
        """setStencil(LightRendererElementInfo self, uint8_t stencil_ref)"""
        return _fife.LightRendererElementInfo_setStencil(self, *args)

    def getStencil(self):
        """getStencil(LightRendererElementInfo self) -> int32_t"""
        return _fife.LightRendererElementInfo_getStencil(self)

    def removeStencil(self):
        """removeStencil(LightRendererElementInfo self)"""
        return _fife.LightRendererElementInfo_removeStencil(self)

    def getColor(self):
        """getColor(LightRendererElementInfo self) -> vectoru"""
        return _fife.LightRendererElementInfo_getColor(self)

    def getRadius(self):
        """getRadius(LightRendererElementInfo self) -> float"""
        return _fife.LightRendererElementInfo_getRadius(self)

    def getSubdivisions(self):
        """getSubdivisions(LightRendererElementInfo self) -> int32_t"""
        return _fife.LightRendererElementInfo_getSubdivisions(self)

    def getXStretch(self):
        """getXStretch(LightRendererElementInfo self) -> float"""
        return _fife.LightRendererElementInfo_getXStretch(self)

    def getYStretch(self):
        """getYStretch(LightRendererElementInfo self) -> float"""
        return _fife.LightRendererElementInfo_getYStretch(self)

LightRendererElementInfo_swigregister = _fife.LightRendererElementInfo_swigregister
LightRendererElementInfo_swigregister(LightRendererElementInfo)

class LightRendererImageInfo(LightRendererElementInfo):
    """Proxy of C++ FIFE::LightRendererImageInfo class"""
    __swig_setmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRendererImageInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightRendererImageInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_LightRendererImageInfo
    __del__ = lambda self : None;
    def getImage(self):
        """getImage(LightRendererImageInfo self) -> SharedImagePointer"""
        return _fife.LightRendererImageInfo_getImage(self)

LightRendererImageInfo_swigregister = _fife.LightRendererImageInfo_swigregister
LightRendererImageInfo_swigregister(LightRendererImageInfo)

class LightRendererAnimationInfo(LightRendererElementInfo):
    """Proxy of C++ FIFE::LightRendererAnimationInfo class"""
    __swig_setmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRendererAnimationInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightRendererAnimationInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_LightRendererAnimationInfo
    __del__ = lambda self : None;
    def getAnimation(self):
        """getAnimation(LightRendererAnimationInfo self) -> SharedAnimationPointer"""
        return _fife.LightRendererAnimationInfo_getAnimation(self)

LightRendererAnimationInfo_swigregister = _fife.LightRendererAnimationInfo_swigregister
LightRendererAnimationInfo_swigregister(LightRendererAnimationInfo)

class LightRendererSimpleLightInfo(LightRendererElementInfo):
    """Proxy of C++ FIFE::LightRendererSimpleLightInfo class"""
    __swig_setmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRendererSimpleLightInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightRendererSimpleLightInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_LightRendererSimpleLightInfo
    __del__ = lambda self : None;
    def getColor(self):
        """getColor(LightRendererSimpleLightInfo self) -> vectoru"""
        return _fife.LightRendererSimpleLightInfo_getColor(self)

    def getRadius(self):
        """getRadius(LightRendererSimpleLightInfo self) -> float"""
        return _fife.LightRendererSimpleLightInfo_getRadius(self)

    def getSubdivisions(self):
        """getSubdivisions(LightRendererSimpleLightInfo self) -> int32_t"""
        return _fife.LightRendererSimpleLightInfo_getSubdivisions(self)

    def getXStretch(self):
        """getXStretch(LightRendererSimpleLightInfo self) -> float"""
        return _fife.LightRendererSimpleLightInfo_getXStretch(self)

    def getYStretch(self):
        """getYStretch(LightRendererSimpleLightInfo self) -> float"""
        return _fife.LightRendererSimpleLightInfo_getYStretch(self)

LightRendererSimpleLightInfo_swigregister = _fife.LightRendererSimpleLightInfo_swigregister
LightRendererSimpleLightInfo_swigregister(LightRendererSimpleLightInfo)

class LightRendererResizeInfo(LightRendererElementInfo):
    """Proxy of C++ FIFE::LightRendererResizeInfo class"""
    __swig_setmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRendererResizeInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [LightRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightRendererResizeInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_LightRendererResizeInfo
    __del__ = lambda self : None;
    def getImage(self):
        """getImage(LightRendererResizeInfo self) -> SharedImagePointer"""
        return _fife.LightRendererResizeInfo_getImage(self)

LightRendererResizeInfo_swigregister = _fife.LightRendererResizeInfo_swigregister
LightRendererResizeInfo_swigregister(LightRendererResizeInfo)

class LightRenderer(RendererBase):
    """Proxy of C++ FIFE::LightRenderer class"""
    __swig_setmethods__ = {}
    for _s in [RendererBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [RendererBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::LightRenderer self, RenderBackend renderbackend, int32_t position) -> LightRenderer"""
        this = _fife.new_LightRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_LightRenderer
    __del__ = lambda self : None;
    def getName(self):
        """getName(LightRenderer self) -> std::string"""
        return _fife.LightRenderer_getName(self)

    def getInstance(*args):
        """getInstance(IRendererContainer cnt) -> LightRenderer"""
        return _fife.LightRenderer_getInstance(*args)

    if _newclass:getInstance = staticmethod(getInstance)
    __swig_getmethods__["getInstance"] = lambda x: getInstance
    def addImage(self, *args):
        """
        addImage(LightRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t src=-1, 
            int32_t dst=-1)
        addImage(LightRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t src=-1)
        addImage(LightRenderer self, std::string const & group, RendererNode n, SharedImagePointer image)
        """
        return _fife.LightRenderer_addImage(self, *args)

    def addAnimation(self, *args):
        """
        addAnimation(LightRenderer self, std::string const & group, RendererNode n, SharedAnimationPointer animation, int32_t src=-1, 
            int32_t dst=-1)
        addAnimation(LightRenderer self, std::string const & group, RendererNode n, SharedAnimationPointer animation, int32_t src=-1)
        addAnimation(LightRenderer self, std::string const & group, RendererNode n, SharedAnimationPointer animation)
        """
        return _fife.LightRenderer_addAnimation(self, *args)

    def addSimpleLight(self, *args):
        """
        addSimpleLight(LightRenderer self, std::string const & group, RendererNode n, uint8_t intensity, float radius, int32_t subdivisions, 
            float xstretch, float ystretch, uint8_t r, uint8_t g, uint8_t b, 
            int32_t src=-1, int32_t dst=-1)
        addSimpleLight(LightRenderer self, std::string const & group, RendererNode n, uint8_t intensity, float radius, int32_t subdivisions, 
            float xstretch, float ystretch, uint8_t r, uint8_t g, uint8_t b, 
            int32_t src=-1)
        addSimpleLight(LightRenderer self, std::string const & group, RendererNode n, uint8_t intensity, float radius, int32_t subdivisions, 
            float xstretch, float ystretch, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.LightRenderer_addSimpleLight(self, *args)

    def resizeImage(self, *args):
        """
        resizeImage(LightRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t width, 
            int32_t height, int32_t src=-1, int32_t dst=-1)
        resizeImage(LightRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t width, 
            int32_t height, int32_t src=-1)
        resizeImage(LightRenderer self, std::string const & group, RendererNode n, SharedImagePointer image, int32_t width, 
            int32_t height)
        """
        return _fife.LightRenderer_resizeImage(self, *args)

    def addStencilTest(self, *args):
        """
        addStencilTest(LightRenderer self, std::string const & group, uint8_t stencil_ref=0)
        addStencilTest(LightRenderer self, std::string const & group)
        """
        return _fife.LightRenderer_addStencilTest(self, *args)

    def removeStencilTest(self, *args):
        """removeStencilTest(LightRenderer self, std::string const & group)"""
        return _fife.LightRenderer_removeStencilTest(self, *args)

    def getGroups(self):
        """getGroups(LightRenderer self) -> StringList"""
        return _fife.LightRenderer_getGroups(self)

    def getLightInfo(self, *args):
        """getLightInfo(LightRenderer self, std::string const & group) -> LightRendererElementInfoVector"""
        return _fife.LightRenderer_getLightInfo(self, *args)

    def removeAll(self, *args):
        """
        removeAll(LightRenderer self, std::string const & group)
        removeAll(LightRenderer self)
        """
        return _fife.LightRenderer_removeAll(self, *args)

LightRenderer_swigregister = _fife.LightRenderer_swigregister
LightRenderer_swigregister(LightRenderer)

def LightRenderer_getInstance(*args):
  """LightRenderer_getInstance(IRendererContainer cnt) -> LightRenderer"""
  return _fife.LightRenderer_getInstance(*args)

class LightRendererElementInfoVector(_object):
    """Proxy of C++ std::vector<(p.FIFE::LightRendererElementInfo)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRendererElementInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightRendererElementInfoVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(LightRendererElementInfoVector self) -> SwigPyIterator"""
        return _fife.LightRendererElementInfoVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(LightRendererElementInfoVector self) -> bool"""
        return _fife.LightRendererElementInfoVector___nonzero__(self)

    def __bool__(self):
        """__bool__(LightRendererElementInfoVector self) -> bool"""
        return _fife.LightRendererElementInfoVector___bool__(self)

    def __len__(self):
        """__len__(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::size_type"""
        return _fife.LightRendererElementInfoVector___len__(self)

    def pop(self):
        """pop(LightRendererElementInfoVector self) -> LightRendererElementInfo"""
        return _fife.LightRendererElementInfoVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i, std::vector< FIFE::LightRendererElementInfo * >::difference_type j) -> LightRendererElementInfoVector"""
        return _fife.LightRendererElementInfoVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i, std::vector< FIFE::LightRendererElementInfo * >::difference_type j, 
            LightRendererElementInfoVector v=std::vector< FIFE::LightRendererElementInfo *,std::allocator< FIFE::LightRendererElementInfo * > >())
        __setslice__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i, std::vector< FIFE::LightRendererElementInfo * >::difference_type j)
        """
        return _fife.LightRendererElementInfoVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i, std::vector< FIFE::LightRendererElementInfo * >::difference_type j)"""
        return _fife.LightRendererElementInfoVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i)
        __delitem__(LightRendererElementInfoVector self, PySliceObject * slice)
        """
        return _fife.LightRendererElementInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(LightRendererElementInfoVector self, PySliceObject * slice) -> LightRendererElementInfoVector
        __getitem__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i) -> LightRendererElementInfo
        """
        return _fife.LightRendererElementInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(LightRendererElementInfoVector self, PySliceObject * slice, LightRendererElementInfoVector v)
        __setitem__(LightRendererElementInfoVector self, PySliceObject * slice)
        __setitem__(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::difference_type i, LightRendererElementInfo x)
        """
        return _fife.LightRendererElementInfoVector___setitem__(self, *args)

    def append(self, *args):
        """append(LightRendererElementInfoVector self, LightRendererElementInfo x)"""
        return _fife.LightRendererElementInfoVector_append(self, *args)

    def empty(self):
        """empty(LightRendererElementInfoVector self) -> bool"""
        return _fife.LightRendererElementInfoVector_empty(self)

    def size(self):
        """size(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::size_type"""
        return _fife.LightRendererElementInfoVector_size(self)

    def clear(self):
        """clear(LightRendererElementInfoVector self)"""
        return _fife.LightRendererElementInfoVector_clear(self)

    def swap(self, *args):
        """swap(LightRendererElementInfoVector self, LightRendererElementInfoVector v)"""
        return _fife.LightRendererElementInfoVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::allocator_type"""
        return _fife.LightRendererElementInfoVector_get_allocator(self)

    def begin(self):
        """begin(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::iterator"""
        return _fife.LightRendererElementInfoVector_begin(self)

    def end(self):
        """end(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::iterator"""
        return _fife.LightRendererElementInfoVector_end(self)

    def rbegin(self):
        """rbegin(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::reverse_iterator"""
        return _fife.LightRendererElementInfoVector_rbegin(self)

    def rend(self):
        """rend(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::reverse_iterator"""
        return _fife.LightRendererElementInfoVector_rend(self)

    def pop_back(self):
        """pop_back(LightRendererElementInfoVector self)"""
        return _fife.LightRendererElementInfoVector_pop_back(self)

    def erase(self, *args):
        """
        erase(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::iterator pos) -> std::vector< FIFE::LightRendererElementInfo * >::iterator
        erase(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::iterator first, std::vector< FIFE::LightRendererElementInfo * >::iterator last) -> std::vector< FIFE::LightRendererElementInfo * >::iterator
        """
        return _fife.LightRendererElementInfoVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.FIFE::LightRendererElementInfo)> self) -> LightRendererElementInfoVector
        __init__(std::vector<(p.FIFE::LightRendererElementInfo)> self, LightRendererElementInfoVector arg2) -> LightRendererElementInfoVector
        __init__(std::vector<(p.FIFE::LightRendererElementInfo)> self, std::vector< FIFE::LightRendererElementInfo * >::size_type size) -> LightRendererElementInfoVector
        __init__(std::vector<(p.FIFE::LightRendererElementInfo)> self, std::vector< FIFE::LightRendererElementInfo * >::size_type size, LightRendererElementInfo value) -> LightRendererElementInfoVector
        """
        this = _fife.new_LightRendererElementInfoVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(LightRendererElementInfoVector self, LightRendererElementInfo x)"""
        return _fife.LightRendererElementInfoVector_push_back(self, *args)

    def front(self):
        """front(LightRendererElementInfoVector self) -> LightRendererElementInfo"""
        return _fife.LightRendererElementInfoVector_front(self)

    def back(self):
        """back(LightRendererElementInfoVector self) -> LightRendererElementInfo"""
        return _fife.LightRendererElementInfoVector_back(self)

    def assign(self, *args):
        """assign(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::size_type n, LightRendererElementInfo x)"""
        return _fife.LightRendererElementInfoVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::size_type new_size)
        resize(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::size_type new_size, LightRendererElementInfo x)
        """
        return _fife.LightRendererElementInfoVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::iterator pos, LightRendererElementInfo x) -> std::vector< FIFE::LightRendererElementInfo * >::iterator
        insert(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::iterator pos, std::vector< FIFE::LightRendererElementInfo * >::size_type n, 
            LightRendererElementInfo x)
        """
        return _fife.LightRendererElementInfoVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(LightRendererElementInfoVector self, std::vector< FIFE::LightRendererElementInfo * >::size_type n)"""
        return _fife.LightRendererElementInfoVector_reserve(self, *args)

    def capacity(self):
        """capacity(LightRendererElementInfoVector self) -> std::vector< FIFE::LightRendererElementInfo * >::size_type"""
        return _fife.LightRendererElementInfoVector_capacity(self)

    __swig_destroy__ = _fife.delete_LightRendererElementInfoVector
    __del__ = lambda self : None;
LightRendererElementInfoVector_swigregister = _fife.LightRendererElementInfoVector_swigregister
LightRendererElementInfoVector_swigregister(LightRendererElementInfoVector)

class OffRendererElementInfo(_object):
    """Proxy of C++ FIFE::OffRendererElementInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererElementInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererElementInfo, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_OffRendererElementInfo
    __del__ = lambda self : None;
    def __init__(self): 
        """__init__(FIFE::OffRendererElementInfo self) -> OffRendererElementInfo"""
        this = _fife.new_OffRendererElementInfo()
        try: self.this.append(this)
        except: self.this = this
OffRendererElementInfo_swigregister = _fife.OffRendererElementInfo_swigregister
OffRendererElementInfo_swigregister(OffRendererElementInfo)

class OffRendererLineInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererLineInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererLineInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererLineInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererLineInfo self, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> OffRendererLineInfo"""
        this = _fife.new_OffRendererLineInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererLineInfo
    __del__ = lambda self : None;
OffRendererLineInfo_swigregister = _fife.OffRendererLineInfo_swigregister
OffRendererLineInfo_swigregister(OffRendererLineInfo)

class OffRendererPointInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererPointInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererPointInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererPointInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererPointInfo self, Point n, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> OffRendererPointInfo"""
        this = _fife.new_OffRendererPointInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererPointInfo
    __del__ = lambda self : None;
OffRendererPointInfo_swigregister = _fife.OffRendererPointInfo_swigregister
OffRendererPointInfo_swigregister(OffRendererPointInfo)

class OffRendererTriangleInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererTriangleInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererTriangleInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererTriangleInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererTriangleInfo self, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> OffRendererTriangleInfo"""
        this = _fife.new_OffRendererTriangleInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererTriangleInfo
    __del__ = lambda self : None;
OffRendererTriangleInfo_swigregister = _fife.OffRendererTriangleInfo_swigregister
OffRendererTriangleInfo_swigregister(OffRendererTriangleInfo)

class OffRendererQuadInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererQuadInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererQuadInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererQuadInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererQuadInfo self, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> OffRendererQuadInfo"""
        this = _fife.new_OffRendererQuadInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererQuadInfo
    __del__ = lambda self : None;
OffRendererQuadInfo_swigregister = _fife.OffRendererQuadInfo_swigregister
OffRendererQuadInfo_swigregister(OffRendererQuadInfo)

class OffRendererVertexInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererVertexInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererVertexInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererVertexInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererVertexInfo self, Point center, int32_t size, uint8_t r, uint8_t g, uint8_t b, uint8_t a) -> OffRendererVertexInfo"""
        this = _fife.new_OffRendererVertexInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererVertexInfo
    __del__ = lambda self : None;
OffRendererVertexInfo_swigregister = _fife.OffRendererVertexInfo_swigregister
OffRendererVertexInfo_swigregister(OffRendererVertexInfo)

class OffRendererImageInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererImageInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererImageInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererImageInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererImageInfo self, Point n, SharedImagePointer image) -> OffRendererImageInfo"""
        this = _fife.new_OffRendererImageInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererImageInfo
    __del__ = lambda self : None;
OffRendererImageInfo_swigregister = _fife.OffRendererImageInfo_swigregister
OffRendererImageInfo_swigregister(OffRendererImageInfo)

class OffRendererAnimationInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererAnimationInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererAnimationInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererAnimationInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererAnimationInfo self, Point n, SharedAnimationPointer animation) -> OffRendererAnimationInfo"""
        this = _fife.new_OffRendererAnimationInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererAnimationInfo
    __del__ = lambda self : None;
OffRendererAnimationInfo_swigregister = _fife.OffRendererAnimationInfo_swigregister
OffRendererAnimationInfo_swigregister(OffRendererAnimationInfo)

class OffRendererTextInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererTextInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererTextInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererTextInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererTextInfo self, Point n, IFont font, std::string text) -> OffRendererTextInfo"""
        this = _fife.new_OffRendererTextInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererTextInfo
    __del__ = lambda self : None;
OffRendererTextInfo_swigregister = _fife.OffRendererTextInfo_swigregister
OffRendererTextInfo_swigregister(OffRendererTextInfo)

class OffRendererResizeInfo(OffRendererElementInfo):
    """Proxy of C++ FIFE::OffRendererResizeInfo class"""
    __swig_setmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRendererResizeInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [OffRendererElementInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OffRendererResizeInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRendererResizeInfo self, Point n, SharedImagePointer image, int32_t width, int32_t height) -> OffRendererResizeInfo"""
        this = _fife.new_OffRendererResizeInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRendererResizeInfo
    __del__ = lambda self : None;
OffRendererResizeInfo_swigregister = _fife.OffRendererResizeInfo_swigregister
OffRendererResizeInfo_swigregister(OffRendererResizeInfo)

class OffRenderer(_object):
    """Proxy of C++ FIFE::OffRenderer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OffRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OffRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::OffRenderer self, RenderBackend renderbackend) -> OffRenderer"""
        this = _fife.new_OffRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OffRenderer
    __del__ = lambda self : None;
    def setEnabled(self, *args):
        """setEnabled(OffRenderer self, bool enabled)"""
        return _fife.OffRenderer_setEnabled(self, *args)

    def isEnabled(self):
        """isEnabled(OffRenderer self) -> bool"""
        return _fife.OffRenderer_isEnabled(self)

    def setClipArea(self, *args):
        """setClipArea(OffRenderer self, Rect area)"""
        return _fife.OffRenderer_setClipArea(self, *args)

    def getClipArea(self):
        """getClipArea(OffRenderer self) -> Rect"""
        return _fife.OffRenderer_getClipArea(self)

    def addLine(self, *args):
        """
        addLine(OffRenderer self, std::string const & group, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addLine(OffRenderer self, std::string const & group, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.OffRenderer_addLine(self, *args)

    def addPoint(self, *args):
        """
        addPoint(OffRenderer self, std::string const & group, Point n, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addPoint(OffRenderer self, std::string const & group, Point n, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.OffRenderer_addPoint(self, *args)

    def addTriangle(self, *args):
        """
        addTriangle(OffRenderer self, std::string const & group, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addTriangle(OffRenderer self, std::string const & group, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.OffRenderer_addTriangle(self, *args)

    def addQuad(self, *args):
        """
        addQuad(OffRenderer self, std::string const & group, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, 
            uint8_t b, uint8_t a=255)
        addQuad(OffRenderer self, std::string const & group, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, 
            uint8_t b)
        """
        return _fife.OffRenderer_addQuad(self, *args)

    def addVertex(self, *args):
        """
        addVertex(OffRenderer self, std::string const & group, Point n, int32_t size, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addVertex(OffRenderer self, std::string const & group, Point n, int32_t size, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.OffRenderer_addVertex(self, *args)

    def addText(self, *args):
        """addText(OffRenderer self, std::string const & group, Point n, IFont font, std::string const & text)"""
        return _fife.OffRenderer_addText(self, *args)

    def addImage(self, *args):
        """addImage(OffRenderer self, std::string const & group, Point n, SharedImagePointer image)"""
        return _fife.OffRenderer_addImage(self, *args)

    def addAnimation(self, *args):
        """addAnimation(OffRenderer self, std::string const & group, Point n, SharedAnimationPointer animation)"""
        return _fife.OffRenderer_addAnimation(self, *args)

    def resizeImage(self, *args):
        """resizeImage(OffRenderer self, std::string const & group, Point n, SharedImagePointer image, int32_t width, int32_t height)"""
        return _fife.OffRenderer_resizeImage(self, *args)

    def removeAll(self, *args):
        """
        removeAll(OffRenderer self, std::string const & group)
        removeAll(OffRenderer self)
        """
        return _fife.OffRenderer_removeAll(self, *args)

OffRenderer_swigregister = _fife.OffRenderer_swigregister
OffRenderer_swigregister(OffRenderer)

class RenderTarget(_object):
    """Proxy of C++ FIFE::RenderTarget class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderTarget, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_RenderTarget
    __del__ = lambda self : None;
    def addLine(self, *args):
        """
        addLine(RenderTarget self, std::string const & group, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addLine(RenderTarget self, std::string const & group, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.RenderTarget_addLine(self, *args)

    def addPoint(self, *args):
        """
        addPoint(RenderTarget self, std::string const & group, Point n, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addPoint(RenderTarget self, std::string const & group, Point n, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.RenderTarget_addPoint(self, *args)

    def addTriangle(self, *args):
        """
        addTriangle(RenderTarget self, std::string const & group, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addTriangle(RenderTarget self, std::string const & group, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.RenderTarget_addTriangle(self, *args)

    def addQuad(self, *args):
        """
        addQuad(RenderTarget self, std::string const & group, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, 
            uint8_t b, uint8_t a=255)
        addQuad(RenderTarget self, std::string const & group, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, 
            uint8_t b)
        """
        return _fife.RenderTarget_addQuad(self, *args)

    def addVertex(self, *args):
        """
        addVertex(RenderTarget self, std::string const & group, Point n, int32_t size, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addVertex(RenderTarget self, std::string const & group, Point n, int32_t size, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.RenderTarget_addVertex(self, *args)

    def addText(self, *args):
        """addText(RenderTarget self, std::string const & group, Point n, IFont font, std::string const & text)"""
        return _fife.RenderTarget_addText(self, *args)

    def addImage(self, *args):
        """addImage(RenderTarget self, std::string const & group, Point n, SharedImagePointer image)"""
        return _fife.RenderTarget_addImage(self, *args)

    def addAnimation(self, *args):
        """addAnimation(RenderTarget self, std::string const & group, Point n, SharedAnimationPointer animation)"""
        return _fife.RenderTarget_addAnimation(self, *args)

    def resizeImage(self, *args):
        """resizeImage(RenderTarget self, std::string const & group, Point n, SharedImagePointer image, int32_t width, int32_t height)"""
        return _fife.RenderTarget_resizeImage(self, *args)

    def removeAll(self, *args):
        """
        removeAll(RenderTarget self, std::string const & group)
        removeAll(RenderTarget self)
        """
        return _fife.RenderTarget_removeAll(self, *args)

    def render(self):
        """render(RenderTarget self)"""
        return _fife.RenderTarget_render(self)

    def getTarget(self):
        """getTarget(RenderTarget self) -> SharedImagePointer"""
        return _fife.RenderTarget_getTarget(self)

RenderTarget_swigregister = _fife.RenderTarget_swigregister
RenderTarget_swigregister(RenderTarget)

class SharedRenderTargetPointer(_object):
    """Proxy of C++ FIFE::SharedPtr<(FIFE::RenderTarget)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedRenderTargetPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedRenderTargetPointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::SharedPtr<(FIFE::RenderTarget)> self) -> SharedRenderTargetPointer
        __init__(FIFE::SharedPtr<(FIFE::RenderTarget)> self, SharedRenderTargetPointer rhs) -> SharedRenderTargetPointer
        """
        this = _fife.new_SharedRenderTargetPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SharedRenderTargetPointer
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(SharedRenderTargetPointer self) -> RenderTarget"""
        return _fife.SharedRenderTargetPointer___ref__(self)

    def __deref__(self):
        """__deref__(SharedRenderTargetPointer self) -> RenderTarget"""
        return _fife.SharedRenderTargetPointer___deref__(self)

    def get(self):
        """get(SharedRenderTargetPointer self) -> RenderTarget"""
        return _fife.SharedRenderTargetPointer_get(self)

    def reset(self, ptr=None):
        """
        reset(SharedRenderTargetPointer self, RenderTarget ptr=None)
        reset(SharedRenderTargetPointer self)
        """
        return _fife.SharedRenderTargetPointer_reset(self, ptr)

    def useCount(self):
        """useCount(SharedRenderTargetPointer self) -> uint32_t"""
        return _fife.SharedRenderTargetPointer_useCount(self)

    def useCountPtr(self):
        """useCountPtr(SharedRenderTargetPointer self) -> uint32_t *"""
        return _fife.SharedRenderTargetPointer_useCountPtr(self)

    def unique(self):
        """unique(SharedRenderTargetPointer self) -> bool"""
        return _fife.SharedRenderTargetPointer_unique(self)

    def __nonzero__(self):
        return _fife.SharedRenderTargetPointer___nonzero__(self)
    __bool__ = __nonzero__


    def addLine(self, *args):
        """
        addLine(SharedRenderTargetPointer self, std::string const & group, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addLine(SharedRenderTargetPointer self, std::string const & group, Point n1, Point n2, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.SharedRenderTargetPointer_addLine(self, *args)

    def addPoint(self, *args):
        """
        addPoint(SharedRenderTargetPointer self, std::string const & group, Point n, uint8_t r, uint8_t g, uint8_t b, uint8_t a=255)
        addPoint(SharedRenderTargetPointer self, std::string const & group, Point n, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.SharedRenderTargetPointer_addPoint(self, *args)

    def addTriangle(self, *args):
        """
        addTriangle(SharedRenderTargetPointer self, std::string const & group, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addTriangle(SharedRenderTargetPointer self, std::string const & group, Point n1, Point n2, Point n3, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.SharedRenderTargetPointer_addTriangle(self, *args)

    def addQuad(self, *args):
        """
        addQuad(SharedRenderTargetPointer self, std::string const & group, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, 
            uint8_t b, uint8_t a=255)
        addQuad(SharedRenderTargetPointer self, std::string const & group, Point n1, Point n2, Point n3, Point n4, uint8_t r, uint8_t g, 
            uint8_t b)
        """
        return _fife.SharedRenderTargetPointer_addQuad(self, *args)

    def addVertex(self, *args):
        """
        addVertex(SharedRenderTargetPointer self, std::string const & group, Point n, int32_t size, uint8_t r, uint8_t g, uint8_t b, 
            uint8_t a=255)
        addVertex(SharedRenderTargetPointer self, std::string const & group, Point n, int32_t size, uint8_t r, uint8_t g, uint8_t b)
        """
        return _fife.SharedRenderTargetPointer_addVertex(self, *args)

    def addText(self, *args):
        """addText(SharedRenderTargetPointer self, std::string const & group, Point n, IFont font, std::string const & text)"""
        return _fife.SharedRenderTargetPointer_addText(self, *args)

    def addImage(self, *args):
        """addImage(SharedRenderTargetPointer self, std::string const & group, Point n, SharedImagePointer image)"""
        return _fife.SharedRenderTargetPointer_addImage(self, *args)

    def addAnimation(self, *args):
        """addAnimation(SharedRenderTargetPointer self, std::string const & group, Point n, SharedAnimationPointer animation)"""
        return _fife.SharedRenderTargetPointer_addAnimation(self, *args)

    def resizeImage(self, *args):
        """resizeImage(SharedRenderTargetPointer self, std::string const & group, Point n, SharedImagePointer image, int32_t width, int32_t height)"""
        return _fife.SharedRenderTargetPointer_resizeImage(self, *args)

    def removeAll(self, *args):
        """
        removeAll(SharedRenderTargetPointer self, std::string const & group)
        removeAll(SharedRenderTargetPointer self)
        """
        return _fife.SharedRenderTargetPointer_removeAll(self, *args)

    def render(self):
        """render(SharedRenderTargetPointer self)"""
        return _fife.SharedRenderTargetPointer_render(self)

    def getTarget(self):
        """getTarget(SharedRenderTargetPointer self) -> SharedImagePointer"""
        return _fife.SharedRenderTargetPointer_getTarget(self)

SharedRenderTargetPointer_swigregister = _fife.SharedRenderTargetPointer_swigregister
SharedRenderTargetPointer_swigregister(SharedRenderTargetPointer)

class TargetRenderer(_object):
    """Proxy of C++ FIFE::TargetRenderer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetRenderer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TargetRenderer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FIFE::TargetRenderer self, RenderBackend renderbackend) -> TargetRenderer"""
        this = _fife.new_TargetRenderer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TargetRenderer
    __del__ = lambda self : None;
    def createRenderTarget(self, *args):
        """
        createRenderTarget(TargetRenderer self, std::string const & name, uint32_t width, uint32_t height) -> SharedRenderTargetPointer
        createRenderTarget(TargetRenderer self, SharedImagePointer image) -> SharedRenderTargetPointer
        """
        return _fife.TargetRenderer_createRenderTarget(self, *args)

    def setRenderTarget(self, *args):
        """
        setRenderTarget(TargetRenderer self, std::string const & targetname, bool discard, int32_t ndraws=0)
        setRenderTarget(TargetRenderer self, std::string const & targetname, bool discard)
        """
        return _fife.TargetRenderer_setRenderTarget(self, *args)

    def render(self):
        """render(TargetRenderer self)"""
        return _fife.TargetRenderer_render(self)

TargetRenderer_swigregister = _fife.TargetRenderer_swigregister
TargetRenderer_swigregister(TargetRenderer)

class OverlayColors(_object):
    """Proxy of C++ FIFE::OverlayColors class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverlayColors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OverlayColors, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FIFE::OverlayColors self) -> OverlayColors
        __init__(FIFE::OverlayColors self, SharedImagePointer image) -> OverlayColors
        __init__(FIFE::OverlayColors self, SharedAnimationPointer animation) -> OverlayColors
        """
        this = _fife.new_OverlayColors(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OverlayColors
    __del__ = lambda self : None;
    def setColorOverlayImage(self, *args):
        """setColorOverlayImage(OverlayColors self, SharedImagePointer image)"""
        return _fife.OverlayColors_setColorOverlayImage(self, *args)

    def getColorOverlayImage(self):
        """getColorOverlayImage(OverlayColors self) -> SharedImagePointer"""
        return _fife.OverlayColors_getColorOverlayImage(self)

    def setColorOverlayAnimation(self, *args):
        """setColorOverlayAnimation(OverlayColors self, SharedAnimationPointer animation)"""
        return _fife.OverlayColors_setColorOverlayAnimation(self, *args)

    def getColorOverlayAnimation(self):
        """getColorOverlayAnimation(OverlayColors self) -> SharedAnimationPointer"""
        return _fife.OverlayColors_getColorOverlayAnimation(self)

    def changeColor(self, *args):
        """changeColor(OverlayColors self, Color source, Color target)"""
        return _fife.OverlayColors_changeColor(self, *args)

    def getColors(self):
        """getColors(OverlayColors self) -> std::map< FIFE::Color,FIFE::Color,std::less< FIFE::Color >,std::allocator< std::pair< FIFE::Color const,FIFE::Color > > > const &"""
        return _fife.OverlayColors_getColors(self)

    def resetColors(self):
        """resetColors(OverlayColors self)"""
        return _fife.OverlayColors_resetColors(self)

OverlayColors_swigregister = _fife.OverlayColors_swigregister
OverlayColors_swigregister(OverlayColors)

class Visual2DGfx(_object):
    """Proxy of C++ FIFE::Visual2DGfx class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Visual2DGfx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Visual2DGfx, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fife.delete_Visual2DGfx
    __del__ = lambda self : None;
Visual2DGfx_swigregister = _fife.Visual2DGfx_swigregister
Visual2DGfx_swigregister(Visual2DGfx)

class ObjectVisual(Visual2DGfx):
    """Proxy of C++ FIFE::ObjectVisual class"""
    __swig_setmethods__ = {}
    for _s in [Visual2DGfx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectVisual, name, value)
    __swig_getmethods__ = {}
    for _s in [Visual2DGfx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectVisual, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def create(*args):
        """create(Object object) -> ObjectVisual"""
        return _fife.ObjectVisual_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    __swig_destroy__ = _fife.delete_ObjectVisual
    __del__ = lambda self : None;
    def addStaticImage(self, *args):
        """addStaticImage(ObjectVisual self, uint32_t angle, int32_t image_index)"""
        return _fife.ObjectVisual_addStaticImage(self, *args)

    def getStaticImageIndexByAngle(self, *args):
        """getStaticImageIndexByAngle(ObjectVisual self, int32_t angle) -> int32_t"""
        return _fife.ObjectVisual_getStaticImageIndexByAngle(self, *args)

    def addStaticColorOverlay(self, *args):
        """addStaticColorOverlay(ObjectVisual self, uint32_t angle, OverlayColors colors)"""
        return _fife.ObjectVisual_addStaticColorOverlay(self, *args)

    def getStaticColorOverlay(self, *args):
        """getStaticColorOverlay(ObjectVisual self, int32_t angle) -> OverlayColors"""
        return _fife.ObjectVisual_getStaticColorOverlay(self, *args)

    def removeStaticColorOverlay(self, *args):
        """removeStaticColorOverlay(ObjectVisual self, int32_t angle)"""
        return _fife.ObjectVisual_removeStaticColorOverlay(self, *args)

    def getClosestMatchingAngle(self, *args):
        """getClosestMatchingAngle(ObjectVisual self, int32_t angle) -> int32_t"""
        return _fife.ObjectVisual_getClosestMatchingAngle(self, *args)

    def getStaticImageAngles(self):
        """getStaticImageAngles(ObjectVisual self)"""
        return _fife.ObjectVisual_getStaticImageAngles(self)

ObjectVisual_swigregister = _fife.ObjectVisual_swigregister
ObjectVisual_swigregister(ObjectVisual)

def ObjectVisual_create(*args):
  """ObjectVisual_create(Object object) -> ObjectVisual"""
  return _fife.ObjectVisual_create(*args)

class InstanceVisual(Visual2DGfx):
    """Proxy of C++ FIFE::InstanceVisual class"""
    __swig_setmethods__ = {}
    for _s in [Visual2DGfx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstanceVisual, name, value)
    __swig_getmethods__ = {}
    for _s in [Visual2DGfx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstanceVisual, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def create(*args):
        """create(Instance instance) -> InstanceVisual"""
        return _fife.InstanceVisual_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    __swig_destroy__ = _fife.delete_InstanceVisual
    __del__ = lambda self : None;
    def setTransparency(self, *args):
        """setTransparency(InstanceVisual self, uint8_t transparency)"""
        return _fife.InstanceVisual_setTransparency(self, *args)

    def getTransparency(self):
        """getTransparency(InstanceVisual self) -> uint8_t"""
        return _fife.InstanceVisual_getTransparency(self)

    def setVisible(self, *args):
        """setVisible(InstanceVisual self, bool visible)"""
        return _fife.InstanceVisual_setVisible(self, *args)

    def isVisible(self):
        """isVisible(InstanceVisual self) -> bool"""
        return _fife.InstanceVisual_isVisible(self)

    def setStackPosition(self, *args):
        """setStackPosition(InstanceVisual self, int32_t stackposition)"""
        return _fife.InstanceVisual_setStackPosition(self, *args)

    def getStackPosition(self):
        """getStackPosition(InstanceVisual self) -> int32_t"""
        return _fife.InstanceVisual_getStackPosition(self)

InstanceVisual_swigregister = _fife.InstanceVisual_swigregister
InstanceVisual_swigregister(InstanceVisual)

def InstanceVisual_create(*args):
  """InstanceVisual_create(Instance instance) -> InstanceVisual"""
  return _fife.InstanceVisual_create(*args)

class ActionVisual(Visual2DGfx):
    """Proxy of C++ FIFE::ActionVisual class"""
    __swig_setmethods__ = {}
    for _s in [Visual2DGfx]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionVisual, name, value)
    __swig_getmethods__ = {}
    for _s in [Visual2DGfx]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ActionVisual, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def create(*args):
        """create(Action action) -> ActionVisual"""
        return _fife.ActionVisual_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    __swig_destroy__ = _fife.delete_ActionVisual
    __del__ = lambda self : None;
    def addAnimation(self, *args):
        """addAnimation(ActionVisual self, uint32_t angle, SharedAnimationPointer animationptr)"""
        return _fife.ActionVisual_addAnimation(self, *args)

    def getAnimationByAngle(self, *args):
        """getAnimationByAngle(ActionVisual self, int32_t angle) -> SharedAnimationPointer"""
        return _fife.ActionVisual_getAnimationByAngle(self, *args)

    def addAnimationOverlay(self, *args):
        """addAnimationOverlay(ActionVisual self, uint32_t angle, int32_t order, SharedAnimationPointer animationptr)"""
        return _fife.ActionVisual_addAnimationOverlay(self, *args)

    def removeAnimationOverlay(self, *args):
        """removeAnimationOverlay(ActionVisual self, uint32_t angle, int32_t order)"""
        return _fife.ActionVisual_removeAnimationOverlay(self, *args)

    def getAnimationOverlay(self, *args):
        """getAnimationOverlay(ActionVisual self, int32_t angle) -> AnimationOverlayMap"""
        return _fife.ActionVisual_getAnimationOverlay(self, *args)

    def addColorOverlay(self, *args):
        """
        addColorOverlay(ActionVisual self, uint32_t angle, OverlayColors colors)
        addColorOverlay(ActionVisual self, uint32_t angle, int32_t order, OverlayColors colors)
        """
        return _fife.ActionVisual_addColorOverlay(self, *args)

    def getColorOverlay(self, *args):
        """
        getColorOverlay(ActionVisual self, int32_t angle) -> OverlayColors
        getColorOverlay(ActionVisual self, int32_t angle, int32_t order) -> OverlayColors
        """
        return _fife.ActionVisual_getColorOverlay(self, *args)

    def removeColorOverlay(self, *args):
        """
        removeColorOverlay(ActionVisual self, int32_t angle)
        removeColorOverlay(ActionVisual self, int32_t angle, int32_t order)
        """
        return _fife.ActionVisual_removeColorOverlay(self, *args)

    def getActionImageAngles(self):
        """getActionImageAngles(ActionVisual self)"""
        return _fife.ActionVisual_getActionImageAngles(self)

    def convertToOverlays(self, *args):
        """convertToOverlays(ActionVisual self, bool color)"""
        return _fife.ActionVisual_convertToOverlays(self, *args)

    def isAnimationOverlay(self):
        """isAnimationOverlay(ActionVisual self) -> bool"""
        return _fife.ActionVisual_isAnimationOverlay(self)

    def isColorOverlay(self):
        """isColorOverlay(ActionVisual self) -> bool"""
        return _fife.ActionVisual_isColorOverlay(self)

ActionVisual_swigregister = _fife.ActionVisual_swigregister
ActionVisual_swigregister(ActionVisual)

def ActionVisual_create(*args):
  """ActionVisual_create(Action action) -> ActionVisual"""
  return _fife.ActionVisual_create(*args)

# This file is compatible with both classic and new-style classes.


